<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: eolymp/atlas/editorial.proto

namespace Eolymp\Atlas\Editorial\Patch;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.atlas.Editorial.Patch.Field</code>
 */
class Field
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_PATCH = 0;</code>
     */
    const UNKNOWN_PATCH = 0;
    /**
     * Generated from protobuf enum <code>ALL = 1;</code>
     */
    const ALL = 1;
    /**
     * Generated from protobuf enum <code>LOCALE = 2;</code>
     */
    const LOCALE = 2;
    /**
     * Generated from protobuf enum <code>AUTOMATIC = 3;</code>
     */
    const AUTOMATIC = 3;
    /**
     * Generated from protobuf enum <code>DRAFT = 4;</code>
     */
    const DRAFT = 4;
    /**
     * Generated from protobuf enum <code>CONTENT = 5;</code>
     */
    const CONTENT = 5;
    /**
     * Generated from protobuf enum <code>DOWNLOAD_LINK = 6;</code>
     */
    const DOWNLOAD_LINK = 6;
    /**
     * Generated from protobuf enum <code>AUTHOR_ID = 7;</code>
     */
    const AUTHOR_ID = 7;

    private static $valueToName = [
        self::UNKNOWN_PATCH => 'UNKNOWN_PATCH',
        self::ALL => 'ALL',
        self::LOCALE => 'LOCALE',
        self::AUTOMATIC => 'AUTOMATIC',
        self::DRAFT => 'DRAFT',
        self::CONTENT => 'CONTENT',
        self::DOWNLOAD_LINK => 'DOWNLOAD_LINK',
        self::AUTHOR_ID => 'AUTHOR_ID',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

