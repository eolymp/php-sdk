<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/atlas/testset.proto

namespace Eolymp\Atlas;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>eolymp.atlas.Testset</code>
 */
class Testset extends \Google\Protobuf\Internal\Message
{
    /**
     * Unique identifier. Keep empty when creating new testset.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * Problem where this testset belongs. Keep empty when creating new testset.
     *
     * Generated from protobuf field <code>string problem_id = 2;</code>
     */
    protected $problem_id = '';
    /**
     * Index, a sequential number, of the testset within a problem.
     *
     * Generated from protobuf field <code>uint32 index = 3;</code>
     */
    protected $index = 0;
    /**
     * Time limit in milliseconds for runs within this testset.
     *
     * Generated from protobuf field <code>uint32 time_limit = 10;</code>
     */
    protected $time_limit = 0;
    /**
     * Memory limit in bytes for runs within this testset.
     *
     * Generated from protobuf field <code>uint64 memory_limit = 11;</code>
     */
    protected $memory_limit = 0;
    /**
     * File size limit in bytes for runs within this testset.
     *
     * Generated from protobuf field <code>uint64 file_size_limit = 12;</code>
     */
    protected $file_size_limit = 0;
    /**
     * List of other testset indices which must pass before this testset is executed.
     *
     * Generated from protobuf field <code>repeated uint32 dependencies = 20;</code>
     */
    private $dependencies;
    /**
     * Score mode defines how score points are awarded for this testset. See ScoringMode enumeration for details.
     *
     * Generated from protobuf field <code>.eolymp.atlas.ScoringMode scoring_mode = 30;</code>
     */
    protected $scoring_mode = 0;
    /**
     * Feedback policy defines how result will be shown back to the user
     *
     * Generated from protobuf field <code>.eolymp.atlas.FeedbackPolicy feedback_policy = 40;</code>
     */
    protected $feedback_policy = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           Unique identifier. Keep empty when creating new testset.
     *     @type string $problem_id
     *           Problem where this testset belongs. Keep empty when creating new testset.
     *     @type int $index
     *           Index, a sequential number, of the testset within a problem.
     *     @type int $time_limit
     *           Time limit in milliseconds for runs within this testset.
     *     @type int|string $memory_limit
     *           Memory limit in bytes for runs within this testset.
     *     @type int|string $file_size_limit
     *           File size limit in bytes for runs within this testset.
     *     @type int[]|\Google\Protobuf\Internal\RepeatedField $dependencies
     *           List of other testset indices which must pass before this testset is executed.
     *     @type int $scoring_mode
     *           Score mode defines how score points are awarded for this testset. See ScoringMode enumeration for details.
     *     @type int $feedback_policy
     *           Feedback policy defines how result will be shown back to the user
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Atlas\Testset::initOnce();
        parent::__construct($data);
    }

    /**
     * Unique identifier. Keep empty when creating new testset.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Unique identifier. Keep empty when creating new testset.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * Problem where this testset belongs. Keep empty when creating new testset.
     *
     * Generated from protobuf field <code>string problem_id = 2;</code>
     * @return string
     */
    public function getProblemId()
    {
        return $this->problem_id;
    }

    /**
     * Problem where this testset belongs. Keep empty when creating new testset.
     *
     * Generated from protobuf field <code>string problem_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setProblemId($var)
    {
        GPBUtil::checkString($var, True);
        $this->problem_id = $var;

        return $this;
    }

    /**
     * Index, a sequential number, of the testset within a problem.
     *
     * Generated from protobuf field <code>uint32 index = 3;</code>
     * @return int
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * Index, a sequential number, of the testset within a problem.
     *
     * Generated from protobuf field <code>uint32 index = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setIndex($var)
    {
        GPBUtil::checkUint32($var);
        $this->index = $var;

        return $this;
    }

    /**
     * Time limit in milliseconds for runs within this testset.
     *
     * Generated from protobuf field <code>uint32 time_limit = 10;</code>
     * @return int
     */
    public function getTimeLimit()
    {
        return $this->time_limit;
    }

    /**
     * Time limit in milliseconds for runs within this testset.
     *
     * Generated from protobuf field <code>uint32 time_limit = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setTimeLimit($var)
    {
        GPBUtil::checkUint32($var);
        $this->time_limit = $var;

        return $this;
    }

    /**
     * Memory limit in bytes for runs within this testset.
     *
     * Generated from protobuf field <code>uint64 memory_limit = 11;</code>
     * @return int|string
     */
    public function getMemoryLimit()
    {
        return $this->memory_limit;
    }

    /**
     * Memory limit in bytes for runs within this testset.
     *
     * Generated from protobuf field <code>uint64 memory_limit = 11;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMemoryLimit($var)
    {
        GPBUtil::checkUint64($var);
        $this->memory_limit = $var;

        return $this;
    }

    /**
     * File size limit in bytes for runs within this testset.
     *
     * Generated from protobuf field <code>uint64 file_size_limit = 12;</code>
     * @return int|string
     */
    public function getFileSizeLimit()
    {
        return $this->file_size_limit;
    }

    /**
     * File size limit in bytes for runs within this testset.
     *
     * Generated from protobuf field <code>uint64 file_size_limit = 12;</code>
     * @param int|string $var
     * @return $this
     */
    public function setFileSizeLimit($var)
    {
        GPBUtil::checkUint64($var);
        $this->file_size_limit = $var;

        return $this;
    }

    /**
     * List of other testset indices which must pass before this testset is executed.
     *
     * Generated from protobuf field <code>repeated uint32 dependencies = 20;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getDependencies()
    {
        return $this->dependencies;
    }

    /**
     * List of other testset indices which must pass before this testset is executed.
     *
     * Generated from protobuf field <code>repeated uint32 dependencies = 20;</code>
     * @param int[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setDependencies($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::UINT32);
        $this->dependencies = $arr;

        return $this;
    }

    /**
     * Score mode defines how score points are awarded for this testset. See ScoringMode enumeration for details.
     *
     * Generated from protobuf field <code>.eolymp.atlas.ScoringMode scoring_mode = 30;</code>
     * @return int
     */
    public function getScoringMode()
    {
        return $this->scoring_mode;
    }

    /**
     * Score mode defines how score points are awarded for this testset. See ScoringMode enumeration for details.
     *
     * Generated from protobuf field <code>.eolymp.atlas.ScoringMode scoring_mode = 30;</code>
     * @param int $var
     * @return $this
     */
    public function setScoringMode($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Atlas\ScoringMode::class);
        $this->scoring_mode = $var;

        return $this;
    }

    /**
     * Feedback policy defines how result will be shown back to the user
     *
     * Generated from protobuf field <code>.eolymp.atlas.FeedbackPolicy feedback_policy = 40;</code>
     * @return int
     */
    public function getFeedbackPolicy()
    {
        return $this->feedback_policy;
    }

    /**
     * Feedback policy defines how result will be shown back to the user
     *
     * Generated from protobuf field <code>.eolymp.atlas.FeedbackPolicy feedback_policy = 40;</code>
     * @param int $var
     * @return $this
     */
    public function setFeedbackPolicy($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Atlas\FeedbackPolicy::class);
        $this->feedback_policy = $var;

        return $this;
    }

}

