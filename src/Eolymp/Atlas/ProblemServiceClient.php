<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Atlas;

class ProblemServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param DeleteProblemInput $input message
     * @param array $context request parameters
     *
     * @return DeleteProblemOutput output message
     */
    public function DeleteProblem(DeleteProblemInput $input, array $context = [])
    {
        $path = "/";

        $context['name'] = "eolymp.atlas.ProblemService/DeleteProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteProblemOutput::class, $context);
    }

    /**
     * @param UpdateProblemInput $input message
     * @param array $context request parameters
     *
     * @return UpdateProblemOutput output message
     */
    public function UpdateProblem(UpdateProblemInput $input, array $context = [])
    {
        $path = "/";

        $context['name'] = "eolymp.atlas.ProblemService/UpdateProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateProblemOutput::class, $context);
    }

    /**
     * @param SyncProblemInput $input message
     * @param array $context request parameters
     *
     * @return SyncProblemOutput output message
     */
    public function SyncProblem(SyncProblemInput $input, array $context = [])
    {
        $path = "/sync";

        $context['name'] = "eolymp.atlas.ProblemService/SyncProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, SyncProblemOutput::class, $context);
    }

    /**
     * @param DescribeProblemInput $input message
     * @param array $context request parameters
     *
     * @return DescribeProblemOutput output message
     */
    public function DescribeProblem(DescribeProblemInput $input, array $context = [])
    {
        $path = "/";

        $context['name'] = "eolymp.atlas.ProblemService/DescribeProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeProblemOutput::class, $context);
    }

    /**
     * deprecated: use UpdateProblem instead
     *
     * @param UpdateVisibilityInput $input message
     * @param array $context request parameters
     *
     * @return UpdateVisibilityOutput output message
     */
    public function UpdateVisibility(UpdateVisibilityInput $input, array $context = [])
    {
        $path = "/visibility";

        $context['name'] = "eolymp.atlas.ProblemService/UpdateVisibility";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateVisibilityOutput::class, $context);
    }

    /**
     * deprecated: use UpdateProblem instead
     *
     * @param UpdatePrivacyInput $input message
     * @param array $context request parameters
     *
     * @return UpdatePrivacyOutput output message
     */
    public function UpdatePrivacy(UpdatePrivacyInput $input, array $context = [])
    {
        $path = "/privacy";

        $context['name'] = "eolymp.atlas.ProblemService/UpdatePrivacy";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdatePrivacyOutput::class, $context);
    }

    /**
     * @param ListVersionsInput $input message
     * @param array $context request parameters
     *
     * @return ListVersionsOutput output message
     */
    public function ListVersions(ListVersionsInput $input, array $context = [])
    {
        $path = "/versions";

        $context['name'] = "eolymp.atlas.ProblemService/ListVersions";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListVersionsOutput::class, $context);
    }

}
