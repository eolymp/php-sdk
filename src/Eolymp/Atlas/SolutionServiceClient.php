<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Atlas;

class SolutionServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateSolutionInput $input message
     * @param array $context request parameters
     *
     * @return CreateSolutionOutput output message
     */
    public function CreateSolution(CreateSolutionInput $input, array $context = [])
    {
        $path = "/solutions";

        $context['name'] = "eolymp.atlas.SolutionService/CreateSolution";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, CreateSolutionOutput::class, $context);
    }

    /**
     * @param UpdateSolutionInput $input message
     * @param array $context request parameters
     *
     * @return UpdateSolutionOutput output message
     */
    public function UpdateSolution(UpdateSolutionInput $input, array $context = [])
    {
        $path = "/solutions/".rawurlencode($input->getSolutionId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSolutionId("");

        $context['name'] = "eolymp.atlas.SolutionService/UpdateSolution";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateSolutionOutput::class, $context);
    }

    /**
     * @param DeleteSolutionInput $input message
     * @param array $context request parameters
     *
     * @return DeleteSolutionOutput output message
     */
    public function DeleteSolution(DeleteSolutionInput $input, array $context = [])
    {
        $path = "/solutions/".rawurlencode($input->getSolutionId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSolutionId("");

        $context['name'] = "eolymp.atlas.SolutionService/DeleteSolution";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteSolutionOutput::class, $context);
    }

    /**
     * @param DescribeSolutionInput $input message
     * @param array $context request parameters
     *
     * @return DescribeSolutionOutput output message
     */
    public function DescribeSolution(DescribeSolutionInput $input, array $context = [])
    {
        $path = "/solutions/".rawurlencode($input->getSolutionId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSolutionId("");

        $context['name'] = "eolymp.atlas.SolutionService/DescribeSolution";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeSolutionOutput::class, $context);
    }

    /**
     * @param ListSolutionsInput $input message
     * @param array $context request parameters
     *
     * @return ListSolutionsOutput output message
     */
    public function ListSolutions(ListSolutionsInput $input, array $context = [])
    {
        $path = "/solutions";

        $context['name'] = "eolymp.atlas.SolutionService/ListSolutions";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListSolutionsOutput::class, $context);
    }

}
