<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Atlas;

class ScriptServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateScriptInput $input message
     * @param array $context request parameters
     *
     * @return CreateScriptOutput output message
     */
    public function CreateScript(CreateScriptInput $input, array $context = [])
    {
        $path = "/scripts";

        $context['name'] = "eolymp.atlas.ScriptService/CreateScript";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, CreateScriptOutput::class, $context);
    }

    /**
     * @param UpdateScriptInput $input message
     * @param array $context request parameters
     *
     * @return UpdateScriptOutput output message
     */
    public function UpdateScript(UpdateScriptInput $input, array $context = [])
    {
        $path = "/scripts/".rawurlencode($input->getScriptId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setScriptId("");

        $context['name'] = "eolymp.atlas.ScriptService/UpdateScript";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateScriptOutput::class, $context);
    }

    /**
     * @param DeleteScriptInput $input message
     * @param array $context request parameters
     *
     * @return DeleteScriptOutput output message
     */
    public function DeleteScript(DeleteScriptInput $input, array $context = [])
    {
        $path = "/scripts/".rawurlencode($input->getScriptId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setScriptId("");

        $context['name'] = "eolymp.atlas.ScriptService/DeleteScript";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteScriptOutput::class, $context);
    }

    /**
     * @param DescribeScriptInput $input message
     * @param array $context request parameters
     *
     * @return DescribeScriptOutput output message
     */
    public function DescribeScript(DescribeScriptInput $input, array $context = [])
    {
        $path = "/scripts/".rawurlencode($input->getScriptId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setScriptId("");

        $context['name'] = "eolymp.atlas.ScriptService/DescribeScript";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeScriptOutput::class, $context);
    }

    /**
     * @param ListScriptsInput $input message
     * @param array $context request parameters
     *
     * @return ListScriptsOutput output message
     */
    public function ListScripts(ListScriptsInput $input, array $context = [])
    {
        $path = "/scripts";

        $context['name'] = "eolymp.atlas.ScriptService/ListScripts";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListScriptsOutput::class, $context);
    }

    /**
     * @param ExecuteStressCheckInput $input message
     * @param array $context request parameters
     *
     * @return ExecuteStressCheckOutput output message
     */
    public function ExecuteStressCheck(ExecuteStressCheckInput $input, array $context = [])
    {
        $path = "/scripts:stress-check";

        $context['name'] = "eolymp.atlas.ScriptService/ExecuteStressCheck";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ExecuteStressCheckOutput::class, $context);
    }

}
