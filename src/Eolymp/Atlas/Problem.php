<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/atlas/problem.proto

namespace Eolymp\Atlas;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>eolymp.atlas.Problem</code>
 */
class Problem extends \Google\Protobuf\Internal\Message
{
    /**
     * Unique identifier.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * Generated from protobuf field <code>string url = 682;</code>
     */
    protected $url = '';
    /**
     * Generated from protobuf field <code>map<string, string> links = 683;</code>
     */
    private $links;
    /**
     * Index in the public problem catalog.
     *
     * Generated from protobuf field <code>int32 number = 10;</code>
     */
    protected $number = 0;
    /**
     * Problem is visible to users in public catalog.
     *
     * Generated from protobuf field <code>bool visible = 11;</code>
     */
    protected $visible = false;
    /**
     * Problem is only accessible to users who were specifically granted access to it.
     *
     * Generated from protobuf field <code>bool private = 12;</code>
     */
    protected $private = false;
    /**
     * For imported problems, provides the source from where the problem is imported and synchronized.
     *
     * Generated from protobuf field <code>string origin = 13;</code>
     */
    protected $origin = '';
    /**
     * Problem topics (ID of topics from eolymp.taxonomy.TopicService)
     *
     * Generated from protobuf field <code>repeated string topics = 20;</code>
     */
    private $topics;
    /**
     * Constraints
     *
     * Generated from protobuf field <code>uint32 min_time_limit = 60;</code>
     */
    protected $min_time_limit = 0;
    /**
     * Maximum time limit in milliseconds among all testsets.
     *
     * Generated from protobuf field <code>uint32 max_time_limit = 61;</code>
     */
    protected $max_time_limit = 0;
    /**
     * Minimum CPU limit in milliseconds among all testsets.
     *
     * Generated from protobuf field <code>uint32 min_cpu_limit = 62;</code>
     */
    protected $min_cpu_limit = 0;
    /**
     * Maximum CPU limit in milliseconds among all testsets.
     *
     * Generated from protobuf field <code>uint32 max_cpu_limit = 63;</code>
     */
    protected $max_cpu_limit = 0;
    /**
     * Minimum memory limit in bytes among all testsets.
     *
     * Generated from protobuf field <code>uint64 min_memory_limit = 64;</code>
     */
    protected $min_memory_limit = 0;
    /**
     * Maximum memory limit in bytes among all testsets.
     *
     * Generated from protobuf field <code>uint64 max_memory_limit = 65;</code>
     */
    protected $max_memory_limit = 0;
    /**
     * Acceptance rate from 0 to 1, where 1 means that all submissions are accepted.
     *
     * Generated from protobuf field <code>float acceptance_rate = 40;</code>
     */
    protected $acceptance_rate = 0.0;
    /**
     * Generated from protobuf field <code>uint32 submissions_count = 42;</code>
     */
    protected $submissions_count = 0;
    /**
     * Generated from protobuf field <code>uint32 submissions_accepted = 43;</code>
     */
    protected $submissions_accepted = 0;
    /**
     * Number of votes for the problem
     *
     * Generated from protobuf field <code>int32 vote = 50;</code>
     */
    protected $vote = 0;
    /**
     * Generated from protobuf field <code>int32 vote_count = 51;</code>
     */
    protected $vote_count = 0;
    /**
     * Difficulty from 0 (very easy) to 5 (very hard)
     *
     * Generated from protobuf field <code>uint32 difficulty = 21;</code>
     */
    protected $difficulty = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           Unique identifier.
     *     @type string $url
     *     @type array|\Google\Protobuf\Internal\MapField $links
     *     @type int $number
     *           Index in the public problem catalog.
     *     @type bool $visible
     *           Problem is visible to users in public catalog.
     *     @type bool $private
     *           Problem is only accessible to users who were specifically granted access to it.
     *     @type string $origin
     *           For imported problems, provides the source from where the problem is imported and synchronized.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $topics
     *           Problem topics (ID of topics from eolymp.taxonomy.TopicService)
     *     @type int $min_time_limit
     *           Constraints
     *     @type int $max_time_limit
     *           Maximum time limit in milliseconds among all testsets.
     *     @type int $min_cpu_limit
     *           Minimum CPU limit in milliseconds among all testsets.
     *     @type int $max_cpu_limit
     *           Maximum CPU limit in milliseconds among all testsets.
     *     @type int|string $min_memory_limit
     *           Minimum memory limit in bytes among all testsets.
     *     @type int|string $max_memory_limit
     *           Maximum memory limit in bytes among all testsets.
     *     @type float $acceptance_rate
     *           Acceptance rate from 0 to 1, where 1 means that all submissions are accepted.
     *     @type int $submissions_count
     *     @type int $submissions_accepted
     *     @type int $vote
     *           Number of votes for the problem
     *     @type int $vote_count
     *     @type int $difficulty
     *           Difficulty from 0 (very easy) to 5 (very hard)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Atlas\Problem::initOnce();
        parent::__construct($data);
    }

    /**
     * Unique identifier.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Unique identifier.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string url = 682;</code>
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Generated from protobuf field <code>string url = 682;</code>
     * @param string $var
     * @return $this
     */
    public function setUrl($var)
    {
        GPBUtil::checkString($var, True);
        $this->url = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>map<string, string> links = 683;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getLinks()
    {
        return $this->links;
    }

    /**
     * Generated from protobuf field <code>map<string, string> links = 683;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setLinks($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->links = $arr;

        return $this;
    }

    /**
     * Index in the public problem catalog.
     *
     * Generated from protobuf field <code>int32 number = 10;</code>
     * @return int
     */
    public function getNumber()
    {
        return $this->number;
    }

    /**
     * Index in the public problem catalog.
     *
     * Generated from protobuf field <code>int32 number = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setNumber($var)
    {
        GPBUtil::checkInt32($var);
        $this->number = $var;

        return $this;
    }

    /**
     * Problem is visible to users in public catalog.
     *
     * Generated from protobuf field <code>bool visible = 11;</code>
     * @return bool
     */
    public function getVisible()
    {
        return $this->visible;
    }

    /**
     * Problem is visible to users in public catalog.
     *
     * Generated from protobuf field <code>bool visible = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setVisible($var)
    {
        GPBUtil::checkBool($var);
        $this->visible = $var;

        return $this;
    }

    /**
     * Problem is only accessible to users who were specifically granted access to it.
     *
     * Generated from protobuf field <code>bool private = 12;</code>
     * @return bool
     */
    public function getPrivate()
    {
        return $this->private;
    }

    /**
     * Problem is only accessible to users who were specifically granted access to it.
     *
     * Generated from protobuf field <code>bool private = 12;</code>
     * @param bool $var
     * @return $this
     */
    public function setPrivate($var)
    {
        GPBUtil::checkBool($var);
        $this->private = $var;

        return $this;
    }

    /**
     * For imported problems, provides the source from where the problem is imported and synchronized.
     *
     * Generated from protobuf field <code>string origin = 13;</code>
     * @return string
     */
    public function getOrigin()
    {
        return $this->origin;
    }

    /**
     * For imported problems, provides the source from where the problem is imported and synchronized.
     *
     * Generated from protobuf field <code>string origin = 13;</code>
     * @param string $var
     * @return $this
     */
    public function setOrigin($var)
    {
        GPBUtil::checkString($var, True);
        $this->origin = $var;

        return $this;
    }

    /**
     * Problem topics (ID of topics from eolymp.taxonomy.TopicService)
     *
     * Generated from protobuf field <code>repeated string topics = 20;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getTopics()
    {
        return $this->topics;
    }

    /**
     * Problem topics (ID of topics from eolymp.taxonomy.TopicService)
     *
     * Generated from protobuf field <code>repeated string topics = 20;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setTopics($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->topics = $arr;

        return $this;
    }

    /**
     * Constraints
     *
     * Generated from protobuf field <code>uint32 min_time_limit = 60;</code>
     * @return int
     */
    public function getMinTimeLimit()
    {
        return $this->min_time_limit;
    }

    /**
     * Constraints
     *
     * Generated from protobuf field <code>uint32 min_time_limit = 60;</code>
     * @param int $var
     * @return $this
     */
    public function setMinTimeLimit($var)
    {
        GPBUtil::checkUint32($var);
        $this->min_time_limit = $var;

        return $this;
    }

    /**
     * Maximum time limit in milliseconds among all testsets.
     *
     * Generated from protobuf field <code>uint32 max_time_limit = 61;</code>
     * @return int
     */
    public function getMaxTimeLimit()
    {
        return $this->max_time_limit;
    }

    /**
     * Maximum time limit in milliseconds among all testsets.
     *
     * Generated from protobuf field <code>uint32 max_time_limit = 61;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxTimeLimit($var)
    {
        GPBUtil::checkUint32($var);
        $this->max_time_limit = $var;

        return $this;
    }

    /**
     * Minimum CPU limit in milliseconds among all testsets.
     *
     * Generated from protobuf field <code>uint32 min_cpu_limit = 62;</code>
     * @return int
     */
    public function getMinCpuLimit()
    {
        return $this->min_cpu_limit;
    }

    /**
     * Minimum CPU limit in milliseconds among all testsets.
     *
     * Generated from protobuf field <code>uint32 min_cpu_limit = 62;</code>
     * @param int $var
     * @return $this
     */
    public function setMinCpuLimit($var)
    {
        GPBUtil::checkUint32($var);
        $this->min_cpu_limit = $var;

        return $this;
    }

    /**
     * Maximum CPU limit in milliseconds among all testsets.
     *
     * Generated from protobuf field <code>uint32 max_cpu_limit = 63;</code>
     * @return int
     */
    public function getMaxCpuLimit()
    {
        return $this->max_cpu_limit;
    }

    /**
     * Maximum CPU limit in milliseconds among all testsets.
     *
     * Generated from protobuf field <code>uint32 max_cpu_limit = 63;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxCpuLimit($var)
    {
        GPBUtil::checkUint32($var);
        $this->max_cpu_limit = $var;

        return $this;
    }

    /**
     * Minimum memory limit in bytes among all testsets.
     *
     * Generated from protobuf field <code>uint64 min_memory_limit = 64;</code>
     * @return int|string
     */
    public function getMinMemoryLimit()
    {
        return $this->min_memory_limit;
    }

    /**
     * Minimum memory limit in bytes among all testsets.
     *
     * Generated from protobuf field <code>uint64 min_memory_limit = 64;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMinMemoryLimit($var)
    {
        GPBUtil::checkUint64($var);
        $this->min_memory_limit = $var;

        return $this;
    }

    /**
     * Maximum memory limit in bytes among all testsets.
     *
     * Generated from protobuf field <code>uint64 max_memory_limit = 65;</code>
     * @return int|string
     */
    public function getMaxMemoryLimit()
    {
        return $this->max_memory_limit;
    }

    /**
     * Maximum memory limit in bytes among all testsets.
     *
     * Generated from protobuf field <code>uint64 max_memory_limit = 65;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxMemoryLimit($var)
    {
        GPBUtil::checkUint64($var);
        $this->max_memory_limit = $var;

        return $this;
    }

    /**
     * Acceptance rate from 0 to 1, where 1 means that all submissions are accepted.
     *
     * Generated from protobuf field <code>float acceptance_rate = 40;</code>
     * @return float
     */
    public function getAcceptanceRate()
    {
        return $this->acceptance_rate;
    }

    /**
     * Acceptance rate from 0 to 1, where 1 means that all submissions are accepted.
     *
     * Generated from protobuf field <code>float acceptance_rate = 40;</code>
     * @param float $var
     * @return $this
     */
    public function setAcceptanceRate($var)
    {
        GPBUtil::checkFloat($var);
        $this->acceptance_rate = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 submissions_count = 42;</code>
     * @return int
     */
    public function getSubmissionsCount()
    {
        return $this->submissions_count;
    }

    /**
     * Generated from protobuf field <code>uint32 submissions_count = 42;</code>
     * @param int $var
     * @return $this
     */
    public function setSubmissionsCount($var)
    {
        GPBUtil::checkUint32($var);
        $this->submissions_count = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 submissions_accepted = 43;</code>
     * @return int
     */
    public function getSubmissionsAccepted()
    {
        return $this->submissions_accepted;
    }

    /**
     * Generated from protobuf field <code>uint32 submissions_accepted = 43;</code>
     * @param int $var
     * @return $this
     */
    public function setSubmissionsAccepted($var)
    {
        GPBUtil::checkUint32($var);
        $this->submissions_accepted = $var;

        return $this;
    }

    /**
     * Number of votes for the problem
     *
     * Generated from protobuf field <code>int32 vote = 50;</code>
     * @return int
     */
    public function getVote()
    {
        return $this->vote;
    }

    /**
     * Number of votes for the problem
     *
     * Generated from protobuf field <code>int32 vote = 50;</code>
     * @param int $var
     * @return $this
     */
    public function setVote($var)
    {
        GPBUtil::checkInt32($var);
        $this->vote = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>int32 vote_count = 51;</code>
     * @return int
     */
    public function getVoteCount()
    {
        return $this->vote_count;
    }

    /**
     * Generated from protobuf field <code>int32 vote_count = 51;</code>
     * @param int $var
     * @return $this
     */
    public function setVoteCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->vote_count = $var;

        return $this;
    }

    /**
     * Difficulty from 0 (very easy) to 5 (very hard)
     *
     * Generated from protobuf field <code>uint32 difficulty = 21;</code>
     * @return int
     */
    public function getDifficulty()
    {
        return $this->difficulty;
    }

    /**
     * Difficulty from 0 (very easy) to 5 (very hard)
     *
     * Generated from protobuf field <code>uint32 difficulty = 21;</code>
     * @param int $var
     * @return $this
     */
    public function setDifficulty($var)
    {
        GPBUtil::checkUint32($var);
        $this->difficulty = $var;

        return $this;
    }

}

