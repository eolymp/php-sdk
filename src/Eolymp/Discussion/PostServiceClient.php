<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Discussion;

class PostServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param DescribePostInput $input message
     * @param array $context request parameters
     *
     * @return DescribePostOutput output message
     */
    public function DescribePost(DescribePostInput $input, array $context = [])
    {
        $path = "/posts/".rawurlencode($input->getPostId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setPostId("");

        $context['name'] = "eolymp.discussion.PostService/DescribePost";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribePostOutput::class, $context);
    }

    /**
     * @param ListPostsInput $input message
     * @param array $context request parameters
     *
     * @return ListPostsOutput output message
     */
    public function ListPosts(ListPostsInput $input, array $context = [])
    {
        $path = "/posts";

        $context['name'] = "eolymp.discussion.PostService/ListPosts";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListPostsOutput::class, $context);
    }

    /**
     * @param CreatePostInput $input message
     * @param array $context request parameters
     *
     * @return CreatePostOutput output message
     */
    public function CreatePost(CreatePostInput $input, array $context = [])
    {
        $path = "/posts";

        $context['name'] = "eolymp.discussion.PostService/CreatePost";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreatePostOutput::class, $context);
    }

    /**
     * @param UpdatePostInput $input message
     * @param array $context request parameters
     *
     * @return UpdatePostOutput output message
     */
    public function UpdatePost(UpdatePostInput $input, array $context = [])
    {
        $path = "/posts/".rawurlencode($input->getPostId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setPostId("");

        $context['name'] = "eolymp.discussion.PostService/UpdatePost";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdatePostOutput::class, $context);
    }

    /**
     * @param DeletePostInput $input message
     * @param array $context request parameters
     *
     * @return DeletePostOutput output message
     */
    public function DeletePost(DeletePostInput $input, array $context = [])
    {
        $path = "/posts/".rawurlencode($input->getPostId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setPostId("");

        $context['name'] = "eolymp.discussion.PostService/DeletePost";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeletePostOutput::class, $context);
    }

    /**
     * @param VotePostInput $input message
     * @param array $context request parameters
     *
     * @return VotePostOutput output message
     */
    public function VotePost(VotePostInput $input, array $context = [])
    {
        $path = "/messages/".rawurlencode($input->getMessageId())."/vote";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMessageId("");

        $context['name'] = "eolymp.discussion.PostService/VotePost";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, VotePostOutput::class, $context);
    }

}
