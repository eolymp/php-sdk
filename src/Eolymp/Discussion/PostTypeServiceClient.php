<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Discussion;

class PostTypeServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param DescribePostTypeInput $input message
     * @param array $context request parameters
     *
     * @return DescribePostTypeOutput output message
     */
    public function DescribePostType(DescribePostTypeInput $input, array $context = [])
    {
        $path = "/post-types/".rawurlencode($input->getTypeId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTypeId("");

        $context['name'] = "eolymp.discussion.PostTypeService/DescribePostType";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribePostTypeOutput::class, $context);
    }

    /**
     * @param ListPostTypesInput $input message
     * @param array $context request parameters
     *
     * @return ListPostTypesOutput output message
     */
    public function ListPostTypes(ListPostTypesInput $input, array $context = [])
    {
        $path = "/post-types";

        $context['name'] = "eolymp.discussion.PostTypeService/ListPostTypes";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListPostTypesOutput::class, $context);
    }

    /**
     * @param CreatePostTypeInput $input message
     * @param array $context request parameters
     *
     * @return CreatePostTypeOutput output message
     */
    public function CreatePostType(CreatePostTypeInput $input, array $context = [])
    {
        $path = "/post-types";

        $context['name'] = "eolymp.discussion.PostTypeService/CreatePostType";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreatePostTypeOutput::class, $context);
    }

    /**
     * @param UpdatePostTypeInput $input message
     * @param array $context request parameters
     *
     * @return UpdatePostTypeOutput output message
     */
    public function UpdatePostType(UpdatePostTypeInput $input, array $context = [])
    {
        $path = "/post-types/".rawurlencode($input->getTypeId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTypeId("");

        $context['name'] = "eolymp.discussion.PostTypeService/UpdatePostType";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdatePostTypeOutput::class, $context);
    }

    /**
     * @param DeletePostTypeInput $input message
     * @param array $context request parameters
     *
     * @return DeletePostTypeOutput output message
     */
    public function DeletePostType(DeletePostTypeInput $input, array $context = [])
    {
        $path = "/post-types/".rawurlencode($input->getTypeId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTypeId("");

        $context['name'] = "eolymp.discussion.PostTypeService/DeletePostType";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeletePostTypeOutput::class, $context);
    }

    /**
     * @param DescribePostTypeVariantInput $input message
     * @param array $context request parameters
     *
     * @return DescribePostTypeVariantOutput output message
     */
    public function DescribePostTypeVariant(DescribePostTypeVariantInput $input, array $context = [])
    {
        $path = "/post-types/".rawurlencode($input->getTypeId())."/variants/".rawurlencode($input->getVariantId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTypeId("");
        $input->setVariantId("");

        $context['name'] = "eolymp.discussion.PostTypeService/DescribePostTypeVariant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribePostTypeVariantOutput::class, $context);
    }

    /**
     * @param ListPostTypeVariantsInput $input message
     * @param array $context request parameters
     *
     * @return ListPostTypeVariantsOutput output message
     */
    public function ListPostTypeVariants(ListPostTypeVariantsInput $input, array $context = [])
    {
        $path = "/post-types/".rawurlencode($input->getTypeId())."/variants";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTypeId("");

        $context['name'] = "eolymp.discussion.PostTypeService/ListPostTypeVariants";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListPostTypeVariantsOutput::class, $context);
    }

    /**
     * @param CreatePostTypeVariantInput $input message
     * @param array $context request parameters
     *
     * @return CreatePostTypeVariantOutput output message
     */
    public function CreatePostTypeVariant(CreatePostTypeVariantInput $input, array $context = [])
    {
        $path = "/post-types/".rawurlencode($input->getTypeId())."/variants";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTypeId("");

        $context['name'] = "eolymp.discussion.PostTypeService/CreatePostTypeVariant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreatePostTypeVariantOutput::class, $context);
    }

    /**
     * @param UpdatePostTypeVariantInput $input message
     * @param array $context request parameters
     *
     * @return UpdatePostTypeVariantOutput output message
     */
    public function UpdatePostTypeVariant(UpdatePostTypeVariantInput $input, array $context = [])
    {
        $path = "/post-types/".rawurlencode($input->getTypeId())."/variants/".rawurlencode($input->getVariantId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTypeId("");
        $input->setVariantId("");

        $context['name'] = "eolymp.discussion.PostTypeService/UpdatePostTypeVariant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdatePostTypeVariantOutput::class, $context);
    }

    /**
     * @param DeletePostTypeVariantInput $input message
     * @param array $context request parameters
     *
     * @return DeletePostTypeVariantOutput output message
     */
    public function DeletePostTypeVariant(DeletePostTypeVariantInput $input, array $context = [])
    {
        $path = "/post-types/".rawurlencode($input->getTypeId())."/variants/".rawurlencode($input->getVariantId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTypeId("");
        $input->setVariantId("");

        $context['name'] = "eolymp.discussion.PostTypeService/DeletePostTypeVariant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeletePostTypeVariantOutput::class, $context);
    }

}
