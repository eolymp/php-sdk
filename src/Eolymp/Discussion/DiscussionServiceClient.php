<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Discussion;

class DiscussionServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param DescribeDiscussionInput $input message
     * @param array $context request parameters
     *
     * @return DescribeDiscussionOutput output message
     */
    public function DescribeDiscussion(DescribeDiscussionInput $input, array $context = [])
    {
        $path = "/discussions/".rawurlencode($input->getDiscussionId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDiscussionId("");

        $context['name'] = "eolymp.discussion.DiscussionService/DescribeDiscussion";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeDiscussionOutput::class, $context);
    }

    /**
     * @param ListDiscussionsInput $input message
     * @param array $context request parameters
     *
     * @return ListDiscussionsOutput output message
     */
    public function ListDiscussions(ListDiscussionsInput $input, array $context = [])
    {
        $path = "/discussions";

        $context['name'] = "eolymp.discussion.DiscussionService/ListDiscussions";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListDiscussionsOutput::class, $context);
    }

    /**
     * @param CreateDiscussionInput $input message
     * @param array $context request parameters
     *
     * @return CreateDiscussionOutput output message
     */
    public function CreateDiscussion(CreateDiscussionInput $input, array $context = [])
    {
        $path = "/discussions";

        $context['name'] = "eolymp.discussion.DiscussionService/CreateDiscussion";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateDiscussionOutput::class, $context);
    }

    /**
     * @param UpdateDiscussionInput $input message
     * @param array $context request parameters
     *
     * @return UpdateDiscussionOutput output message
     */
    public function UpdateDiscussion(UpdateDiscussionInput $input, array $context = [])
    {
        $path = "/discussions/".rawurlencode($input->getDiscussionId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDiscussionId("");

        $context['name'] = "eolymp.discussion.DiscussionService/UpdateDiscussion";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateDiscussionOutput::class, $context);
    }

    /**
     * @param DeleteDiscussionInput $input message
     * @param array $context request parameters
     *
     * @return DeleteDiscussionOutput output message
     */
    public function DeleteDiscussion(DeleteDiscussionInput $input, array $context = [])
    {
        $path = "/discussions/".rawurlencode($input->getDiscussionId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDiscussionId("");

        $context['name'] = "eolymp.discussion.DiscussionService/DeleteDiscussion";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteDiscussionOutput::class, $context);
    }

    /**
     * @param VoteDiscussionInput $input message
     * @param array $context request parameters
     *
     * @return VoteDiscussionOutput output message
     */
    public function VoteDiscussion(VoteDiscussionInput $input, array $context = [])
    {
        $path = "/discussions/".rawurlencode($input->getDiscussionId())."/vote";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDiscussionId("");

        $context['name'] = "eolymp.discussion.DiscussionService/VoteDiscussion";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, VoteDiscussionOutput::class, $context);
    }

}
