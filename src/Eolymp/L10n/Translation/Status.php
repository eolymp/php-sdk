<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/l10n/translation.proto

namespace Eolymp\L10n\Translation;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.l10n.Translation.Status</code>
 */
class Status
{
    /**
     * reserved, not in use
     *
     * Generated from protobuf enum <code>NONE = 0;</code>
     */
    const NONE = 0;
    /**
     * suggestion pending review
     *
     * Generated from protobuf enum <code>PENDING = 1;</code>
     */
    const PENDING = 1;
    /**
     * active translation
     *
     * Generated from protobuf enum <code>ACTIVE = 2;</code>
     */
    const ACTIVE = 2;
    /**
     * unused translation
     *
     * Generated from protobuf enum <code>UNUSED = 4;</code>
     */
    const UNUSED = 4;
    /**
     * translation which requires review
     *
     * Generated from protobuf enum <code>NEEDS_REVIEW = 5;</code>
     */
    const NEEDS_REVIEW = 5;

    private static $valueToName = [
        self::NONE => 'NONE',
        self::PENDING => 'PENDING',
        self::ACTIVE => 'ACTIVE',
        self::UNUSED => 'UNUSED',
        self::NEEDS_REVIEW => 'NEEDS_REVIEW',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Status::class, \Eolymp\L10n\Translation_Status::class);

