<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Certificate;

class CertificateServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateCertificateInput $input message
     * @param array $context request parameters
     *
     * @return CreateCertificateOutput output message
     */
    public function CreateCertificate(CreateCertificateInput $input, array $context = [])
    {
        $path = "/certificates";

        $context['name'] = "eolymp.certificate.CertificateService/CreateCertificate";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateCertificateOutput::class, $context);
    }

    /**
     * @param VoidCertificateInput $input message
     * @param array $context request parameters
     *
     * @return VoidCertificateOutput output message
     */
    public function VoidCertificate(VoidCertificateInput $input, array $context = [])
    {
        $path = "/certificates/".rawurlencode($input->getCertificateId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setCertificateId("");

        $context['name'] = "eolymp.certificate.CertificateService/VoidCertificate";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, VoidCertificateOutput::class, $context);
    }

    /**
     * @param DescribeCertificateInput $input message
     * @param array $context request parameters
     *
     * @return DescribeCertificateOutput output message
     */
    public function DescribeCertificate(DescribeCertificateInput $input, array $context = [])
    {
        $path = "/certificates/".rawurlencode($input->getCertificateId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setCertificateId("");

        $context['name'] = "eolymp.certificate.CertificateService/DescribeCertificate";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeCertificateOutput::class, $context);
    }

    /**
     * @param ListCertificatesInput $input message
     * @param array $context request parameters
     *
     * @return ListCertificatesOutput output message
     */
    public function ListCertificates(ListCertificatesInput $input, array $context = [])
    {
        $path = "/members/".rawurlencode($input->getMemberId())."/certificates";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");

        $context['name'] = "eolymp.certificate.CertificateService/ListCertificates";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListCertificatesOutput::class, $context);
    }

}
