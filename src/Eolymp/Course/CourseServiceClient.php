<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Course;

class CourseServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateCourseInput $input message
     * @param array $context request parameters
     *
     * @return CreateCourseOutput output message
     */
    public function CreateCourse(CreateCourseInput $input, array $context = [])
    {
        $path = "/courses";

        $context['name'] = "eolymp.course.CourseService/CreateCourse";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, CreateCourseOutput::class, $context);
    }

    /**
     * @param UpdateCourseInput $input message
     * @param array $context request parameters
     *
     * @return UpdateCourseOutput output message
     */
    public function UpdateCourse(UpdateCourseInput $input, array $context = [])
    {
        $path = "/courses/".rawurlencode($input->getCourseId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setCourseId("");

        $context['name'] = "eolymp.course.CourseService/UpdateCourse";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateCourseOutput::class, $context);
    }

    /**
     * @param DeleteCourseInput $input message
     * @param array $context request parameters
     *
     * @return DeleteCourseOutput output message
     */
    public function DeleteCourse(DeleteCourseInput $input, array $context = [])
    {
        $path = "/courses/".rawurlencode($input->getCourseId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setCourseId("");

        $context['name'] = "eolymp.course.CourseService/DeleteCourse";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteCourseOutput::class, $context);
    }

    /**
     * @param DescribeCourseInput $input message
     * @param array $context request parameters
     *
     * @return DescribeCourseOutput output message
     */
    public function DescribeCourse(DescribeCourseInput $input, array $context = [])
    {
        $path = "/courses/".rawurlencode($input->getCourseId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setCourseId("");

        $context['name'] = "eolymp.course.CourseService/DescribeCourse";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeCourseOutput::class, $context);
    }

    /**
     * @param ListCoursesInput $input message
     * @param array $context request parameters
     *
     * @return ListCoursesOutput output message
     */
    public function ListCourses(ListCoursesInput $input, array $context = [])
    {
        $path = "/courses";

        $context['name'] = "eolymp.course.CourseService/ListCourses";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListCoursesOutput::class, $context);
    }

    /**
     * @param AssignCourseInput $input message
     * @param array $context request parameters
     *
     * @return AssignCourseOutput output message
     */
    public function AssignCourse(AssignCourseInput $input, array $context = [])
    {
        $path = "/courses/".rawurlencode($input->getCourseId())."/assignments";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setCourseId("");

        $context['name'] = "eolymp.course.CourseService/AssignCourse";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, AssignCourseOutput::class, $context);
    }

    /**
     * @param UnassignCourseInput $input message
     * @param array $context request parameters
     *
     * @return UnassignCourseOutput output message
     */
    public function UnassignCourse(UnassignCourseInput $input, array $context = [])
    {
        $path = "/courses/".rawurlencode($input->getCourseId())."/assignments/".rawurlencode($input->getStudentId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setCourseId("");
        $input->setStudentId("");

        $context['name'] = "eolymp.course.CourseService/UnassignCourse";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, UnassignCourseOutput::class, $context);
    }

    /**
     * @param StartCourseInput $input message
     * @param array $context request parameters
     *
     * @return StartCourseOutput output message
     */
    public function StartCourse(StartCourseInput $input, array $context = [])
    {
        $path = "/courses/".rawurlencode($input->getCourseId())."/start";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setCourseId("");

        $context['name'] = "eolymp.course.CourseService/StartCourse";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, StartCourseOutput::class, $context);
    }

}
