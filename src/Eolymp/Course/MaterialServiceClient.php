<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Course;

class MaterialServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateMaterialInput $input message
     * @param array $context request parameters
     *
     * @return CreateMaterialOutput output message
     */
    public function CreateMaterial(CreateMaterialInput $input, array $context = [])
    {
        $path = "/materials";

        $context['name'] = "eolymp.course.MaterialService/CreateMaterial";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateMaterialOutput::class, $context);
    }

    /**
     * @param UpdateMaterialInput $input message
     * @param array $context request parameters
     *
     * @return UpdateMaterialOutput output message
     */
    public function UpdateMaterial(UpdateMaterialInput $input, array $context = [])
    {
        $path = "/materials/".rawurlencode($input->getMaterialId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMaterialId("");

        $context['name'] = "eolymp.course.MaterialService/UpdateMaterial";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateMaterialOutput::class, $context);
    }

    /**
     * @param MoveMaterialInput $input message
     * @param array $context request parameters
     *
     * @return MoveMaterialOutput output message
     */
    public function MoveMaterial(MoveMaterialInput $input, array $context = [])
    {
        $path = "/materials/".rawurlencode($input->getMaterialId())."/move";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMaterialId("");

        $context['name'] = "eolymp.course.MaterialService/MoveMaterial";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, MoveMaterialOutput::class, $context);
    }

    /**
     * @param DeleteMaterialInput $input message
     * @param array $context request parameters
     *
     * @return DeleteMaterialOutput output message
     */
    public function DeleteMaterial(DeleteMaterialInput $input, array $context = [])
    {
        $path = "/materials/".rawurlencode($input->getMaterialId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMaterialId("");

        $context['name'] = "eolymp.course.MaterialService/DeleteMaterial";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteMaterialOutput::class, $context);
    }

    /**
     * @param DescribeMaterialInput $input message
     * @param array $context request parameters
     *
     * @return DescribeMaterialOutput output message
     */
    public function DescribeMaterial(DescribeMaterialInput $input, array $context = [])
    {
        $path = "/materials/".rawurlencode($input->getMaterialId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMaterialId("");

        $context['name'] = "eolymp.course.MaterialService/DescribeMaterial";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeMaterialOutput::class, $context);
    }

    /**
     * @param ListMaterialsInput $input message
     * @param array $context request parameters
     *
     * @return ListMaterialsOutput output message
     */
    public function ListMaterials(ListMaterialsInput $input, array $context = [])
    {
        $path = "/materials";

        $context['name'] = "eolymp.course.MaterialService/ListMaterials";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListMaterialsOutput::class, $context);
    }

}
