<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/course/assignment.proto

namespace Eolymp\Course\Assignment;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.course.Assignment.Status</code>
 */
class Status
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_STATUS = 0;</code>
     */
    const UNKNOWN_STATUS = 0;
    /**
     * same as parent element (same as PENDING on course level)
     *
     * Generated from protobuf enum <code>INHERITED = 1;</code>
     */
    const INHERITED = 1;
    /**
     * assignment is not assigned to the user
     *
     * Generated from protobuf enum <code>INACTIVE = 2;</code>
     */
    const INACTIVE = 2;
    /**
     * assignment will start automatically at start_at
     *
     * Generated from protobuf enum <code>SCHEDULED = 3;</code>
     */
    const SCHEDULED = 3;
    /**
     * assignment is ready to be started, student must call StartAssignment to activate assignment
     *
     * Generated from protobuf enum <code>READY = 4;</code>
     */
    const READY = 4;
    /**
     * assignment is active and can be seen by the student
     *
     * Generated from protobuf enum <code>ACTIVE = 5;</code>
     */
    const ACTIVE = 5;
    /**
     * assignment time has run out and not shown to the student anymore
     *
     * Generated from protobuf enum <code>COMPLETE = 6;</code>
     */
    const COMPLETE = 6;
    /**
     * assignment time has run out, the result is final, but student can see course and solve tasks
     *
     * Generated from protobuf enum <code>UPSOLVE = 7;</code>
     */
    const UPSOLVE = 7;

    private static $valueToName = [
        self::UNKNOWN_STATUS => 'UNKNOWN_STATUS',
        self::INHERITED => 'INHERITED',
        self::INACTIVE => 'INACTIVE',
        self::SCHEDULED => 'SCHEDULED',
        self::READY => 'READY',
        self::ACTIVE => 'ACTIVE',
        self::COMPLETE => 'COMPLETE',
        self::UPSOLVE => 'UPSOLVE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Status::class, \Eolymp\Course\Assignment_Status::class);

