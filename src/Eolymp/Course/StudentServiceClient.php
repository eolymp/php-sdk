<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Course;

class StudentServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateStudentInput $input message
     * @param array $context request parameters
     *
     * @return CreateStudentOutput output message
     */
    public function CreateStudent(CreateStudentInput $input, array $context = [])
    {
        $path = "/students";

        $context['name'] = "eolymp.course.StudentService/CreateStudent";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, CreateStudentOutput::class, $context);
    }

    /**
     * @param UpdateStudentInput $input message
     * @param array $context request parameters
     *
     * @return UpdateStudentOutput output message
     */
    public function UpdateStudent(UpdateStudentInput $input, array $context = [])
    {
        $path = "/students/".rawurlencode($input->getStudentId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setStudentId("");

        $context['name'] = "eolymp.course.StudentService/UpdateStudent";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateStudentOutput::class, $context);
    }

    /**
     * @param DeleteStudentInput $input message
     * @param array $context request parameters
     *
     * @return DeleteStudentOutput output message
     */
    public function DeleteStudent(DeleteStudentInput $input, array $context = [])
    {
        $path = "/students/".rawurlencode($input->getStudentId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setStudentId("");

        $context['name'] = "eolymp.course.StudentService/DeleteStudent";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteStudentOutput::class, $context);
    }

    /**
     * @param DescribeStudentInput $input message
     * @param array $context request parameters
     *
     * @return DescribeStudentOutput output message
     */
    public function DescribeStudent(DescribeStudentInput $input, array $context = [])
    {
        $path = "/students/".rawurlencode($input->getStudentId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setStudentId("");

        $context['name'] = "eolymp.course.StudentService/DescribeStudent";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeStudentOutput::class, $context);
    }

    /**
     * @param ListStudentsInput $input message
     * @param array $context request parameters
     *
     * @return ListStudentsOutput output message
     */
    public function ListStudents(ListStudentsInput $input, array $context = [])
    {
        $path = "/students";

        $context['name'] = "eolymp.course.StudentService/ListStudents";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListStudentsOutput::class, $context);
    }

    /**
     * @param StartCourseInput $input message
     * @param array $context request parameters
     *
     * @return StartCourseOutput output message
     */
    public function StartCourse(StartCourseInput $input, array $context = [])
    {
        $path = "/start";

        $context['name'] = "eolymp.course.StudentService/StartCourse";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, StartCourseOutput::class, $context);
    }

    /**
     * @param StartAssignmentInput $input message
     * @param array $context request parameters
     *
     * @return StartAssignmentOutput output message
     */
    public function StartAssignment(StartAssignmentInput $input, array $context = [])
    {
        $path = "/students/".rawurlencode($input->getStudentId())."/assignments/".rawurlencode($input->getEntryId())."/start";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setStudentId("");
        $input->setEntryId("");

        $context['name'] = "eolymp.course.StudentService/StartAssignment";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, StartAssignmentOutput::class, $context);
    }

    /**
     * @param DescribeViewerInput $input message
     * @param array $context request parameters
     *
     * @return DescribeViewerOutput output message
     */
    public function DescribeViewer(DescribeViewerInput $input, array $context = [])
    {
        $path = "/viewer";

        $context['name'] = "eolymp.course.StudentService/DescribeViewer";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, DescribeViewerOutput::class, $context);
    }

    /**
     * @param DescribeProgressInput $input message
     * @param array $context request parameters
     *
     * @return DescribeProgressOutput output message
     */
    public function DescribeProgress(DescribeProgressInput $input, array $context = [])
    {
        $path = "/students/".rawurlencode($input->getStudentId())."/progress/".rawurlencode($input->getEntryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setStudentId("");
        $input->setEntryId("");

        $context['name'] = "eolymp.course.StudentService/DescribeProgress";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeProgressOutput::class, $context);
    }

    /**
     * @param ReportProgressInput $input message
     * @param array $context request parameters
     *
     * @return ReportProgressOutput output message
     */
    public function ReportProgress(ReportProgressInput $input, array $context = [])
    {
        $path = "/students/".rawurlencode($input->getStudentId())."/progress/".rawurlencode($input->getEntryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setStudentId("");
        $input->setEntryId("");

        $context['name'] = "eolymp.course.StudentService/ReportProgress";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, ReportProgressOutput::class, $context);
    }

    /**
     * @param AssignEntryInput $input message
     * @param array $context request parameters
     *
     * @return AssignEntryOutput output message
     */
    public function AssignEntry(AssignEntryInput $input, array $context = [])
    {
        $path = "/students/".rawurlencode($input->getStudentId())."/assignments/".rawurlencode($input->getEntryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setStudentId("");
        $input->setEntryId("");

        $context['name'] = "eolymp.course.StudentService/AssignEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, AssignEntryOutput::class, $context);
    }

    /**
     * @param UnassignEntryInput $input message
     * @param array $context request parameters
     *
     * @return UnassignEntryOutput output message
     */
    public function UnassignEntry(UnassignEntryInput $input, array $context = [])
    {
        $path = "/students/".rawurlencode($input->getStudentId())."/assignments/".rawurlencode($input->getEntryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setStudentId("");
        $input->setEntryId("");

        $context['name'] = "eolymp.course.StudentService/UnassignEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, UnassignEntryOutput::class, $context);
    }

    /**
     * @param DescribeAssignmentInput $input message
     * @param array $context request parameters
     *
     * @return DescribeAssignmentOutput output message
     */
    public function DescribeAssignment(DescribeAssignmentInput $input, array $context = [])
    {
        $path = "/students/".rawurlencode($input->getStudentId())."/assignments/".rawurlencode($input->getEntryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setStudentId("");
        $input->setEntryId("");

        $context['name'] = "eolymp.course.StudentService/DescribeAssignment";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeAssignmentOutput::class, $context);
    }

}
