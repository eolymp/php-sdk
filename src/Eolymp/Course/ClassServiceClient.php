<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Course;

class ClassServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateClassInput $input message
     * @param array $context request parameters
     *
     * @return CreateClassOutput output message
     */
    public function CreateClass(CreateClassInput $input, array $context = [])
    {
        $path = "/classes";

        $context['name'] = "eolymp.course.ClassService/CreateClass";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateClassOutput::class, $context);
    }

    /**
     * @param UpdateClassInput $input message
     * @param array $context request parameters
     *
     * @return UpdateClassOutput output message
     */
    public function UpdateClass(UpdateClassInput $input, array $context = [])
    {
        $path = "/classes/".rawurlencode($input->getGroupId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setGroupId("");

        $context['name'] = "eolymp.course.ClassService/UpdateClass";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateClassOutput::class, $context);
    }

    /**
     * @param DeleteClassInput $input message
     * @param array $context request parameters
     *
     * @return DeleteClassOutput output message
     */
    public function DeleteClass(DeleteClassInput $input, array $context = [])
    {
        $path = "/classes/".rawurlencode($input->getGroupId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setGroupId("");

        $context['name'] = "eolymp.course.ClassService/DeleteClass";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteClassOutput::class, $context);
    }

    /**
     * @param DescribeClassInput $input message
     * @param array $context request parameters
     *
     * @return DescribeClassOutput output message
     */
    public function DescribeClass(DescribeClassInput $input, array $context = [])
    {
        $path = "/classes/".rawurlencode($input->getGroupId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setGroupId("");

        $context['name'] = "eolymp.course.ClassService/DescribeClass";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeClassOutput::class, $context);
    }

    /**
     * @param ListClassesInput $input message
     * @param array $context request parameters
     *
     * @return ListClassesOutput output message
     */
    public function ListClasses(ListClassesInput $input, array $context = [])
    {
        $path = "/classes";

        $context['name'] = "eolymp.course.ClassService/ListClasses";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListClassesOutput::class, $context);
    }

    /**
     * @param ListClassAssignmentsInput $input message
     * @param array $context request parameters
     *
     * @return ListClassAssignmentsOutput output message
     */
    public function ListClassAssignments(ListClassAssignmentsInput $input, array $context = [])
    {
        $path = "/classes/".rawurlencode($input->getGroupId())."/assignments";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setGroupId("");

        $context['name'] = "eolymp.course.ClassService/ListClassAssignments";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListClassAssignmentsOutput::class, $context);
    }

    /**
     * @param UpdateClassAssignmentInput $input message
     * @param array $context request parameters
     *
     * @return UpdateClassAssignmentOutput output message
     */
    public function UpdateClassAssignment(UpdateClassAssignmentInput $input, array $context = [])
    {
        $path = "/classes/".rawurlencode($input->getGroupId())."/assignments";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setGroupId("");

        $context['name'] = "eolymp.course.ClassService/UpdateClassAssignment";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateClassAssignmentOutput::class, $context);
    }

    /**
     * @param DeleteClassAssignmentInput $input message
     * @param array $context request parameters
     *
     * @return DeleteClassAssignmentOutput output message
     */
    public function DeleteClassAssignment(DeleteClassAssignmentInput $input, array $context = [])
    {
        $path = "/classes/".rawurlencode($input->getGroupId())."/assignments";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setGroupId("");

        $context['name'] = "eolymp.course.ClassService/DeleteClassAssignment";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteClassAssignmentOutput::class, $context);
    }

}
