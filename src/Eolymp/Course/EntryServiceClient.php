<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Course;

class EntryServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateEntryInput $input message
     * @param array $context request parameters
     *
     * @return CreateEntryOutput output message
     */
    public function CreateEntry(CreateEntryInput $input, array $context = [])
    {
        $path = "/entries";

        $context['name'] = "eolymp.course.EntryService/CreateEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateEntryOutput::class, $context);
    }

    /**
     * @param UpdateEntryInput $input message
     * @param array $context request parameters
     *
     * @return UpdateEntryOutput output message
     */
    public function UpdateEntry(UpdateEntryInput $input, array $context = [])
    {
        $path = "/entries/".rawurlencode($input->getEntryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEntryId("");

        $context['name'] = "eolymp.course.EntryService/UpdateEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateEntryOutput::class, $context);
    }

    /**
     * @param RenameEntryInput $input message
     * @param array $context request parameters
     *
     * @return RenameEntryOutput output message
     */
    public function RenameEntry(RenameEntryInput $input, array $context = [])
    {
        $path = "/entries/".rawurlencode($input->getEntryId())."/title";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEntryId("");

        $context['name'] = "eolymp.course.EntryService/RenameEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, RenameEntryOutput::class, $context);
    }

    /**
     * @param MoveEntryInput $input message
     * @param array $context request parameters
     *
     * @return MoveEntryOutput output message
     */
    public function MoveEntry(MoveEntryInput $input, array $context = [])
    {
        $path = "/entries/".rawurlencode($input->getEntryId())."/position";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEntryId("");

        $context['name'] = "eolymp.course.EntryService/MoveEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, MoveEntryOutput::class, $context);
    }

    /**
     * @param DeleteEntryInput $input message
     * @param array $context request parameters
     *
     * @return DeleteEntryOutput output message
     */
    public function DeleteEntry(DeleteEntryInput $input, array $context = [])
    {
        $path = "/entries/".rawurlencode($input->getEntryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEntryId("");

        $context['name'] = "eolymp.course.EntryService/DeleteEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteEntryOutput::class, $context);
    }

    /**
     * @param DescribeEntryInput $input message
     * @param array $context request parameters
     *
     * @return DescribeEntryOutput output message
     */
    public function DescribeEntry(DescribeEntryInput $input, array $context = [])
    {
        $path = "/entries/".rawurlencode($input->getEntryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEntryId("");

        $context['name'] = "eolymp.course.EntryService/DescribeEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeEntryOutput::class, $context);
    }

    /**
     * @param ListEntriesInput $input message
     * @param array $context request parameters
     *
     * @return ListEntriesOutput output message
     */
    public function ListEntries(ListEntriesInput $input, array $context = [])
    {
        $path = "/entries";

        $context['name'] = "eolymp.course.EntryService/ListEntries";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListEntriesOutput::class, $context);
    }

    /**
     * @param DescribeTOCInput $input message
     * @param array $context request parameters
     *
     * @return DescribeTOCOutput output message
     */
    public function DescribeTOC(DescribeTOCInput $input, array $context = [])
    {
        $path = "/toc";

        $context['name'] = "eolymp.course.EntryService/DescribeTOC";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeTOCOutput::class, $context);
    }

    /**
     * @param ListParentsInput $input message
     * @param array $context request parameters
     *
     * @return ListParentsOutput output message
     */
    public function ListParents(ListParentsInput $input, array $context = [])
    {
        $path = "/entries/".rawurlencode($input->getEntryId())."/parents";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEntryId("");

        $context['name'] = "eolymp.course.EntryService/ListParents";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListParentsOutput::class, $context);
    }

    /**
     * @param DescribeProgressInput $input message
     * @param array $context request parameters
     *
     * @return DescribeProgressOutput output message
     */
    public function DescribeProgress(DescribeProgressInput $input, array $context = [])
    {
        $path = "/entries/".rawurlencode($input->getEntryId())."/progress";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEntryId("");

        $context['name'] = "eolymp.course.EntryService/DescribeProgress";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeProgressOutput::class, $context);
    }

    /**
     * @param ReportProgressInput $input message
     * @param array $context request parameters
     *
     * @return ReportProgressOutput output message
     */
    public function ReportProgress(ReportProgressInput $input, array $context = [])
    {
        $path = "/entries/".rawurlencode($input->getEntryId())."/progress";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEntryId("");

        $context['name'] = "eolymp.course.EntryService/ReportProgress";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, ReportProgressOutput::class, $context);
    }

}
