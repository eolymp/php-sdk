<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/course/student.proto

namespace Eolymp\Course\Student;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>eolymp.course.Student.Grade</code>
 */
class Grade extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>uint32 grade = 10;</code>
     */
    protected $grade = 0;
    /**
     * Generated from protobuf field <code>uint32 grade_automatic = 11;</code>
     */
    protected $grade_automatic = 0;
    /**
     * Generated from protobuf field <code>uint32 grade_override = 12;</code>
     */
    protected $grade_override = 0;
    protected $source;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $module_id
     *     @type string $material_id
     *     @type int $grade
     *     @type int $grade_automatic
     *     @type int $grade_override
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Course\Student::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string module_id = 1;</code>
     * @return string
     */
    public function getModuleId()
    {
        return $this->readOneof(1);
    }

    public function hasModuleId()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>string module_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setModuleId($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>string material_id = 2;</code>
     * @return string
     */
    public function getMaterialId()
    {
        return $this->readOneof(2);
    }

    public function hasMaterialId()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>string material_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setMaterialId($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 grade = 10;</code>
     * @return int
     */
    public function getGrade()
    {
        return $this->grade;
    }

    /**
     * Generated from protobuf field <code>uint32 grade = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setGrade($var)
    {
        GPBUtil::checkUint32($var);
        $this->grade = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 grade_automatic = 11;</code>
     * @return int
     */
    public function getGradeAutomatic()
    {
        return $this->grade_automatic;
    }

    /**
     * Generated from protobuf field <code>uint32 grade_automatic = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setGradeAutomatic($var)
    {
        GPBUtil::checkUint32($var);
        $this->grade_automatic = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 grade_override = 12;</code>
     * @return int
     */
    public function getGradeOverride()
    {
        return $this->grade_override;
    }

    /**
     * Generated from protobuf field <code>uint32 grade_override = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setGradeOverride($var)
    {
        GPBUtil::checkUint32($var);
        $this->grade_override = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getSource()
    {
        return $this->whichOneof("source");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Grade::class, \Eolymp\Course\Student_Grade::class);

