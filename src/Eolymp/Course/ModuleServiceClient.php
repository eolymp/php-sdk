<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Course;

class ModuleServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateModuleInput $input message
     * @param array $context request parameters
     *
     * @return CreateModuleOutput output message
     */
    public function CreateModule(CreateModuleInput $input, array $context = [])
    {
        $path = "/modules";

        $context['name'] = "eolymp.course.ModuleService/CreateModule";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, CreateModuleOutput::class, $context);
    }

    /**
     * @param UpdateModuleInput $input message
     * @param array $context request parameters
     *
     * @return UpdateModuleOutput output message
     */
    public function UpdateModule(UpdateModuleInput $input, array $context = [])
    {
        $path = "/modules/".rawurlencode($input->getModuleId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setModuleId("");

        $context['name'] = "eolymp.course.ModuleService/UpdateModule";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateModuleOutput::class, $context);
    }

    /**
     * @param DeleteModuleInput $input message
     * @param array $context request parameters
     *
     * @return DeleteModuleOutput output message
     */
    public function DeleteModule(DeleteModuleInput $input, array $context = [])
    {
        $path = "/modules/".rawurlencode($input->getModuleId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setModuleId("");

        $context['name'] = "eolymp.course.ModuleService/DeleteModule";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteModuleOutput::class, $context);
    }

    /**
     * @param DescribeModuleInput $input message
     * @param array $context request parameters
     *
     * @return DescribeModuleOutput output message
     */
    public function DescribeModule(DescribeModuleInput $input, array $context = [])
    {
        $path = "/modules/".rawurlencode($input->getModuleId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setModuleId("");

        $context['name'] = "eolymp.course.ModuleService/DescribeModule";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeModuleOutput::class, $context);
    }

    /**
     * @param ListModulesInput $input message
     * @param array $context request parameters
     *
     * @return ListModulesOutput output message
     */
    public function ListModules(ListModulesInput $input, array $context = [])
    {
        $path = "/modules";

        $context['name'] = "eolymp.course.ModuleService/ListModules";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListModulesOutput::class, $context);
    }

    /**
     * @param StartModuleInput $input message
     * @param array $context request parameters
     *
     * @return StartModuleOutput output message
     */
    public function StartModule(StartModuleInput $input, array $context = [])
    {
        $path = "/modules/".rawurlencode($input->getModuleId())."/start";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setModuleId("");

        $context['name'] = "eolymp.course.ModuleService/StartModule";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, StartModuleOutput::class, $context);
    }

    /**
     * @param AssignModuleInput $input message
     * @param array $context request parameters
     *
     * @return AssignModuleOutput output message
     */
    public function AssignModule(AssignModuleInput $input, array $context = [])
    {
        $path = "/modules/".rawurlencode($input->getModuleId())."/assignments";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setModuleId("");

        $context['name'] = "eolymp.course.ModuleService/AssignModule";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, AssignModuleOutput::class, $context);
    }

    /**
     * @param UnassignModuleInput $input message
     * @param array $context request parameters
     *
     * @return UnassignModuleOutput output message
     */
    public function UnassignModule(UnassignModuleInput $input, array $context = [])
    {
        $path = "/modules/".rawurlencode($input->getModuleId())."/assignments";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setModuleId("");

        $context['name'] = "eolymp.course.ModuleService/UnassignModule";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, UnassignModuleOutput::class, $context);
    }

}
