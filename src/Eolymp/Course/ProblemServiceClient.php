<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Course;

class ProblemServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param ListStatementsInput $input message
     * @param array $context request parameters
     *
     * @return ListStatementsOutput output message
     */
    public function ListStatements(ListStatementsInput $input, array $context = [])
    {
        $path = "/statements";

        $context['name'] = "eolymp.course.ProblemService/ListStatements";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListStatementsOutput::class, $context);
    }

    /**
     * @param ListExamplesInput $input message
     * @param array $context request parameters
     *
     * @return ListExamplesOutput output message
     */
    public function ListExamples(ListExamplesInput $input, array $context = [])
    {
        $path = "/examples";

        $context['name'] = "eolymp.course.ProblemService/ListExamples";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListExamplesOutput::class, $context);
    }

    /**
     * @param CreateSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return CreateSubmissionOutput output message
     */
    public function CreateSubmission(CreateSubmissionInput $input, array $context = [])
    {
        $path = "/submissions";

        $context['name'] = "eolymp.course.ProblemService/CreateSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateSubmissionOutput::class, $context);
    }

    /**
     * @param ListSubmissionsInput $input message
     * @param array $context request parameters
     *
     * @return ListSubmissionsOutput output message
     */
    public function ListSubmissions(ListSubmissionsInput $input, array $context = [])
    {
        $path = "/submissions";

        $context['name'] = "eolymp.course.ProblemService/ListSubmissions";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListSubmissionsOutput::class, $context);
    }

    /**
     * @param DescribeSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return DescribeSubmissionOutput output message
     */
    public function DescribeSubmission(DescribeSubmissionInput $input, array $context = [])
    {
        $path = "/submissions/".rawurlencode($input->getSubmissionId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSubmissionId("");

        $context['name'] = "eolymp.course.ProblemService/DescribeSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeSubmissionOutput::class, $context);
    }

    /**
     * @param DescribeScoreInput $input message
     * @param array $context request parameters
     *
     * @return DescribeScoreOutput output message
     */
    public function DescribeScore(DescribeScoreInput $input, array $context = [])
    {
        $path = "/score";

        $context['name'] = "eolymp.course.ProblemService/DescribeScore";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeScoreOutput::class, $context);
    }

    /**
     * @param LookupCodeTemplateInput $input message
     * @param array $context request parameters
     *
     * @return LookupCodeTemplateOutput output message
     */
    public function LookupCodeTemplate(LookupCodeTemplateInput $input, array $context = [])
    {
        $path = "/template";

        $context['name'] = "eolymp.course.ProblemService/LookupCodeTemplate";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, LookupCodeTemplateOutput::class, $context);
    }

    /**
     * @param CreateRunInput $input message
     * @param array $context request parameters
     *
     * @return CreateRunOutput output message
     */
    public function CreateRun(CreateRunInput $input, array $context = [])
    {
        $path = "/runs";

        $context['name'] = "eolymp.course.ProblemService/CreateRun";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateRunOutput::class, $context);
    }

    /**
     * @param DescribeRunInput $input message
     * @param array $context request parameters
     *
     * @return DescribeRunOutput output message
     */
    public function DescribeRun(DescribeRunInput $input, array $context = [])
    {
        $path = "/runs/".rawurlencode($input->getRunId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setRunId("");

        $context['name'] = "eolymp.course.ProblemService/DescribeRun";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeRunOutput::class, $context);
    }

    /**
     * @param WatchRunInput $input message
     * @param array $context request parameters
     *
     * @return WatchRunOutput output message
     */
    public function WatchRun(WatchRunInput $input, array $context = [])
    {
        $path = "/runs/".rawurlencode($input->getRunId())."/watch";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setRunId("");

        $context['name'] = "eolymp.course.ProblemService/WatchRun";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, WatchRunOutput::class, $context);
    }

}
