<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Printer;

class PrinterServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreatePrinterInput $input message
     * @param array $context request parameters
     *
     * @return CreatePrinterOutput output message
     */
    public function CreatePrinter(CreatePrinterInput $input, array $context = [])
    {
        $path = "/printers";

        $context['name'] = "eolymp.printer.PrinterService/CreatePrinter";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreatePrinterOutput::class, $context);
    }

    /**
     * @param UpdatePrinterInput $input message
     * @param array $context request parameters
     *
     * @return UpdatePrinterOutput output message
     */
    public function UpdatePrinter(UpdatePrinterInput $input, array $context = [])
    {
        $path = "/printers/".rawurlencode($input->getPrinterId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setPrinterId("");

        $context['name'] = "eolymp.printer.PrinterService/UpdatePrinter";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdatePrinterOutput::class, $context);
    }

    /**
     * @param DeletePrinterInput $input message
     * @param array $context request parameters
     *
     * @return DeletePrinterOutput output message
     */
    public function DeletePrinter(DeletePrinterInput $input, array $context = [])
    {
        $path = "/printers/".rawurlencode($input->getPrinterId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setPrinterId("");

        $context['name'] = "eolymp.printer.PrinterService/DeletePrinter";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeletePrinterOutput::class, $context);
    }

    /**
     * @param DescribePrinterInput $input message
     * @param array $context request parameters
     *
     * @return DescribePrinterOutput output message
     */
    public function DescribePrinter(DescribePrinterInput $input, array $context = [])
    {
        $path = "/printers/".rawurlencode($input->getPrinterId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setPrinterId("");

        $context['name'] = "eolymp.printer.PrinterService/DescribePrinter";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribePrinterOutput::class, $context);
    }

    /**
     * @param ListPrintersInput $input message
     * @param array $context request parameters
     *
     * @return ListPrintersOutput output message
     */
    public function ListPrinters(ListPrintersInput $input, array $context = [])
    {
        $path = "/printers";

        $context['name'] = "eolymp.printer.PrinterService/ListPrinters";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListPrintersOutput::class, $context);
    }

    /**
     * @param CreatePrinterJobInput $input message
     * @param array $context request parameters
     *
     * @return CreatePrinterJobOutput output message
     */
    public function CreatePrinterJob(CreatePrinterJobInput $input, array $context = [])
    {
        $path = "/printers/".rawurlencode($input->getPrinterId())."/jobs";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setPrinterId("");

        $context['name'] = "eolymp.printer.PrinterService/CreatePrinterJob";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreatePrinterJobOutput::class, $context);
    }

    /**
     * @param DescribePrinterJobInput $input message
     * @param array $context request parameters
     *
     * @return DescribePrinterJobOutput output message
     */
    public function DescribePrinterJob(DescribePrinterJobInput $input, array $context = [])
    {
        $path = "/printers/".rawurlencode($input->getPrinterId())."/jobs/".rawurlencode($input->getJobId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setPrinterId("");
        $input->setJobId("");

        $context['name'] = "eolymp.printer.PrinterService/DescribePrinterJob";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribePrinterJobOutput::class, $context);
    }

    /**
     * @param ListPrinterJobsInput $input message
     * @param array $context request parameters
     *
     * @return ListPrinterJobsOutput output message
     */
    public function ListPrinterJobs(ListPrinterJobsInput $input, array $context = [])
    {
        $path = "/printers/".rawurlencode($input->getPrinterId())."/jobs";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setPrinterId("");

        $context['name'] = "eolymp.printer.PrinterService/ListPrinterJobs";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListPrinterJobsOutput::class, $context);
    }

    /**
     * @param DeletePrinterJobInput $input message
     * @param array $context request parameters
     *
     * @return DeletePrinterJobOutput output message
     */
    public function DeletePrinterJob(DeletePrinterJobInput $input, array $context = [])
    {
        $path = "/printers/".rawurlencode($input->getPrinterId())."/jobs/".rawurlencode($input->getJobId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setPrinterId("");
        $input->setJobId("");

        $context['name'] = "eolymp.printer.PrinterService/DeletePrinterJob";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeletePrinterJobOutput::class, $context);
    }

}
