<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: eolymp/judge/score.proto

namespace Eolymp\Judge\Score;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.judge.Score.FetchingMode</code>
 */
class FetchingMode
{
    /**
     * Actual score returns score at the moment of participation. This mode is intended to show scoreboard to
     * participants. This mode returns score following these rules:
     * - During scoreboard freezing time, frozen scores are reported.
     * - In virtual contests (everyone can start at different time), score values are returned relatively to the
     *   starting time. For instance, authenticated user who has been participating for 1 hour, will receive scores at 1
     *   hour mark, as user progresses further, more score updates will be revealed.
     * - If authenticated user is not participating in the contest, an error will be returned (even if requested by a
     *   user with admin permissions)
     *
     * Generated from protobuf enum <code>ACTUAL = 0;</code>
     */
    const ACTUAL = 0;
    /**
     * Punctual score returns score at particular moment, use time_offset parameter to specify time. This mode is
     * intended to show historical score at a given moment. Value for time_offset will be capped by the freezing time
     * for participants.
     *
     * Generated from protobuf enum <code>PUNCTUAL = 1;</code>
     */
    const PUNCTUAL = 1;
    /**
     * Latest score returns the latest score recorded. This mode is intended for admins to see current scoreboard.
     * Users without admin permissions will get PermissionDenied error when requesting score in latest mode.
     *
     * Generated from protobuf enum <code>LATEST = 2;</code>
     */
    const LATEST = 2;
    /**
     * Frozen score returns the latest score recorded before freezing time. This mode is intended for admins to see
     * frozen scoreboard.
     *
     * Generated from protobuf enum <code>FROZEN = 3;</code>
     */
    const FROZEN = 3;
    /**
     * Upsolve score returns score counting upsolve time.
     *
     * Generated from protobuf enum <code>UPSOLVE = 4;</code>
     */
    const UPSOLVE = 4;

    private static $valueToName = [
        self::ACTUAL => 'ACTUAL',
        self::PUNCTUAL => 'PUNCTUAL',
        self::LATEST => 'LATEST',
        self::FROZEN => 'FROZEN',
        self::UPSOLVE => 'UPSOLVE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

