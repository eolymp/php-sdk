<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: eolymp/judge/problem.proto

namespace Eolymp\Judge;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>eolymp.judge.Problem</code>
 */
class Problem extends \Google\Protobuf\Internal\Message
{
    /**
     * contest
     *
     * Generated from protobuf field <code>string contest_id = 5 [deprecated = true];</code>
     * @deprecated
     */
    protected $contest_id = '';
    /**
     * globally problem ID
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * Generated from protobuf field <code>string url = 6 [(.eolymp.api.mcp_field_ignore) = true];</code>
     */
    protected $url = '';
    /**
     * Generated from protobuf field <code>.eolymp.atlas.Problem.Type type = 23;</code>
     */
    protected $type = 0;
    /**
     * problem index within contest
     *
     * Generated from protobuf field <code>uint32 index = 2 [(.eolymp.api.mcp_field_desc) = "problem position in contest"];</code>
     */
    protected $index = 0;
    /**
     * ID of the problem in database achieve
     *
     * Generated from protobuf field <code>string base_id = 4 [(.eolymp.api.mcp_field_desc) = "problem ID in the problem archive"];</code>
     */
    protected $base_id = '';
    /**
     * defines feedback policy for the problem
     *
     * Generated from protobuf field <code>.eolymp.atlas.FeedbackPolicy feedback_policy = 10;</code>
     */
    protected $feedback_policy = 0;
    /**
     * Generated from protobuf field <code>bool score_by_best_testset = 210 [(.eolymp.api.mcp_field_desc) = "problem score is calculated as sum of best score in each testset (best among all submissions)"];</code>
     */
    protected $score_by_best_testset = false;
    /**
     * in milliseconds
     *
     * Generated from protobuf field <code>uint32 time_limit = 200 [deprecated = true, (.eolymp.api.mcp_field_desc) = "wall-time limit in milliseconds"];</code>
     * @deprecated
     */
    protected $time_limit = 0;
    /**
     * in milliseconds
     *
     * Generated from protobuf field <code>uint32 cpu_limit = 204 [deprecated = true, (.eolymp.api.mcp_field_desc) = "cpu usage time limit in milliseconds"];</code>
     * @deprecated
     */
    protected $cpu_limit = 0;
    /**
     * in bytes
     *
     * Generated from protobuf field <code>uint64 memory_limit = 201 [deprecated = true, (.eolymp.api.mcp_field_desc) = "runtime memory limit in bytes"];</code>
     * @deprecated
     */
    protected $memory_limit = 0;
    /**
     * in bytes
     *
     * Generated from protobuf field <code>uint64 file_size_limit = 202 [deprecated = true, (.eolymp.api.mcp_field_ignore) = true];</code>
     * @deprecated
     */
    protected $file_size_limit = 0;
    /**
     * Generated from protobuf field <code>uint32 submit_limit = 203 [deprecated = true, (.eolymp.api.mcp_field_desc) = "limit in number of submissions per participant"];</code>
     * @deprecated
     */
    protected $submit_limit = 0;
    /**
     * score for solving problem
     *
     * Generated from protobuf field <code>float score = 3;</code>
     */
    protected $score = 0.0;
    /**
     * Constraints
     *
     * Generated from protobuf field <code>.eolymp.atlas.Problem.Constraints constraints = 30;</code>
     */
    protected $constraints = null;
    /**
     * Statement language
     *
     * Generated from protobuf field <code>string locale = 20;</code>
     */
    protected $locale = '';
    /**
     * Problem title
     *
     * Generated from protobuf field <code>string title = 21;</code>
     */
    protected $title = '';
    /**
     * Statement content
     *
     * Generated from protobuf field <code>.eolymp.ecm.Content content = 22 [(.eolymp.api.mcp_field_desc) = "problem statement in requested language"];</code>
     */
    protected $content = null;
    /**
     * Statement download link, allows to download statement in original format.
     *
     * Generated from protobuf field <code>string download_link = 24 [(.eolymp.api.mcp_field_desc) = "a link to download statement in PDF format"];</code>
     */
    protected $download_link = '';
    /**
     * Generated from protobuf field <code>.eolymp.atlas.Form submission_form = 61;</code>
     */
    protected $submission_form = null;
    /**
     * Generated from protobuf field <code>repeated .eolymp.atlas.Problem.Example examples = 60;</code>
     */
    private $examples;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $contest_id
     *           contest
     *     @type string $id
     *           globally problem ID
     *     @type string $url
     *     @type int $type
     *     @type int $index
     *           problem index within contest
     *     @type string $base_id
     *           ID of the problem in database achieve
     *     @type int $feedback_policy
     *           defines feedback policy for the problem
     *     @type bool $score_by_best_testset
     *     @type int $time_limit
     *           in milliseconds
     *     @type int $cpu_limit
     *           in milliseconds
     *     @type int|string $memory_limit
     *           in bytes
     *     @type int|string $file_size_limit
     *           in bytes
     *     @type int $submit_limit
     *     @type float $score
     *           score for solving problem
     *     @type \Eolymp\Atlas\Problem\Constraints $constraints
     *           Constraints
     *     @type string $locale
     *           Statement language
     *     @type string $title
     *           Problem title
     *     @type \Eolymp\Ecm\Content $content
     *           Statement content
     *     @type string $download_link
     *           Statement download link, allows to download statement in original format.
     *     @type \Eolymp\Atlas\Form $submission_form
     *     @type array<\Eolymp\Atlas\Problem\Example>|\Google\Protobuf\Internal\RepeatedField $examples
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Judge\Problem::initOnce();
        parent::__construct($data);
    }

    /**
     * contest
     *
     * Generated from protobuf field <code>string contest_id = 5 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getContestId()
    {
        if ($this->contest_id !== '') {
            @trigger_error('contest_id is deprecated.', E_USER_DEPRECATED);
        }
        return $this->contest_id;
    }

    /**
     * contest
     *
     * Generated from protobuf field <code>string contest_id = 5 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setContestId($var)
    {
        @trigger_error('contest_id is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, True);
        $this->contest_id = $var;

        return $this;
    }

    /**
     * globally problem ID
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * globally problem ID
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string url = 6 [(.eolymp.api.mcp_field_ignore) = true];</code>
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Generated from protobuf field <code>string url = 6 [(.eolymp.api.mcp_field_ignore) = true];</code>
     * @param string $var
     * @return $this
     */
    public function setUrl($var)
    {
        GPBUtil::checkString($var, True);
        $this->url = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.eolymp.atlas.Problem.Type type = 23;</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Generated from protobuf field <code>.eolymp.atlas.Problem.Type type = 23;</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Atlas\Problem\Type::class);
        $this->type = $var;

        return $this;
    }

    /**
     * problem index within contest
     *
     * Generated from protobuf field <code>uint32 index = 2 [(.eolymp.api.mcp_field_desc) = "problem position in contest"];</code>
     * @return int
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * problem index within contest
     *
     * Generated from protobuf field <code>uint32 index = 2 [(.eolymp.api.mcp_field_desc) = "problem position in contest"];</code>
     * @param int $var
     * @return $this
     */
    public function setIndex($var)
    {
        GPBUtil::checkUint32($var);
        $this->index = $var;

        return $this;
    }

    /**
     * ID of the problem in database achieve
     *
     * Generated from protobuf field <code>string base_id = 4 [(.eolymp.api.mcp_field_desc) = "problem ID in the problem archive"];</code>
     * @return string
     */
    public function getBaseId()
    {
        return $this->base_id;
    }

    /**
     * ID of the problem in database achieve
     *
     * Generated from protobuf field <code>string base_id = 4 [(.eolymp.api.mcp_field_desc) = "problem ID in the problem archive"];</code>
     * @param string $var
     * @return $this
     */
    public function setBaseId($var)
    {
        GPBUtil::checkString($var, True);
        $this->base_id = $var;

        return $this;
    }

    /**
     * defines feedback policy for the problem
     *
     * Generated from protobuf field <code>.eolymp.atlas.FeedbackPolicy feedback_policy = 10;</code>
     * @return int
     */
    public function getFeedbackPolicy()
    {
        return $this->feedback_policy;
    }

    /**
     * defines feedback policy for the problem
     *
     * Generated from protobuf field <code>.eolymp.atlas.FeedbackPolicy feedback_policy = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setFeedbackPolicy($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Atlas\FeedbackPolicy::class);
        $this->feedback_policy = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool score_by_best_testset = 210 [(.eolymp.api.mcp_field_desc) = "problem score is calculated as sum of best score in each testset (best among all submissions)"];</code>
     * @return bool
     */
    public function getScoreByBestTestset()
    {
        return $this->score_by_best_testset;
    }

    /**
     * Generated from protobuf field <code>bool score_by_best_testset = 210 [(.eolymp.api.mcp_field_desc) = "problem score is calculated as sum of best score in each testset (best among all submissions)"];</code>
     * @param bool $var
     * @return $this
     */
    public function setScoreByBestTestset($var)
    {
        GPBUtil::checkBool($var);
        $this->score_by_best_testset = $var;

        return $this;
    }

    /**
     * in milliseconds
     *
     * Generated from protobuf field <code>uint32 time_limit = 200 [deprecated = true, (.eolymp.api.mcp_field_desc) = "wall-time limit in milliseconds"];</code>
     * @return int
     * @deprecated
     */
    public function getTimeLimit()
    {
        if ($this->time_limit !== 0) {
            @trigger_error('time_limit is deprecated.', E_USER_DEPRECATED);
        }
        return $this->time_limit;
    }

    /**
     * in milliseconds
     *
     * Generated from protobuf field <code>uint32 time_limit = 200 [deprecated = true, (.eolymp.api.mcp_field_desc) = "wall-time limit in milliseconds"];</code>
     * @param int $var
     * @return $this
     * @deprecated
     */
    public function setTimeLimit($var)
    {
        @trigger_error('time_limit is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkUint32($var);
        $this->time_limit = $var;

        return $this;
    }

    /**
     * in milliseconds
     *
     * Generated from protobuf field <code>uint32 cpu_limit = 204 [deprecated = true, (.eolymp.api.mcp_field_desc) = "cpu usage time limit in milliseconds"];</code>
     * @return int
     * @deprecated
     */
    public function getCpuLimit()
    {
        if ($this->cpu_limit !== 0) {
            @trigger_error('cpu_limit is deprecated.', E_USER_DEPRECATED);
        }
        return $this->cpu_limit;
    }

    /**
     * in milliseconds
     *
     * Generated from protobuf field <code>uint32 cpu_limit = 204 [deprecated = true, (.eolymp.api.mcp_field_desc) = "cpu usage time limit in milliseconds"];</code>
     * @param int $var
     * @return $this
     * @deprecated
     */
    public function setCpuLimit($var)
    {
        @trigger_error('cpu_limit is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkUint32($var);
        $this->cpu_limit = $var;

        return $this;
    }

    /**
     * in bytes
     *
     * Generated from protobuf field <code>uint64 memory_limit = 201 [deprecated = true, (.eolymp.api.mcp_field_desc) = "runtime memory limit in bytes"];</code>
     * @return int|string
     * @deprecated
     */
    public function getMemoryLimit()
    {
        if ($this->memory_limit !== 0) {
            @trigger_error('memory_limit is deprecated.', E_USER_DEPRECATED);
        }
        return $this->memory_limit;
    }

    /**
     * in bytes
     *
     * Generated from protobuf field <code>uint64 memory_limit = 201 [deprecated = true, (.eolymp.api.mcp_field_desc) = "runtime memory limit in bytes"];</code>
     * @param int|string $var
     * @return $this
     * @deprecated
     */
    public function setMemoryLimit($var)
    {
        @trigger_error('memory_limit is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkUint64($var);
        $this->memory_limit = $var;

        return $this;
    }

    /**
     * in bytes
     *
     * Generated from protobuf field <code>uint64 file_size_limit = 202 [deprecated = true, (.eolymp.api.mcp_field_ignore) = true];</code>
     * @return int|string
     * @deprecated
     */
    public function getFileSizeLimit()
    {
        if ($this->file_size_limit !== 0) {
            @trigger_error('file_size_limit is deprecated.', E_USER_DEPRECATED);
        }
        return $this->file_size_limit;
    }

    /**
     * in bytes
     *
     * Generated from protobuf field <code>uint64 file_size_limit = 202 [deprecated = true, (.eolymp.api.mcp_field_ignore) = true];</code>
     * @param int|string $var
     * @return $this
     * @deprecated
     */
    public function setFileSizeLimit($var)
    {
        @trigger_error('file_size_limit is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkUint64($var);
        $this->file_size_limit = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 submit_limit = 203 [deprecated = true, (.eolymp.api.mcp_field_desc) = "limit in number of submissions per participant"];</code>
     * @return int
     * @deprecated
     */
    public function getSubmitLimit()
    {
        if ($this->submit_limit !== 0) {
            @trigger_error('submit_limit is deprecated.', E_USER_DEPRECATED);
        }
        return $this->submit_limit;
    }

    /**
     * Generated from protobuf field <code>uint32 submit_limit = 203 [deprecated = true, (.eolymp.api.mcp_field_desc) = "limit in number of submissions per participant"];</code>
     * @param int $var
     * @return $this
     * @deprecated
     */
    public function setSubmitLimit($var)
    {
        @trigger_error('submit_limit is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkUint32($var);
        $this->submit_limit = $var;

        return $this;
    }

    /**
     * score for solving problem
     *
     * Generated from protobuf field <code>float score = 3;</code>
     * @return float
     */
    public function getScore()
    {
        return $this->score;
    }

    /**
     * score for solving problem
     *
     * Generated from protobuf field <code>float score = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setScore($var)
    {
        GPBUtil::checkFloat($var);
        $this->score = $var;

        return $this;
    }

    /**
     * Constraints
     *
     * Generated from protobuf field <code>.eolymp.atlas.Problem.Constraints constraints = 30;</code>
     * @return \Eolymp\Atlas\Problem\Constraints|null
     */
    public function getConstraints()
    {
        return $this->constraints;
    }

    public function hasConstraints()
    {
        return isset($this->constraints);
    }

    public function clearConstraints()
    {
        unset($this->constraints);
    }

    /**
     * Constraints
     *
     * Generated from protobuf field <code>.eolymp.atlas.Problem.Constraints constraints = 30;</code>
     * @param \Eolymp\Atlas\Problem\Constraints $var
     * @return $this
     */
    public function setConstraints($var)
    {
        GPBUtil::checkMessage($var, \Eolymp\Atlas\Problem\Constraints::class);
        $this->constraints = $var;

        return $this;
    }

    /**
     * Statement language
     *
     * Generated from protobuf field <code>string locale = 20;</code>
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }

    /**
     * Statement language
     *
     * Generated from protobuf field <code>string locale = 20;</code>
     * @param string $var
     * @return $this
     */
    public function setLocale($var)
    {
        GPBUtil::checkString($var, True);
        $this->locale = $var;

        return $this;
    }

    /**
     * Problem title
     *
     * Generated from protobuf field <code>string title = 21;</code>
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Problem title
     *
     * Generated from protobuf field <code>string title = 21;</code>
     * @param string $var
     * @return $this
     */
    public function setTitle($var)
    {
        GPBUtil::checkString($var, True);
        $this->title = $var;

        return $this;
    }

    /**
     * Statement content
     *
     * Generated from protobuf field <code>.eolymp.ecm.Content content = 22 [(.eolymp.api.mcp_field_desc) = "problem statement in requested language"];</code>
     * @return \Eolymp\Ecm\Content|null
     */
    public function getContent()
    {
        return $this->content;
    }

    public function hasContent()
    {
        return isset($this->content);
    }

    public function clearContent()
    {
        unset($this->content);
    }

    /**
     * Statement content
     *
     * Generated from protobuf field <code>.eolymp.ecm.Content content = 22 [(.eolymp.api.mcp_field_desc) = "problem statement in requested language"];</code>
     * @param \Eolymp\Ecm\Content $var
     * @return $this
     */
    public function setContent($var)
    {
        GPBUtil::checkMessage($var, \Eolymp\Ecm\Content::class);
        $this->content = $var;

        return $this;
    }

    /**
     * Statement download link, allows to download statement in original format.
     *
     * Generated from protobuf field <code>string download_link = 24 [(.eolymp.api.mcp_field_desc) = "a link to download statement in PDF format"];</code>
     * @return string
     */
    public function getDownloadLink()
    {
        return $this->download_link;
    }

    /**
     * Statement download link, allows to download statement in original format.
     *
     * Generated from protobuf field <code>string download_link = 24 [(.eolymp.api.mcp_field_desc) = "a link to download statement in PDF format"];</code>
     * @param string $var
     * @return $this
     */
    public function setDownloadLink($var)
    {
        GPBUtil::checkString($var, True);
        $this->download_link = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.eolymp.atlas.Form submission_form = 61;</code>
     * @return \Eolymp\Atlas\Form|null
     */
    public function getSubmissionForm()
    {
        return $this->submission_form;
    }

    public function hasSubmissionForm()
    {
        return isset($this->submission_form);
    }

    public function clearSubmissionForm()
    {
        unset($this->submission_form);
    }

    /**
     * Generated from protobuf field <code>.eolymp.atlas.Form submission_form = 61;</code>
     * @param \Eolymp\Atlas\Form $var
     * @return $this
     */
    public function setSubmissionForm($var)
    {
        GPBUtil::checkMessage($var, \Eolymp\Atlas\Form::class);
        $this->submission_form = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>repeated .eolymp.atlas.Problem.Example examples = 60;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getExamples()
    {
        return $this->examples;
    }

    /**
     * Generated from protobuf field <code>repeated .eolymp.atlas.Problem.Example examples = 60;</code>
     * @param array<\Eolymp\Atlas\Problem\Example>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setExamples($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Atlas\Problem\Example::class);
        $this->examples = $arr;

        return $this;
    }

}

