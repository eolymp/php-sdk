<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: eolymp/judge/participant.proto

namespace Eolymp\Judge;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>eolymp.judge.Participant</code>
 */
class Participant extends \Google\Protobuf\Internal\Message
{
    /**
     * unique identifier of the participant (can not be set when creating participant)
     *
     * Generated from protobuf field <code>string id = 1 [(.eolymp.api.read_only) = true];</code>
     */
    protected $id = '';
    /**
     * community member
     *
     * Generated from protobuf field <code>string member_id = 4;</code>
     */
    protected $member_id = '';
    /**
     * display name
     *
     * Generated from protobuf field <code>string display_name = 5 [(.eolymp.api.read_only) = true];</code>
     */
    protected $display_name = '';
    /**
     * role of the participant in the contest
     *
     * Generated from protobuf field <code>.eolymp.judge.Participant.Role role = 3;</code>
     */
    protected $role = 0;
    /**
     * if true, participant won't be assigned rank in scoreboard
     *
     * Generated from protobuf field <code>bool unofficial = 6;</code>
     */
    protected $unofficial = false;
    /**
     * participant is inactive
     *
     * Generated from protobuf field <code>bool inactive = 10;</code>
     */
    protected $inactive = false;
    /**
     * participant is disqualified
     *
     * Generated from protobuf field <code>bool disqualified = 11;</code>
     */
    protected $disqualified = false;
    /**
     * participant is a ghost
     *
     * Generated from protobuf field <code>bool ghost = 8;</code>
     */
    protected $ghost = false;
    /**
     * participant result is finalized
     *
     * Generated from protobuf field <code>bool finalized = 12;</code>
     */
    protected $finalized = false;
    /**
     * Generated from protobuf field <code>.eolymp.judge.Medal medal = 9;</code>
     */
    protected $medal = 0;
    /**
     * Status (see explanation to enumeration values)
     *
     * Generated from protobuf field <code>.eolymp.judge.Participant.Status status = 20;</code>
     */
    protected $status = 0;
    /**
     * Time when user has started participating
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp started_at = 21 [(.eolymp.api.read_only) = true];</code>
     */
    protected $started_at = null;
    /**
     * Time when user has finished (will finish) participating (incl. bonus time)
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_at = 25 [(.eolymp.api.read_only) = true];</code>
     */
    protected $end_at = null;
    /**
     * Additional time in seconds for participation
     *
     * Generated from protobuf field <code>uint32 bonus_time = 27;</code>
     */
    protected $bonus_time = 0;
    /**
     * Number of non-cancelled violations participant has received
     *
     * Generated from protobuf field <code>uint32 violation_count = 28 [(.eolymp.api.read_only) = true];</code>
     */
    protected $violation_count = 0;
    /**
     * deprecated: use admission API instead
     * Passcode is a code participant has to enter before she can begin contest.
     * This field is only populated when request is made by contest owner.
     * Passcode is read-only and should be set using ResetPasscode method.
     *
     * Generated from protobuf field <code>string passcode = 30 [(.eolymp.api.read_only) = true];</code>
     */
    protected $passcode = '';
    /**
     * Participation certificate ID.
     *
     * Generated from protobuf field <code>string certificate_id = 32 [(.eolymp.api.read_only) = true];</code>
     */
    protected $certificate_id = '';
    /**
     * Submit counter is used to count how many times user submitted the problem.
     *
     * Generated from protobuf field <code>repeated .eolymp.judge.Participant.Submit submits = 40 [(.eolymp.api.read_only) = true];</code>
     */
    private $submits;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           unique identifier of the participant (can not be set when creating participant)
     *     @type string $member_id
     *           community member
     *     @type string $display_name
     *           display name
     *     @type int $role
     *           role of the participant in the contest
     *     @type bool $unofficial
     *           if true, participant won't be assigned rank in scoreboard
     *     @type bool $inactive
     *           participant is inactive
     *     @type bool $disqualified
     *           participant is disqualified
     *     @type bool $ghost
     *           participant is a ghost
     *     @type bool $finalized
     *           participant result is finalized
     *     @type int $medal
     *     @type int $status
     *           Status (see explanation to enumeration values)
     *     @type \Google\Protobuf\Timestamp $started_at
     *           Time when user has started participating
     *     @type \Google\Protobuf\Timestamp $end_at
     *           Time when user has finished (will finish) participating (incl. bonus time)
     *     @type int $bonus_time
     *           Additional time in seconds for participation
     *     @type int $violation_count
     *           Number of non-cancelled violations participant has received
     *     @type string $passcode
     *           deprecated: use admission API instead
     *           Passcode is a code participant has to enter before she can begin contest.
     *           This field is only populated when request is made by contest owner.
     *           Passcode is read-only and should be set using ResetPasscode method.
     *     @type string $certificate_id
     *           Participation certificate ID.
     *     @type array<\Eolymp\Judge\Participant\Submit>|\Google\Protobuf\Internal\RepeatedField $submits
     *           Submit counter is used to count how many times user submitted the problem.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Judge\Participant::initOnce();
        parent::__construct($data);
    }

    /**
     * unique identifier of the participant (can not be set when creating participant)
     *
     * Generated from protobuf field <code>string id = 1 [(.eolymp.api.read_only) = true];</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * unique identifier of the participant (can not be set when creating participant)
     *
     * Generated from protobuf field <code>string id = 1 [(.eolymp.api.read_only) = true];</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * community member
     *
     * Generated from protobuf field <code>string member_id = 4;</code>
     * @return string
     */
    public function getMemberId()
    {
        return $this->member_id;
    }

    /**
     * community member
     *
     * Generated from protobuf field <code>string member_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setMemberId($var)
    {
        GPBUtil::checkString($var, True);
        $this->member_id = $var;

        return $this;
    }

    /**
     * display name
     *
     * Generated from protobuf field <code>string display_name = 5 [(.eolymp.api.read_only) = true];</code>
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * display name
     *
     * Generated from protobuf field <code>string display_name = 5 [(.eolymp.api.read_only) = true];</code>
     * @param string $var
     * @return $this
     */
    public function setDisplayName($var)
    {
        GPBUtil::checkString($var, True);
        $this->display_name = $var;

        return $this;
    }

    /**
     * role of the participant in the contest
     *
     * Generated from protobuf field <code>.eolymp.judge.Participant.Role role = 3;</code>
     * @return int
     */
    public function getRole()
    {
        return $this->role;
    }

    /**
     * role of the participant in the contest
     *
     * Generated from protobuf field <code>.eolymp.judge.Participant.Role role = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setRole($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Judge\Participant\Role::class);
        $this->role = $var;

        return $this;
    }

    /**
     * if true, participant won't be assigned rank in scoreboard
     *
     * Generated from protobuf field <code>bool unofficial = 6;</code>
     * @return bool
     */
    public function getUnofficial()
    {
        return $this->unofficial;
    }

    /**
     * if true, participant won't be assigned rank in scoreboard
     *
     * Generated from protobuf field <code>bool unofficial = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setUnofficial($var)
    {
        GPBUtil::checkBool($var);
        $this->unofficial = $var;

        return $this;
    }

    /**
     * participant is inactive
     *
     * Generated from protobuf field <code>bool inactive = 10;</code>
     * @return bool
     */
    public function getInactive()
    {
        return $this->inactive;
    }

    /**
     * participant is inactive
     *
     * Generated from protobuf field <code>bool inactive = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setInactive($var)
    {
        GPBUtil::checkBool($var);
        $this->inactive = $var;

        return $this;
    }

    /**
     * participant is disqualified
     *
     * Generated from protobuf field <code>bool disqualified = 11;</code>
     * @return bool
     */
    public function getDisqualified()
    {
        return $this->disqualified;
    }

    /**
     * participant is disqualified
     *
     * Generated from protobuf field <code>bool disqualified = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setDisqualified($var)
    {
        GPBUtil::checkBool($var);
        $this->disqualified = $var;

        return $this;
    }

    /**
     * participant is a ghost
     *
     * Generated from protobuf field <code>bool ghost = 8;</code>
     * @return bool
     */
    public function getGhost()
    {
        return $this->ghost;
    }

    /**
     * participant is a ghost
     *
     * Generated from protobuf field <code>bool ghost = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setGhost($var)
    {
        GPBUtil::checkBool($var);
        $this->ghost = $var;

        return $this;
    }

    /**
     * participant result is finalized
     *
     * Generated from protobuf field <code>bool finalized = 12;</code>
     * @return bool
     */
    public function getFinalized()
    {
        return $this->finalized;
    }

    /**
     * participant result is finalized
     *
     * Generated from protobuf field <code>bool finalized = 12;</code>
     * @param bool $var
     * @return $this
     */
    public function setFinalized($var)
    {
        GPBUtil::checkBool($var);
        $this->finalized = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.eolymp.judge.Medal medal = 9;</code>
     * @return int
     */
    public function getMedal()
    {
        return $this->medal;
    }

    /**
     * Generated from protobuf field <code>.eolymp.judge.Medal medal = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setMedal($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Judge\Medal::class);
        $this->medal = $var;

        return $this;
    }

    /**
     * Status (see explanation to enumeration values)
     *
     * Generated from protobuf field <code>.eolymp.judge.Participant.Status status = 20;</code>
     * @return int
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Status (see explanation to enumeration values)
     *
     * Generated from protobuf field <code>.eolymp.judge.Participant.Status status = 20;</code>
     * @param int $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Judge\Participant\Status::class);
        $this->status = $var;

        return $this;
    }

    /**
     * Time when user has started participating
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp started_at = 21 [(.eolymp.api.read_only) = true];</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getStartedAt()
    {
        return $this->started_at;
    }

    public function hasStartedAt()
    {
        return isset($this->started_at);
    }

    public function clearStartedAt()
    {
        unset($this->started_at);
    }

    /**
     * Time when user has started participating
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp started_at = 21 [(.eolymp.api.read_only) = true];</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setStartedAt($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->started_at = $var;

        return $this;
    }

    /**
     * Time when user has finished (will finish) participating (incl. bonus time)
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_at = 25 [(.eolymp.api.read_only) = true];</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getEndAt()
    {
        return $this->end_at;
    }

    public function hasEndAt()
    {
        return isset($this->end_at);
    }

    public function clearEndAt()
    {
        unset($this->end_at);
    }

    /**
     * Time when user has finished (will finish) participating (incl. bonus time)
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_at = 25 [(.eolymp.api.read_only) = true];</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setEndAt($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->end_at = $var;

        return $this;
    }

    /**
     * Additional time in seconds for participation
     *
     * Generated from protobuf field <code>uint32 bonus_time = 27;</code>
     * @return int
     */
    public function getBonusTime()
    {
        return $this->bonus_time;
    }

    /**
     * Additional time in seconds for participation
     *
     * Generated from protobuf field <code>uint32 bonus_time = 27;</code>
     * @param int $var
     * @return $this
     */
    public function setBonusTime($var)
    {
        GPBUtil::checkUint32($var);
        $this->bonus_time = $var;

        return $this;
    }

    /**
     * Number of non-cancelled violations participant has received
     *
     * Generated from protobuf field <code>uint32 violation_count = 28 [(.eolymp.api.read_only) = true];</code>
     * @return int
     */
    public function getViolationCount()
    {
        return $this->violation_count;
    }

    /**
     * Number of non-cancelled violations participant has received
     *
     * Generated from protobuf field <code>uint32 violation_count = 28 [(.eolymp.api.read_only) = true];</code>
     * @param int $var
     * @return $this
     */
    public function setViolationCount($var)
    {
        GPBUtil::checkUint32($var);
        $this->violation_count = $var;

        return $this;
    }

    /**
     * deprecated: use admission API instead
     * Passcode is a code participant has to enter before she can begin contest.
     * This field is only populated when request is made by contest owner.
     * Passcode is read-only and should be set using ResetPasscode method.
     *
     * Generated from protobuf field <code>string passcode = 30 [(.eolymp.api.read_only) = true];</code>
     * @return string
     */
    public function getPasscode()
    {
        return $this->passcode;
    }

    /**
     * deprecated: use admission API instead
     * Passcode is a code participant has to enter before she can begin contest.
     * This field is only populated when request is made by contest owner.
     * Passcode is read-only and should be set using ResetPasscode method.
     *
     * Generated from protobuf field <code>string passcode = 30 [(.eolymp.api.read_only) = true];</code>
     * @param string $var
     * @return $this
     */
    public function setPasscode($var)
    {
        GPBUtil::checkString($var, True);
        $this->passcode = $var;

        return $this;
    }

    /**
     * Participation certificate ID.
     *
     * Generated from protobuf field <code>string certificate_id = 32 [(.eolymp.api.read_only) = true];</code>
     * @return string
     */
    public function getCertificateId()
    {
        return $this->certificate_id;
    }

    /**
     * Participation certificate ID.
     *
     * Generated from protobuf field <code>string certificate_id = 32 [(.eolymp.api.read_only) = true];</code>
     * @param string $var
     * @return $this
     */
    public function setCertificateId($var)
    {
        GPBUtil::checkString($var, True);
        $this->certificate_id = $var;

        return $this;
    }

    /**
     * Submit counter is used to count how many times user submitted the problem.
     *
     * Generated from protobuf field <code>repeated .eolymp.judge.Participant.Submit submits = 40 [(.eolymp.api.read_only) = true];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getSubmits()
    {
        return $this->submits;
    }

    /**
     * Submit counter is used to count how many times user submitted the problem.
     *
     * Generated from protobuf field <code>repeated .eolymp.judge.Participant.Submit submits = 40 [(.eolymp.api.read_only) = true];</code>
     * @param array<\Eolymp\Judge\Participant\Submit>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setSubmits($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Judge\Participant\Submit::class);
        $this->submits = $arr;

        return $this;
    }

}

