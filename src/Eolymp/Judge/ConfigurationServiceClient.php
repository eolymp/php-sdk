<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Judge;

class ConfigurationServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param DescribeEnvironmentInput $input message
     * @param array $context request parameters
     *
     * @return DescribeEnvironmentOutput output message
     */
    public function DescribeEnvironment(DescribeEnvironmentInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/environment";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.ConfigurationService/DescribeEnvironment";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, DescribeEnvironmentOutput::class, $context);
    }

    /**
     * @param ConfigureEnvironmentInput $input message
     * @param array $context request parameters
     *
     * @return ConfigureEnvironmentOutput output message
     */
    public function ConfigureEnvironment(ConfigureEnvironmentInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/environment";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.ConfigurationService/ConfigureEnvironment";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ConfigureEnvironmentOutput::class, $context);
    }

    /**
     * @param DescribeCertificationInput $input message
     * @param array $context request parameters
     *
     * @return DescribeCertificationOutput output message
     */
    public function DescribeCertification(DescribeCertificationInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/certification";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.ConfigurationService/DescribeCertification";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, DescribeCertificationOutput::class, $context);
    }

    /**
     * @param ConfigureCertificationInput $input message
     * @param array $context request parameters
     *
     * @return ConfigureCertificationOutput output message
     */
    public function ConfigureCertification(ConfigureCertificationInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/certification";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.ConfigurationService/ConfigureCertification";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ConfigureCertificationOutput::class, $context);
    }

    /**
     * @param DescribeTaxonomyInput $input message
     * @param array $context request parameters
     *
     * @return DescribeTaxonomyOutput output message
     */
    public function DescribeTaxonomy(DescribeTaxonomyInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/taxonomy";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.ConfigurationService/DescribeTaxonomy";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, DescribeTaxonomyOutput::class, $context);
    }

    /**
     * @param ConfigureTaxonomyInput $input message
     * @param array $context request parameters
     *
     * @return ConfigureTaxonomyOutput output message
     */
    public function ConfigureTaxonomy(ConfigureTaxonomyInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/taxonomy";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.ConfigurationService/ConfigureTaxonomy";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ConfigureTaxonomyOutput::class, $context);
    }

}
