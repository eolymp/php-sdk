<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Judge;

class ParticipantServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param AssignParticipantInput $input message
     * @param array $context request parameters
     *
     * @return AssignParticipantOutput output message
     */
    public function AssignParticipant(AssignParticipantInput $input, array $context = [])
    {
        $path = "/participants";

        $context['name'] = "eolymp.judge.ParticipantService/AssignParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, AssignParticipantOutput::class, $context);
    }

    /**
     * deprecated, use UpdateParticipant instead
     *
     * @param EnableParticipantInput $input message
     * @param array $context request parameters
     *
     * @return EnableParticipantOutput output message
     */
    public function EnableParticipant(EnableParticipantInput $input, array $context = [])
    {
        $path = "/participants/".rawurlencode($input->getParticipantId())."/enable";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.ParticipantService/EnableParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, EnableParticipantOutput::class, $context);
    }

    /**
     * deprecated, use UpdateParticipant instead
     *
     * @param DisableParticipantInput $input message
     * @param array $context request parameters
     *
     * @return DisableParticipantOutput output message
     */
    public function DisableParticipant(DisableParticipantInput $input, array $context = [])
    {
        $path = "/participants/".rawurlencode($input->getParticipantId())."/disable";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.ParticipantService/DisableParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, DisableParticipantOutput::class, $context);
    }

    /**
     * @param UpdateParticipantInput $input message
     * @param array $context request parameters
     *
     * @return UpdateParticipantOutput output message
     */
    public function UpdateParticipant(UpdateParticipantInput $input, array $context = [])
    {
        $path = "/participants/".rawurlencode($input->getParticipantId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.ParticipantService/UpdateParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateParticipantOutput::class, $context);
    }

    /**
     * @param DisqualifyParticipantInput $input message
     * @param array $context request parameters
     *
     * @return DisqualifyParticipantOutput output message
     */
    public function DisqualifyParticipant(DisqualifyParticipantInput $input, array $context = [])
    {
        $path = "/participants/".rawurlencode($input->getParticipantId())."/disqualify";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.ParticipantService/DisqualifyParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, DisqualifyParticipantOutput::class, $context);
    }

    /**
     * @param DeleteParticipantInput $input message
     * @param array $context request parameters
     *
     * @return DeleteParticipantOutput output message
     */
    public function DeleteParticipant(DeleteParticipantInput $input, array $context = [])
    {
        $path = "/participants/".rawurlencode($input->getParticipantId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.ParticipantService/DeleteParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteParticipantOutput::class, $context);
    }

    /**
     * @param DescribeParticipantInput $input message
     * @param array $context request parameters
     *
     * @return DescribeParticipantOutput output message
     */
    public function DescribeParticipant(DescribeParticipantInput $input, array $context = [])
    {
        $path = "/participants/".rawurlencode($input->getParticipantId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.ParticipantService/DescribeParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeParticipantOutput::class, $context);
    }

    /**
     * @param ListParticipantsInput $input message
     * @param array $context request parameters
     *
     * @return ListParticipantsOutput output message
     */
    public function ListParticipants(ListParticipantsInput $input, array $context = [])
    {
        $path = "/participants";

        $context['name'] = "eolymp.judge.ParticipantService/ListParticipants";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListParticipantsOutput::class, $context);
    }

    /**
     * DescribeViewer allows to fetch participant data for a currently authorized user.
     *
     * @param DescribeViewerInput $input message
     * @param array $context request parameters
     *
     * @return DescribeViewerOutput output message
     */
    public function DescribeViewer(DescribeViewerInput $input, array $context = [])
    {
        $path = "/introspect";

        $context['name'] = "eolymp.judge.ParticipantService/DescribeViewer";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeViewerOutput::class, $context);
    }

    /**
     * Allows a participant (currently authorized user) to join (add himself to) a public contest.
     * deprecated: use registration service instead
     *
     * @param JoinContestInput $input message
     * @param array $context request parameters
     *
     * @return JoinContestOutput output message
     */
    public function JoinContest(JoinContestInput $input, array $context = [])
    {
        $path = "/join";

        $context['name'] = "eolymp.judge.ParticipantService/JoinContest";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, JoinContestOutput::class, $context);
    }

    /**
     * Allows a participant (currently authorized user) to start participating in the contest, see problems and submit solutions.
     *
     * @param StartContestInput $input message
     * @param array $context request parameters
     *
     * @return StartContestOutput output message
     */
    public function StartContest(StartContestInput $input, array $context = [])
    {
        $path = "/start";

        $context['name'] = "eolymp.judge.ParticipantService/StartContest";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, StartContestOutput::class, $context);
    }

}
