<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/judge/contest.proto

namespace Eolymp\Judge\Contest;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>eolymp.judge.Contest.Scoring</code>
 */
class Scoring extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>bool show_scoreboard = 1;</code>
     */
    protected $show_scoreboard = false;
    /**
     * Generated from protobuf field <code>uint32 attempt_penalty = 2;</code>
     */
    protected $attempt_penalty = 0;
    /**
     * time in seconds before end of the contest when results will be frozen (eg. 3600 means one hour before the end)
     *
     * Generated from protobuf field <code>uint32 freezing_time = 3;</code>
     */
    protected $freezing_time = 0;
    /**
     * a delay in seconds after end of contest that board will remain frozen (eg. 600 means board will remain frozen for 10 minutes after end of contest)
     *
     * Generated from protobuf field <code>int32 unfreeze_delay = 5;</code>
     */
    protected $unfreeze_delay = 0;
    /**
     * Generated from protobuf field <code>bool allow_upsolving = 4;</code>
     */
    protected $allow_upsolving = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $show_scoreboard
     *     @type int $attempt_penalty
     *     @type int $freezing_time
     *           time in seconds before end of the contest when results will be frozen (eg. 3600 means one hour before the end)
     *     @type int $unfreeze_delay
     *           a delay in seconds after end of contest that board will remain frozen (eg. 600 means board will remain frozen for 10 minutes after end of contest)
     *     @type bool $allow_upsolving
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Judge\Contest::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bool show_scoreboard = 1;</code>
     * @return bool
     */
    public function getShowScoreboard()
    {
        return $this->show_scoreboard;
    }

    /**
     * Generated from protobuf field <code>bool show_scoreboard = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setShowScoreboard($var)
    {
        GPBUtil::checkBool($var);
        $this->show_scoreboard = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 attempt_penalty = 2;</code>
     * @return int
     */
    public function getAttemptPenalty()
    {
        return $this->attempt_penalty;
    }

    /**
     * Generated from protobuf field <code>uint32 attempt_penalty = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setAttemptPenalty($var)
    {
        GPBUtil::checkUint32($var);
        $this->attempt_penalty = $var;

        return $this;
    }

    /**
     * time in seconds before end of the contest when results will be frozen (eg. 3600 means one hour before the end)
     *
     * Generated from protobuf field <code>uint32 freezing_time = 3;</code>
     * @return int
     */
    public function getFreezingTime()
    {
        return $this->freezing_time;
    }

    /**
     * time in seconds before end of the contest when results will be frozen (eg. 3600 means one hour before the end)
     *
     * Generated from protobuf field <code>uint32 freezing_time = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setFreezingTime($var)
    {
        GPBUtil::checkUint32($var);
        $this->freezing_time = $var;

        return $this;
    }

    /**
     * a delay in seconds after end of contest that board will remain frozen (eg. 600 means board will remain frozen for 10 minutes after end of contest)
     *
     * Generated from protobuf field <code>int32 unfreeze_delay = 5;</code>
     * @return int
     */
    public function getUnfreezeDelay()
    {
        return $this->unfreeze_delay;
    }

    /**
     * a delay in seconds after end of contest that board will remain frozen (eg. 600 means board will remain frozen for 10 minutes after end of contest)
     *
     * Generated from protobuf field <code>int32 unfreeze_delay = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setUnfreezeDelay($var)
    {
        GPBUtil::checkInt32($var);
        $this->unfreeze_delay = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool allow_upsolving = 4;</code>
     * @return bool
     */
    public function getAllowUpsolving()
    {
        return $this->allow_upsolving;
    }

    /**
     * Generated from protobuf field <code>bool allow_upsolving = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowUpsolving($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_upsolving = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Scoring::class, \Eolymp\Judge\Contest_Scoring::class);

