<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/judge/contest.proto

namespace Eolymp\Judge\Contest;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>eolymp.judge.Contest.Certification</code>
 */
class Certification extends \Google\Protobuf\Internal\Message
{
    /**
     * Enable certificate generation, certificates are generated on contest finalization
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     */
    protected $enabled = false;
    /**
     * name of the organization organising the contest
     *
     * Generated from protobuf field <code>string affiliation = 2;</code>
     */
    protected $affiliation = '';
    /**
     * Signers of the certificate (max 3)
     *
     * Generated from protobuf field <code>repeated .eolymp.judge.Contest.Certification.Signer signers = 3;</code>
     */
    private $signers;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $enabled
     *           Enable certificate generation, certificates are generated on contest finalization
     *     @type string $affiliation
     *           name of the organization organising the contest
     *     @type array<\Eolymp\Judge\Contest\Certification\Signer>|\Google\Protobuf\Internal\RepeatedField $signers
     *           Signers of the certificate (max 3)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Judge\Contest::initOnce();
        parent::__construct($data);
    }

    /**
     * Enable certificate generation, certificates are generated on contest finalization
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * Enable certificate generation, certificates are generated on contest finalization
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->enabled = $var;

        return $this;
    }

    /**
     * name of the organization organising the contest
     *
     * Generated from protobuf field <code>string affiliation = 2;</code>
     * @return string
     */
    public function getAffiliation()
    {
        return $this->affiliation;
    }

    /**
     * name of the organization organising the contest
     *
     * Generated from protobuf field <code>string affiliation = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setAffiliation($var)
    {
        GPBUtil::checkString($var, True);
        $this->affiliation = $var;

        return $this;
    }

    /**
     * Signers of the certificate (max 3)
     *
     * Generated from protobuf field <code>repeated .eolymp.judge.Contest.Certification.Signer signers = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getSigners()
    {
        return $this->signers;
    }

    /**
     * Signers of the certificate (max 3)
     *
     * Generated from protobuf field <code>repeated .eolymp.judge.Contest.Certification.Signer signers = 3;</code>
     * @param array<\Eolymp\Judge\Contest\Certification\Signer>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setSigners($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Judge\Contest\Certification\Signer::class);
        $this->signers = $arr;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Certification::class, \Eolymp\Judge\Contest_Certification::class);

