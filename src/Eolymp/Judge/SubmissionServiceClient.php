<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Judge;

class SubmissionServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * Creates submissions and triggers test process.
     *
     * @param CreateSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return CreateSubmissionOutput output message
     */
    public function CreateSubmission(CreateSubmissionInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId())."/submissions";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.SubmissionService/CreateSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateSubmissionOutput::class, $context);
    }

    /**
     * @param ListSubmissionsInput $input message
     * @param array $context request parameters
     *
     * @return ListSubmissionsOutput output message
     */
    public function ListSubmissions(ListSubmissionsInput $input, array $context = [])
    {
        $path = "/submissions";

        $context['name'] = "eolymp.judge.SubmissionService/ListSubmissions";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListSubmissionsOutput::class, $context);
    }

    /**
     * @param DescribeSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return DescribeSubmissionOutput output message
     */
    public function DescribeSubmission(DescribeSubmissionInput $input, array $context = [])
    {
        $path = "/submissions/".rawurlencode($input->getSubmissionId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSubmissionId("");

        $context['name'] = "eolymp.judge.SubmissionService/DescribeSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeSubmissionOutput::class, $context);
    }

    /**
     * @param PrintSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return PrintSubmissionOutput output message
     */
    public function PrintSubmission(PrintSubmissionInput $input, array $context = [])
    {
        $path = "/submissions/".rawurlencode($input->getSubmissionId())."/print";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSubmissionId("");

        $context['name'] = "eolymp.judge.SubmissionService/PrintSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, PrintSubmissionOutput::class, $context);
    }

    /**
     * Resets submission results and triggers testing process.
     *
     * @param RetestSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return RetestSubmissionOutput output message
     */
    public function RetestSubmission(RetestSubmissionInput $input, array $context = [])
    {
        $path = "/submissions/".rawurlencode($input->getSubmissionId())."/retest";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSubmissionId("");

        $context['name'] = "eolymp.judge.SubmissionService/RetestSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, RetestSubmissionOutput::class, $context);
    }

    /**
     * @param DeleteSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return DeleteSubmissionOutput output message
     */
    public function DeleteSubmission(DeleteSubmissionInput $input, array $context = [])
    {
        $path = "/submissions/".rawurlencode($input->getSubmissionId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSubmissionId("");

        $context['name'] = "eolymp.judge.SubmissionService/DeleteSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteSubmissionOutput::class, $context);
    }

    /**
     * @param RestoreSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return RestoreSubmissionOutput output message
     */
    public function RestoreSubmission(RestoreSubmissionInput $input, array $context = [])
    {
        $path = "/submissions/".rawurlencode($input->getSubmissionId())."/restore";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSubmissionId("");

        $context['name'] = "eolymp.judge.SubmissionService/RestoreSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, RestoreSubmissionOutput::class, $context);
    }

    /**
     * RetestProblem resets existing submissions for the problem and triggers testing process again.
     *
     * @param RetestProblemInput $input message
     * @param array $context request parameters
     *
     * @return RetestProblemOutput output message
     */
    public function RetestProblem(RetestProblemInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId())."/retest";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.SubmissionService/RetestProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, RetestProblemOutput::class, $context);
    }

    /**
     * @param AnalyzeSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return AnalyzeSubmissionOutput output message
     */
    public function AnalyzeSubmission(AnalyzeSubmissionInput $input, array $context = [])
    {
        $path = "/submissions/".rawurlencode($input->getSubmissionId())."/analyze";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSubmissionId("");

        $context['name'] = "eolymp.judge.SubmissionService/AnalyzeSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, AnalyzeSubmissionOutput::class, $context);
    }

}
