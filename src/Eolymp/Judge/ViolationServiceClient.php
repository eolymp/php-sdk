<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Judge;

class ViolationServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateViolationInput $input message
     * @param array $context request parameters
     *
     * @return CreateViolationOutput output message
     */
    public function CreateViolation(CreateViolationInput $input, array $context = [])
    {
        $path = "/violations";

        $context['name'] = "eolymp.judge.ViolationService/CreateViolation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateViolationOutput::class, $context);
    }

    /**
     * @param UpdateViolationInput $input message
     * @param array $context request parameters
     *
     * @return UpdateViolationOutput output message
     */
    public function UpdateViolation(UpdateViolationInput $input, array $context = [])
    {
        $path = "/violations/".rawurlencode($input->getViolationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setViolationId("");

        $context['name'] = "eolymp.judge.ViolationService/UpdateViolation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateViolationOutput::class, $context);
    }

    /**
     * @param DeleteViolationInput $input message
     * @param array $context request parameters
     *
     * @return DeleteViolationOutput output message
     */
    public function DeleteViolation(DeleteViolationInput $input, array $context = [])
    {
        $path = "/violations/".rawurlencode($input->getViolationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setViolationId("");

        $context['name'] = "eolymp.judge.ViolationService/DeleteViolation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteViolationOutput::class, $context);
    }

    /**
     * @param DescribeViolationInput $input message
     * @param array $context request parameters
     *
     * @return DescribeViolationOutput output message
     */
    public function DescribeViolation(DescribeViolationInput $input, array $context = [])
    {
        $path = "/violations/".rawurlencode($input->getViolationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setViolationId("");

        $context['name'] = "eolymp.judge.ViolationService/DescribeViolation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeViolationOutput::class, $context);
    }

    /**
     * @param ListViolationsInput $input message
     * @param array $context request parameters
     *
     * @return ListViolationsOutput output message
     */
    public function ListViolations(ListViolationsInput $input, array $context = [])
    {
        $path = "/violations";

        $context['name'] = "eolymp.judge.ViolationService/ListViolations";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListViolationsOutput::class, $context);
    }

}
