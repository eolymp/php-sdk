<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/judge/problem.proto

namespace Eolymp\Judge\Problem\Statement;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.judge.Problem.Statement.Format</code>
 */
class Format
{
    /**
     * Generated from protobuf enum <code>NONE = 0;</code>
     */
    const NONE = 0;
    /**
     * Generated from protobuf enum <code>TEX = 1;</code>
     */
    const TEX = 1;
    /**
     * Generated from protobuf enum <code>MARKDOWN = 2;</code>
     */
    const MARKDOWN = 2;
    /**
     * Generated from protobuf enum <code>HTML = 3;</code>
     */
    const HTML = 3;
    /**
     * Generated from protobuf enum <code>RICH = 4;</code>
     */
    const RICH = 4;

    private static $valueToName = [
        self::NONE => 'NONE',
        self::TEX => 'TEX',
        self::MARKDOWN => 'MARKDOWN',
        self::HTML => 'HTML',
        self::RICH => 'RICH',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Format::class, \Eolymp\Judge\Problem_Statement_Format::class);

