<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Judge;

class JudgeClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * LookupContest fetches basic (possibly incomplete) contest information. Right now this method is very similar to
     * DescribeContest, but looks up contest by domain name (key). Its purpose is different than DescribeContest, as
     * it attempts to "probe" contest rather than fetch complete information.
     *
     * This is first API call made by contest-ui just to check if domain name can be resolved into Contest ID.
     *
     * @param LookupContestInput $input message
     * @param array $context request parameters
     *
     * @return LookupContestOutput output message
     */
    public function LookupContest(LookupContestInput $input, array $context = [])
    {
        $path = "/contests/__lookup";

        $context['name'] = "eolymp.judge.Judge/LookupContest";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, LookupContestOutput::class, $context);
    }

    /**
     * @param CreateContestInput $input message
     * @param array $context request parameters
     *
     * @return CreateContestOutput output message
     */
    public function CreateContest(CreateContestInput $input, array $context = [])
    {
        $path = "/contests";

        $context['name'] = "eolymp.judge.Judge/CreateContest";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateContestOutput::class, $context);
    }

    /**
     * @param DeleteContestInput $input message
     * @param array $context request parameters
     *
     * @return DeleteContestOutput output message
     */
    public function DeleteContest(DeleteContestInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/DeleteContest";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteContestOutput::class, $context);
    }

    /**
     * @param UpdateContestInput $input message
     * @param array $context request parameters
     *
     * @return UpdateContestOutput output message
     */
    public function UpdateContest(UpdateContestInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/UpdateContest";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateContestOutput::class, $context);
    }

    /**
     * @param DescribeContestInput $input message
     * @param array $context request parameters
     *
     * @return DescribeContestOutput output message
     */
    public function DescribeContest(DescribeContestInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/DescribeContest";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeContestOutput::class, $context);
    }

    /**
     * @param ListContestsInput $input message
     * @param array $context request parameters
     *
     * @return ListContestsOutput output message
     */
    public function ListContests(ListContestsInput $input, array $context = [])
    {
        $path = "/contests";

        $context['name'] = "eolymp.judge.Judge/ListContests";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListContestsOutput::class, $context);
    }

    /**
     * Force-starts scheduled contest, this call also automatically changes starts_at to current time and adjusts
     * ends_at to match original date range of the contest.
     *
     * @param OpenContestInput $input message
     * @param array $context request parameters
     *
     * @return OpenContestOutput output message
     */
    public function OpenContest(OpenContestInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/open";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/OpenContest";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, OpenContestOutput::class, $context);
    }

    /**
     * Force-finishes open contest, this method automatically changes ends_at to current time.
     *
     * @param CloseContestInput $input message
     * @param array $context request parameters
     *
     * @return CloseContestOutput output message
     */
    public function CloseContest(CloseContestInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/close";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/CloseContest";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CloseContestOutput::class, $context);
    }

    /**
     * ConfigureRuntime allows to configure which runtimes will be available during contest.
     * All available runtimes can be retrieved using `executor.ListRuntime` method.
     *
     * @param ConfigureRuntimeInput $input message
     * @param array $context request parameters
     *
     * @return ConfigureRuntimeOutput output message
     */
    public function ConfigureRuntime(ConfigureRuntimeInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/runtime";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/ConfigureRuntime";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ConfigureRuntimeOutput::class, $context);
    }

    /**
     * DescribeRuntime allows fetch runtimes available during contests.
     *
     * @param DescribeRuntimeInput $input message
     * @param array $context request parameters
     *
     * @return DescribeRuntimeOutput output message
     */
    public function DescribeRuntime(DescribeRuntimeInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/runtime";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/DescribeRuntime";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeRuntimeOutput::class, $context);
    }

    /**
     * ConfigureAppearance allows to configure contest website appearance.
     *
     * @param ConfigureAppearanceInput $input message
     * @param array $context request parameters
     *
     * @return ConfigureAppearanceOutput output message
     */
    public function ConfigureAppearance(ConfigureAppearanceInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/appearance";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/ConfigureAppearance";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ConfigureAppearanceOutput::class, $context);
    }

    /**
     * DescribeAppearance allows fetch contest website appearance.
     *
     * @param DescribeAppearanceInput $input message
     * @param array $context request parameters
     *
     * @return DescribeAppearanceOutput output message
     */
    public function DescribeAppearance(DescribeAppearanceInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/appearance";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/DescribeAppearance";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeAppearanceOutput::class, $context);
    }

    /**
     * ConfigureScoring allows to configure contest scoring.
     *
     * @param ConfigureScoringInput $input message
     * @param array $context request parameters
     *
     * @return ConfigureScoringOutput output message
     */
    public function ConfigureScoring(ConfigureScoringInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/scoring";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/ConfigureScoring";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ConfigureScoringOutput::class, $context);
    }

    /**
     * DescribeScoring allows fetch contest scoring.
     *
     * @param DescribeScoringInput $input message
     * @param array $context request parameters
     *
     * @return DescribeScoringOutput output message
     */
    public function DescribeScoring(DescribeScoringInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/scoring";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/DescribeScoring";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeScoringOutput::class, $context);
    }

    /**
     * ImportProblem from Atlas (problem catalog)
     *
     * @param ImportProblemInput $input message
     * @param array $context request parameters
     *
     * @return ImportProblemOutput output message
     */
    public function ImportProblem(ImportProblemInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/ImportProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ImportProblemOutput::class, $context);
    }

    /**
     * SyncProblem with Atlas (problem catalog)
     *
     * @param SyncProblemInput $input message
     * @param array $context request parameters
     *
     * @return SyncProblemOutput output message
     */
    public function SyncProblem(SyncProblemInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems/".rawurlencode($input->getProblemId())."/sync";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.Judge/SyncProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, SyncProblemOutput::class, $context);
    }

    /**
     * @param UpdateProblemInput $input message
     * @param array $context request parameters
     *
     * @return UpdateProblemOutput output message
     */
    public function UpdateProblem(UpdateProblemInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems/".rawurlencode($input->getProblemId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.Judge/UpdateProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateProblemOutput::class, $context);
    }

    /**
     * @param ListProblemsInput $input message
     * @param array $context request parameters
     *
     * @return ListProblemsOutput output message
     */
    public function ListProblems(ListProblemsInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/ListProblems";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListProblemsOutput::class, $context);
    }

    /**
     * @param DescribeProblemInput $input message
     * @param array $context request parameters
     *
     * @return DescribeProblemOutput output message
     */
    public function DescribeProblem(DescribeProblemInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems/".rawurlencode($input->getProblemId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.Judge/DescribeProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeProblemOutput::class, $context);
    }

    /**
     * Return code template for problem
     *
     * @param DescribeCodeTemplateInput $input message
     * @param array $context request parameters
     *
     * @return DescribeCodeTemplateOutput output message
     */
    public function DescribeCodeTemplate(DescribeCodeTemplateInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems/".rawurlencode($input->getProblemId())."/templates/".rawurlencode($input->getTemplateId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setProblemId("");
        $input->setTemplateId("");

        $context['name'] = "eolymp.judge.Judge/DescribeCodeTemplate";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeCodeTemplateOutput::class, $context);
    }

    /**
     * Lookup template for a given runtime/language
     *
     * @param LookupCodeTemplateInput $input message
     * @param array $context request parameters
     *
     * @return LookupCodeTemplateOutput output message
     */
    public function LookupCodeTemplate(LookupCodeTemplateInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems/".rawurlencode($input->getProblemId())."/lookup-template";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.Judge/LookupCodeTemplate";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, LookupCodeTemplateOutput::class, $context);
    }

    /**
     * @param ListStatementsInput $input message
     * @param array $context request parameters
     *
     * @return ListStatementsOutput output message
     */
    public function ListStatements(ListStatementsInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems/".rawurlencode($input->getProblemId())."/statements";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.Judge/ListStatements";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListStatementsOutput::class, $context);
    }

    /**
     * @param ListAttachmentsInput $input message
     * @param array $context request parameters
     *
     * @return ListAttachmentsOutput output message
     */
    public function ListAttachments(ListAttachmentsInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems/".rawurlencode($input->getProblemId())."/attachments";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.Judge/ListAttachments";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListAttachmentsOutput::class, $context);
    }

    /**
     * @param ListExamplesInput $input message
     * @param array $context request parameters
     *
     * @return ListExamplesOutput output message
     */
    public function ListExamples(ListExamplesInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems/".rawurlencode($input->getProblemId())."/examples";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.Judge/ListExamples";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListExamplesOutput::class, $context);
    }

    /**
     * @param DeleteProblemInput $input message
     * @param array $context request parameters
     *
     * @return DeleteProblemOutput output message
     */
    public function DeleteProblem(DeleteProblemInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems/".rawurlencode($input->getProblemId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.Judge/DeleteProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteProblemOutput::class, $context);
    }

    /**
     * RetestProblem resets existing submissions for the problem and triggers testing process again.
     *
     * @param RetestProblemInput $input message
     * @param array $context request parameters
     *
     * @return RetestProblemOutput output message
     */
    public function RetestProblem(RetestProblemInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems/".rawurlencode($input->getProblemId())."/retest";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.Judge/RetestProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, RetestProblemOutput::class, $context);
    }

    /**
     * @param AddParticipantInput $input message
     * @param array $context request parameters
     *
     * @return AddParticipantOutput output message
     */
    public function AddParticipant(AddParticipantInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/participants";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/AddParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, AddParticipantOutput::class, $context);
    }

    /**
     * @param EnableParticipantInput $input message
     * @param array $context request parameters
     *
     * @return EnableParticipantOutput output message
     */
    public function EnableParticipant(EnableParticipantInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/participants/".rawurlencode($input->getParticipantId())."/enable";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.Judge/EnableParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, EnableParticipantOutput::class, $context);
    }

    /**
     * @param DisableParticipantInput $input message
     * @param array $context request parameters
     *
     * @return DisableParticipantOutput output message
     */
    public function DisableParticipant(DisableParticipantInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/participants/".rawurlencode($input->getParticipantId())."/disable";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.Judge/DisableParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, DisableParticipantOutput::class, $context);
    }

    /**
     * @param UpdateParticipantInput $input message
     * @param array $context request parameters
     *
     * @return UpdateParticipantOutput output message
     */
    public function UpdateParticipant(UpdateParticipantInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/participants/".rawurlencode($input->getParticipantId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.Judge/UpdateParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateParticipantOutput::class, $context);
    }

    /**
     * @param RemoveParticipantInput $input message
     * @param array $context request parameters
     *
     * @return RemoveParticipantOutput output message
     */
    public function RemoveParticipant(RemoveParticipantInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/participants/".rawurlencode($input->getParticipantId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.Judge/RemoveParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, RemoveParticipantOutput::class, $context);
    }

    /**
     * @param ListParticipantsInput $input message
     * @param array $context request parameters
     *
     * @return ListParticipantsOutput output message
     */
    public function ListParticipants(ListParticipantsInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/participants";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/ListParticipants";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListParticipantsOutput::class, $context);
    }

    /**
     * @param DescribeParticipantInput $input message
     * @param array $context request parameters
     *
     * @return DescribeParticipantOutput output message
     */
    public function DescribeParticipant(DescribeParticipantInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/participants/".rawurlencode($input->getParticipantId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.Judge/DescribeParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeParticipantOutput::class, $context);
    }

    /**
     * IntrospectParticipant allows to fetch participant data for a currently authorized user.
     *
     * @param IntrospectParticipantInput $input message
     * @param array $context request parameters
     *
     * @return IntrospectParticipantOutput output message
     */
    public function IntrospectParticipant(IntrospectParticipantInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/introspect";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/IntrospectParticipant";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, IntrospectParticipantOutput::class, $context);
    }

    /**
     * Allows a participant (currently authorized user) to join (add himself to) a public contest.
     *
     * @param JoinContestInput $input message
     * @param array $context request parameters
     *
     * @return JoinContestOutput output message
     */
    public function JoinContest(JoinContestInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/join";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/JoinContest";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, JoinContestOutput::class, $context);
    }

    /**
     * Allows a participant (currently authorized user) to start participating in the contest, see problems and submit solutions.
     *
     * @param StartContestInput $input message
     * @param array $context request parameters
     *
     * @return StartContestOutput output message
     */
    public function StartContest(StartContestInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/start";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/StartContest";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, StartContestOutput::class, $context);
    }

    /**
     * Verify if passcode is required for the contest and if authenticated token has entered the passcode.
     *
     * @param VerifyPasscodeInput $input message
     * @param array $context request parameters
     *
     * @return VerifyPasscodeOutput output message
     */
    public function VerifyPasscode(VerifyPasscodeInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/verify-passcode";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/VerifyPasscode";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, VerifyPasscodeOutput::class, $context);
    }

    /**
     * Enter passcode marks current session as one authenticated by passcode.
     *
     * @param EnterPasscodeInput $input message
     * @param array $context request parameters
     *
     * @return EnterPasscodeOutput output message
     */
    public function EnterPasscode(EnterPasscodeInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/enter-passcode";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/EnterPasscode";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, EnterPasscodeOutput::class, $context);
    }

    /**
     * Set a new passcode to the participant, if passcode was not set it will be now required
     *
     * @param ResetPasscodeInput $input message
     * @param array $context request parameters
     *
     * @return ResetPasscodeOutput output message
     */
    public function ResetPasscode(ResetPasscodeInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/participants/".rawurlencode($input->getParticipantId())."/passcode";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.Judge/ResetPasscode";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ResetPasscodeOutput::class, $context);
    }

    /**
     * Remove passcode from participant and allow her to enter contest without passcode.
     *
     * @param RemovePasscodeInput $input message
     * @param array $context request parameters
     *
     * @return RemovePasscodeOutput output message
     */
    public function RemovePasscode(RemovePasscodeInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/participants/".rawurlencode($input->getParticipantId())."/passcode";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.Judge/RemovePasscode";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, RemovePasscodeOutput::class, $context);
    }

    /**
     * Creates submissions and triggers test process.
     *
     * @param CreateSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return CreateSubmissionOutput output message
     */
    public function CreateSubmission(CreateSubmissionInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/problems/".rawurlencode($input->getProblemId())."/submissions";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.Judge/CreateSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateSubmissionOutput::class, $context);
    }

    /**
     * @param ListSubmissionsInput $input message
     * @param array $context request parameters
     *
     * @return ListSubmissionsOutput output message
     */
    public function ListSubmissions(ListSubmissionsInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/submissions";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/ListSubmissions";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListSubmissionsOutput::class, $context);
    }

    /**
     * @param DescribeSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return DescribeSubmissionOutput output message
     */
    public function DescribeSubmission(DescribeSubmissionInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/submissions/".rawurlencode($input->getSubmissionId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setSubmissionId("");

        $context['name'] = "eolymp.judge.Judge/DescribeSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeSubmissionOutput::class, $context);
    }

    /**
     * Resets submission results and triggers testing process.
     *
     * @param RetestSubmissionInput $input message
     * @param array $context request parameters
     *
     * @return RetestSubmissionOutput output message
     */
    public function RetestSubmission(RetestSubmissionInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/submissions/".rawurlencode($input->getSubmissionId())."/retest";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setSubmissionId("");

        $context['name'] = "eolymp.judge.Judge/RetestSubmission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, RetestSubmissionOutput::class, $context);
    }

    /**
     * Create a new ticket
     *
     * @param CreateTicketInput $input message
     * @param array $context request parameters
     *
     * @return CreateTicketOutput output message
     */
    public function CreateTicket(CreateTicketInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/tickets";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/CreateTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateTicketOutput::class, $context);
    }

    /**
     * Mark ticket as Closed
     *
     * @param CloseTicketInput $input message
     * @param array $context request parameters
     *
     * @return CloseTicketOutput output message
     */
    public function CloseTicket(CloseTicketInput $input, array $context = [])
    {
        $path = "/tickets/".rawurlencode($input->getTicketId())."/close";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.judge.Judge/CloseTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CloseTicketOutput::class, $context);
    }

    /**
     * Mark ticket as Open
     *
     * @param OpenTicketInput $input message
     * @param array $context request parameters
     *
     * @return OpenTicketOutput output message
     */
    public function OpenTicket(OpenTicketInput $input, array $context = [])
    {
        $path = "/tickets/".rawurlencode($input->getTicketId())."/open";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.judge.Judge/OpenTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, OpenTicketOutput::class, $context);
    }

    /**
     * ReadTicket marks ticket as read by participant (sets is_read flag to true).
     *
     * @param ReadTicketInput $input message
     * @param array $context request parameters
     *
     * @return ReadTicketOutput output message
     */
    public function ReadTicket(ReadTicketInput $input, array $context = [])
    {
        $path = "/tickets/".rawurlencode($input->getTicketId())."/read";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.judge.Judge/ReadTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ReadTicketOutput::class, $context);
    }

    /**
     * @param DeleteTicketInput $input message
     * @param array $context request parameters
     *
     * @return DeleteTicketOutput output message
     */
    public function DeleteTicket(DeleteTicketInput $input, array $context = [])
    {
        $path = "/tickets/".rawurlencode($input->getTicketId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.judge.Judge/DeleteTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteTicketOutput::class, $context);
    }

    /**
     * @param DescribeTicketInput $input message
     * @param array $context request parameters
     *
     * @return DescribeTicketOutput output message
     */
    public function DescribeTicket(DescribeTicketInput $input, array $context = [])
    {
        $path = "/tickets/".rawurlencode($input->getTicketId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.judge.Judge/DescribeTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeTicketOutput::class, $context);
    }

    /**
     * ListTickets fetches tickets matching criteria in the input parameter.
     *
     * @param ListTicketsInput $input message
     * @param array $context request parameters
     *
     * @return ListTicketsOutput output message
     */
    public function ListTickets(ListTicketsInput $input, array $context = [])
    {
        $path = "/tickets";

        $context['name'] = "eolymp.judge.Judge/ListTickets";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListTicketsOutput::class, $context);
    }

    /**
     * ReplyTicket allows to add reply to a ticket. If reply is added by participant it sets is_read and needs_reply to
     * true, otherwise, if reply added by contest administrator, this method sets these flags to false.
     *
     * @param ReplyTicketInput $input message
     * @param array $context request parameters
     *
     * @return ReplyTicketOutput output message
     */
    public function ReplyTicket(ReplyTicketInput $input, array $context = [])
    {
        $path = "/tickets/".rawurlencode($input->getTicketId())."/replies";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.judge.Judge/ReplyTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ReplyTicketOutput::class, $context);
    }

    /**
     * ListReplies fetches replies for a particular ticket.
     *
     * @param ListRepliesInput $input message
     * @param array $context request parameters
     *
     * @return ListRepliesOutput output message
     */
    public function ListReplies(ListRepliesInput $input, array $context = [])
    {
        $path = "/tickets/".rawurlencode($input->getTicketId())."/replies";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.judge.Judge/ListReplies";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListRepliesOutput::class, $context);
    }

    /**
     * DeleteReply allows author to delete his own reply.
     *
     * @param DeleteReplyInput $input message
     * @param array $context request parameters
     *
     * @return DeleteReplyOutput output message
     */
    public function DeleteReply(DeleteReplyInput $input, array $context = [])
    {
        $path = "/tickets/".rawurlencode($input->getTicketId())."/replies/".rawurlencode($input->getReplyId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");
        $input->setReplyId("");

        $context['name'] = "eolymp.judge.Judge/DeleteReply";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteReplyOutput::class, $context);
    }

    /**
     * UpdateReply allows author to update his own reply.
     *
     * @param UpdateReplyInput $input message
     * @param array $context request parameters
     *
     * @return UpdateReplyOutput output message
     */
    public function UpdateReply(UpdateReplyInput $input, array $context = [])
    {
        $path = "/tickets/".rawurlencode($input->getTicketId())."/replies/".rawurlencode($input->getReplyId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");
        $input->setReplyId("");

        $context['name'] = "eolymp.judge.Judge/UpdateReply";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateReplyOutput::class, $context);
    }

    /**
     * Create announcement for a contest
     *
     * @param CreateAnnouncementInput $input message
     * @param array $context request parameters
     *
     * @return CreateAnnouncementOutput output message
     */
    public function CreateAnnouncement(CreateAnnouncementInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/announcements";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/CreateAnnouncement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateAnnouncementOutput::class, $context);
    }

    /**
     * Update existing announcement in a contest
     *
     * @param UpdateAnnouncementInput $input message
     * @param array $context request parameters
     *
     * @return UpdateAnnouncementOutput output message
     */
    public function UpdateAnnouncement(UpdateAnnouncementInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/announcements/".rawurlencode($input->getAnnouncementId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setAnnouncementId("");

        $context['name'] = "eolymp.judge.Judge/UpdateAnnouncement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateAnnouncementOutput::class, $context);
    }

    /**
     * Delete announcement
     *
     * @param DeleteAnnouncementInput $input message
     * @param array $context request parameters
     *
     * @return DeleteAnnouncementOutput output message
     */
    public function DeleteAnnouncement(DeleteAnnouncementInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/announcements/".rawurlencode($input->getAnnouncementId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setAnnouncementId("");

        $context['name'] = "eolymp.judge.Judge/DeleteAnnouncement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteAnnouncementOutput::class, $context);
    }

    /**
     * Mark announcement as read by authenticated participant
     *
     * @param ReadAnnouncementInput $input message
     * @param array $context request parameters
     *
     * @return ReadAnnouncementOutput output message
     */
    public function ReadAnnouncement(ReadAnnouncementInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/announcements/".rawurlencode($input->getAnnouncementId())."/read";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setAnnouncementId("");

        $context['name'] = "eolymp.judge.Judge/ReadAnnouncement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ReadAnnouncementOutput::class, $context);
    }

    /**
     * Describe announcement
     *
     * @param DescribeAnnouncementInput $input message
     * @param array $context request parameters
     *
     * @return DescribeAnnouncementOutput output message
     */
    public function DescribeAnnouncement(DescribeAnnouncementInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/announcements/".rawurlencode($input->getAnnouncementId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setAnnouncementId("");

        $context['name'] = "eolymp.judge.Judge/DescribeAnnouncement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeAnnouncementOutput::class, $context);
    }

    /**
     * Describe announcement status
     *
     * @param DescribeAnnouncementStatusInput $input message
     * @param array $context request parameters
     *
     * @return DescribeAnnouncementStatusOutput output message
     */
    public function DescribeAnnouncementStatus(DescribeAnnouncementStatusInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/announcements/".rawurlencode($input->getAnnouncementId())."/status";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setAnnouncementId("");

        $context['name'] = "eolymp.judge.Judge/DescribeAnnouncementStatus";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeAnnouncementStatusOutput::class, $context);
    }

    /**
     * List announcements of a contest
     *
     * @param ListAnnouncementsInput $input message
     * @param array $context request parameters
     *
     * @return ListAnnouncementsOutput output message
     */
    public function ListAnnouncements(ListAnnouncementsInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/announcements";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/ListAnnouncements";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListAnnouncementsOutput::class, $context);
    }

    /**
     * @param IntrospectScoreInput $input message
     * @param array $context request parameters
     *
     * @return IntrospectScoreOutput output message
     */
    public function IntrospectScore(IntrospectScoreInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/introspect/score";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/IntrospectScore";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, IntrospectScoreOutput::class, $context);
    }

    /**
     * @param DescribeScoreInput $input message
     * @param array $context request parameters
     *
     * @return DescribeScoreOutput output message
     */
    public function DescribeScore(DescribeScoreInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/participants/".rawurlencode($input->getParticipantId())."/score";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.Judge/DescribeScore";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeScoreOutput::class, $context);
    }

    /**
     * ImportScore for ghost participants
     *
     * @param ImportScoreInput $input message
     * @param array $context request parameters
     *
     * @return ImportScoreOutput output message
     */
    public function ImportScore(ImportScoreInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/participants/".rawurlencode($input->getParticipantId())."/scores";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");
        $input->setParticipantId("");

        $context['name'] = "eolymp.judge.Judge/ImportScore";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ImportScoreOutput::class, $context);
    }

    /**
     * ListResult retrieves scoreboard
     *
     * @param ListResultInput $input message
     * @param array $context request parameters
     *
     * @return ListResultOutput output message
     */
    public function ListResult(ListResultInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/results";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/ListResult";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListResultOutput::class, $context);
    }

    /**
     * Rebuild scoreboard
     *
     * @param RebuildScoreInput $input message
     * @param array $context request parameters
     *
     * @return RebuildScoreOutput output message
     */
    public function RebuildScore(RebuildScoreInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/rebuild";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/RebuildScore";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, RebuildScoreOutput::class, $context);
    }

    /**
     * Lists entitlements granted to authenticated user.
     *
     * @param ListEntitlementsInput $input message
     * @param array $context request parameters
     *
     * @return ListEntitlementsOutput output message
     */
    public function ListEntitlements(ListEntitlementsInput $input, array $context = [])
    {
        $path = "/__judge/entitlements";

        $context['name'] = "eolymp.judge.Judge/ListEntitlements";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListEntitlementsOutput::class, $context);
    }

    /**
     * @param ListActivitiesInput $input message
     * @param array $context request parameters
     *
     * @return ListActivitiesOutput output message
     */
    public function ListActivities(ListActivitiesInput $input, array $context = [])
    {
        $path = "/contests/".rawurlencode($input->getContestId())."/activities";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setContestId("");

        $context['name'] = "eolymp.judge.Judge/ListActivities";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListActivitiesOutput::class, $context);
    }

}
