<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Judge;

class AnnouncementServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * Create announcement for a contest
     *
     * @param CreateAnnouncementInput $input message
     * @param array $context request parameters
     *
     * @return CreateAnnouncementOutput output message
     */
    public function CreateAnnouncement(CreateAnnouncementInput $input, array $context = [])
    {
        $path = "/announcements";

        $context['name'] = "eolymp.judge.AnnouncementService/CreateAnnouncement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateAnnouncementOutput::class, $context);
    }

    /**
     * Update existing announcement in a contest
     *
     * @param UpdateAnnouncementInput $input message
     * @param array $context request parameters
     *
     * @return UpdateAnnouncementOutput output message
     */
    public function UpdateAnnouncement(UpdateAnnouncementInput $input, array $context = [])
    {
        $path = "/announcements/".rawurlencode($input->getAnnouncementId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAnnouncementId("");

        $context['name'] = "eolymp.judge.AnnouncementService/UpdateAnnouncement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateAnnouncementOutput::class, $context);
    }

    /**
     * Delete announcement
     *
     * @param DeleteAnnouncementInput $input message
     * @param array $context request parameters
     *
     * @return DeleteAnnouncementOutput output message
     */
    public function DeleteAnnouncement(DeleteAnnouncementInput $input, array $context = [])
    {
        $path = "/announcements/".rawurlencode($input->getAnnouncementId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAnnouncementId("");

        $context['name'] = "eolymp.judge.AnnouncementService/DeleteAnnouncement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteAnnouncementOutput::class, $context);
    }

    /**
     * Mark announcement as read by authenticated participant
     *
     * @param ReadAnnouncementInput $input message
     * @param array $context request parameters
     *
     * @return ReadAnnouncementOutput output message
     */
    public function ReadAnnouncement(ReadAnnouncementInput $input, array $context = [])
    {
        $path = "/announcements/".rawurlencode($input->getAnnouncementId())."/read";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAnnouncementId("");

        $context['name'] = "eolymp.judge.AnnouncementService/ReadAnnouncement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ReadAnnouncementOutput::class, $context);
    }

    /**
     * Describe announcement
     *
     * @param DescribeAnnouncementInput $input message
     * @param array $context request parameters
     *
     * @return DescribeAnnouncementOutput output message
     */
    public function DescribeAnnouncement(DescribeAnnouncementInput $input, array $context = [])
    {
        $path = "/announcements/".rawurlencode($input->getAnnouncementId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAnnouncementId("");

        $context['name'] = "eolymp.judge.AnnouncementService/DescribeAnnouncement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeAnnouncementOutput::class, $context);
    }

    /**
     * Describe announcement status
     *
     * @param DescribeAnnouncementStatusInput $input message
     * @param array $context request parameters
     *
     * @return DescribeAnnouncementStatusOutput output message
     */
    public function DescribeAnnouncementStatus(DescribeAnnouncementStatusInput $input, array $context = [])
    {
        $path = "/announcements/".rawurlencode($input->getAnnouncementId())."/status";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAnnouncementId("");

        $context['name'] = "eolymp.judge.AnnouncementService/DescribeAnnouncementStatus";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeAnnouncementStatusOutput::class, $context);
    }

    /**
     * List announcements of a contest
     *
     * @param ListAnnouncementsInput $input message
     * @param array $context request parameters
     *
     * @return ListAnnouncementsOutput output message
     */
    public function ListAnnouncements(ListAnnouncementsInput $input, array $context = [])
    {
        $path = "/announcements";

        $context['name'] = "eolymp.judge.AnnouncementService/ListAnnouncements";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListAnnouncementsOutput::class, $context);
    }

}
