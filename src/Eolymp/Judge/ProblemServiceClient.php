<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Judge;

class ProblemServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * ImportProblem from Atlas (problem catalog)
     *
     * @param ImportProblemInput $input message
     * @param array $context request parameters
     *
     * @return ImportProblemOutput output message
     */
    public function ImportProblem(ImportProblemInput $input, array $context = [])
    {
        $path = "/problems";

        $context['name'] = "eolymp.judge.ProblemService/ImportProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ImportProblemOutput::class, $context);
    }

    /**
     * SyncProblem with Atlas (problem catalog)
     *
     * @param SyncProblemInput $input message
     * @param array $context request parameters
     *
     * @return SyncProblemOutput output message
     */
    public function SyncProblem(SyncProblemInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId())."/sync";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.ProblemService/SyncProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, SyncProblemOutput::class, $context);
    }

    /**
     * @param UpdateProblemInput $input message
     * @param array $context request parameters
     *
     * @return UpdateProblemOutput output message
     */
    public function UpdateProblem(UpdateProblemInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.ProblemService/UpdateProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateProblemOutput::class, $context);
    }

    /**
     * @param ListProblemsInput $input message
     * @param array $context request parameters
     *
     * @return ListProblemsOutput output message
     */
    public function ListProblems(ListProblemsInput $input, array $context = [])
    {
        $path = "/problems";

        $context['name'] = "eolymp.judge.ProblemService/ListProblems";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListProblemsOutput::class, $context);
    }

    /**
     * @param DescribeProblemInput $input message
     * @param array $context request parameters
     *
     * @return DescribeProblemOutput output message
     */
    public function DescribeProblem(DescribeProblemInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.ProblemService/DescribeProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeProblemOutput::class, $context);
    }

    /**
     * @param DeleteProblemInput $input message
     * @param array $context request parameters
     *
     * @return DeleteProblemOutput output message
     */
    public function DeleteProblem(DeleteProblemInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.ProblemService/DeleteProblem";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteProblemOutput::class, $context);
    }

    /**
     * Lookup template for a given runtime/language
     *
     * @param LookupCodeTemplateInput $input message
     * @param array $context request parameters
     *
     * @return LookupCodeTemplateOutput output message
     */
    public function LookupCodeTemplate(LookupCodeTemplateInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId())."/lookup-template";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.ProblemService/LookupCodeTemplate";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, LookupCodeTemplateOutput::class, $context);
    }

    /**
     * Return code template for problem
     *
     * @param DescribeCodeTemplateInput $input message
     * @param array $context request parameters
     *
     * @return DescribeCodeTemplateOutput output message
     */
    public function DescribeCodeTemplate(DescribeCodeTemplateInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId())."/templates/".rawurlencode($input->getTemplateId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");
        $input->setTemplateId("");

        $context['name'] = "eolymp.judge.ProblemService/DescribeCodeTemplate";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeCodeTemplateOutput::class, $context);
    }

    /**
     * @param ListStatementsInput $input message
     * @param array $context request parameters
     *
     * @return ListStatementsOutput output message
     */
    public function ListStatements(ListStatementsInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId())."/statements";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.ProblemService/ListStatements";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListStatementsOutput::class, $context);
    }

    /**
     * @param ListAttachmentsInput $input message
     * @param array $context request parameters
     *
     * @return ListAttachmentsOutput output message
     */
    public function ListAttachments(ListAttachmentsInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId())."/attachments";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.ProblemService/ListAttachments";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListAttachmentsOutput::class, $context);
    }

    /**
     * @param ListExamplesInput $input message
     * @param array $context request parameters
     *
     * @return ListExamplesOutput output message
     */
    public function ListExamples(ListExamplesInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId())."/examples";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.ProblemService/ListExamples";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListExamplesOutput::class, $context);
    }

    /**
     * @param ListRuntimesInput $input message
     * @param array $context request parameters
     *
     * @return ListRuntimesOutput output message
     */
    public function ListRuntimes(ListRuntimesInput $input, array $context = [])
    {
        $path = "/problems/".rawurlencode($input->getProblemId())."/runtime";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setProblemId("");

        $context['name'] = "eolymp.judge.ProblemService/ListRuntimes";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListRuntimesOutput::class, $context);
    }

}
