<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/judge/participant_service.proto

namespace Eolymp\Judge\ListParticipantsInput;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.judge.ListParticipantsInput.Sortable</code>
 */
class Sortable
{
    /**
     * Generated from protobuf enum <code>RANK = 0;</code>
     */
    const RANK = 0;
    /**
     * Generated from protobuf enum <code>SCORE = 1;</code>
     */
    const SCORE = 1;
    /**
     * Generated from protobuf enum <code>PENALTY = 2;</code>
     */
    const PENALTY = 2;
    /**
     * Generated from protobuf enum <code>STARTED_AT = 3;</code>
     */
    const STARTED_AT = 3;
    /**
     * Generated from protobuf enum <code>COMPLETE_AT = 4;</code>
     */
    const COMPLETE_AT = 4;

    private static $valueToName = [
        self::RANK => 'RANK',
        self::SCORE => 'SCORE',
        self::PENALTY => 'PENALTY',
        self::STARTED_AT => 'STARTED_AT',
        self::COMPLETE_AT => 'COMPLETE_AT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Sortable::class, \Eolymp\Judge\ListParticipantsInput_Sortable::class);

