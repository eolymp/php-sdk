<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Judge;

class PasscodeServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * Verify if passcode is required for the contest and if authenticated token has entered the passcode.
     *
     * @param VerifyPasscodeInput $input message
     * @param array $context request parameters
     *
     * @return VerifyPasscodeOutput output message
     */
    public function VerifyPasscode(VerifyPasscodeInput $input, array $context = [])
    {
        $path = "/verify-passcode";

        $context['name'] = "eolymp.judge.PasscodeService/VerifyPasscode";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, VerifyPasscodeOutput::class, $context);
    }

    /**
     * Enter passcode marks current session as one authenticated by passcode.
     *
     * @param EnterPasscodeInput $input message
     * @param array $context request parameters
     *
     * @return EnterPasscodeOutput output message
     */
    public function EnterPasscode(EnterPasscodeInput $input, array $context = [])
    {
        $path = "/enter-passcode";

        $context['name'] = "eolymp.judge.PasscodeService/EnterPasscode";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, EnterPasscodeOutput::class, $context);
    }

    /**
     * Set a new passcode to the participant, if passcode was not set it will be now required
     *
     * @param ResetPasscodeInput $input message
     * @param array $context request parameters
     *
     * @return ResetPasscodeOutput output message
     */
    public function ResetPasscode(ResetPasscodeInput $input, array $context = [])
    {
        $path = "/participants/".rawurlencode($input->getMemberId())."/passcode";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");

        $context['name'] = "eolymp.judge.PasscodeService/ResetPasscode";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ResetPasscodeOutput::class, $context);
    }

    /**
     * Set a new passcode to the participant, if passcode was not set it will be now required
     *
     * @param SetPasscodeInput $input message
     * @param array $context request parameters
     *
     * @return SetPasscodeOutput output message
     */
    public function SetPasscode(SetPasscodeInput $input, array $context = [])
    {
        $path = "/participants/".rawurlencode($input->getMemberId())."/passcode";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");

        $context['name'] = "eolymp.judge.PasscodeService/SetPasscode";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, SetPasscodeOutput::class, $context);
    }

    /**
     * Remove passcode from participant and allow her to enter contest without passcode.
     *
     * @param RemovePasscodeInput $input message
     * @param array $context request parameters
     *
     * @return RemovePasscodeOutput output message
     */
    public function RemovePasscode(RemovePasscodeInput $input, array $context = [])
    {
        $path = "/participants/".rawurlencode($input->getMemberId())."/passcode";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");

        $context['name'] = "eolymp.judge.PasscodeService/RemovePasscode";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, RemovePasscodeOutput::class, $context);
    }

}
