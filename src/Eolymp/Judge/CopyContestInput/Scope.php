<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/judge/contest_service.proto

namespace Eolymp\Judge\CopyContestInput;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.judge.CopyContestInput.Scope</code>
 */
class Scope
{
    /**
     * Generated from protobuf enum <code>ALL = 0;</code>
     */
    const ALL = 0;
    /**
     * scoreboard, appearance, environment etc
     *
     * Generated from protobuf enum <code>CONFIGURATION = 1;</code>
     */
    const CONFIGURATION = 1;
    /**
     * problems
     *
     * Generated from protobuf enum <code>PROBLEMS = 2;</code>
     */
    const PROBLEMS = 2;
    /**
     * participants (without results)
     *
     * Generated from protobuf enum <code>PARTICIPANTS = 3;</code>
     */
    const PARTICIPANTS = 3;
    /**
     * permissions
     *
     * Generated from protobuf enum <code>PERMISSIONS = 4;</code>
     */
    const PERMISSIONS = 4;

    private static $valueToName = [
        self::ALL => 'ALL',
        self::CONFIGURATION => 'CONFIGURATION',
        self::PROBLEMS => 'PROBLEMS',
        self::PARTICIPANTS => 'PARTICIPANTS',
        self::PERMISSIONS => 'PERMISSIONS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Scope::class, \Eolymp\Judge\CopyContestInput_Scope::class);

