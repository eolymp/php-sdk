<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: eolymp/judge/participant.proto

namespace Eolymp\Judge\Participant\Patch;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.judge.Participant.Patch.Field</code>
 */
class Field
{
    /**
     * Generated from protobuf enum <code>ALL = 0;</code>
     */
    const ALL = 0;
    /**
     * Generated from protobuf enum <code>DISPLAY_NAME = 1;</code>
     */
    const DISPLAY_NAME = 1;
    /**
     * Generated from protobuf enum <code>ROLE = 8;</code>
     */
    const ROLE = 8;
    /**
     * Generated from protobuf enum <code>BONUS_TIME = 3;</code>
     */
    const BONUS_TIME = 3;
    /**
     * Generated from protobuf enum <code>UNOFFICIAL = 4;</code>
     */
    const UNOFFICIAL = 4;
    /**
     * Generated from protobuf enum <code>MEDAL = 5;</code>
     */
    const MEDAL = 5;
    /**
     * Generated from protobuf enum <code>INACTIVE = 6;</code>
     */
    const INACTIVE = 6;
    /**
     * Generated from protobuf enum <code>PASSCODE = 7;</code>
     */
    const PASSCODE = 7;

    private static $valueToName = [
        self::ALL => 'ALL',
        self::DISPLAY_NAME => 'DISPLAY_NAME',
        self::ROLE => 'ROLE',
        self::BONUS_TIME => 'BONUS_TIME',
        self::UNOFFICIAL => 'UNOFFICIAL',
        self::MEDAL => 'MEDAL',
        self::INACTIVE => 'INACTIVE',
        self::PASSCODE => 'PASSCODE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

