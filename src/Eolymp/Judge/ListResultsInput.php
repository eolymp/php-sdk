<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/judge/score_service.proto

namespace Eolymp\Judge;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>eolymp.judge.ListResultsInput</code>
 */
class ListResultsInput extends \Google\Protobuf\Internal\Message
{
    /**
     * Mode for fetching score value (see enum description).
     *
     * Generated from protobuf field <code>.eolymp.judge.Score.FetchingMode mode = 1;</code>
     */
    protected $mode = 0;
    /**
     * Time offset allows to fetch score at particular moment in the competition. Time offset is specified as number of
     * seconds since the participant has started the competition. When time offset is 0, the latest score is returned.
     * This value is ignored if mode is not PUNCTUAL.
     *
     * Generated from protobuf field <code>int32 time_offset = 2;</code>
     */
    protected $time_offset = 0;
    /**
     * Only return results for a single round
     *
     * Generated from protobuf field <code>string round_id = 4;</code>
     */
    protected $round_id = '';
    /**
     * Number of results per page, (max. 100, default 100)
     *
     * Generated from protobuf field <code>int32 size = 10;</code>
     */
    protected $size = 0;
    /**
     * Cursor for fetching next page
     *
     * Generated from protobuf field <code>string after = 11;</code>
     */
    protected $after = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $mode
     *           Mode for fetching score value (see enum description).
     *     @type int $time_offset
     *           Time offset allows to fetch score at particular moment in the competition. Time offset is specified as number of
     *           seconds since the participant has started the competition. When time offset is 0, the latest score is returned.
     *           This value is ignored if mode is not PUNCTUAL.
     *     @type string $round_id
     *           Only return results for a single round
     *     @type int $size
     *           Number of results per page, (max. 100, default 100)
     *     @type string $after
     *           Cursor for fetching next page
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Judge\ScoreService::initOnce();
        parent::__construct($data);
    }

    /**
     * Mode for fetching score value (see enum description).
     *
     * Generated from protobuf field <code>.eolymp.judge.Score.FetchingMode mode = 1;</code>
     * @return int
     */
    public function getMode()
    {
        return $this->mode;
    }

    /**
     * Mode for fetching score value (see enum description).
     *
     * Generated from protobuf field <code>.eolymp.judge.Score.FetchingMode mode = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setMode($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Judge\Score\FetchingMode::class);
        $this->mode = $var;

        return $this;
    }

    /**
     * Time offset allows to fetch score at particular moment in the competition. Time offset is specified as number of
     * seconds since the participant has started the competition. When time offset is 0, the latest score is returned.
     * This value is ignored if mode is not PUNCTUAL.
     *
     * Generated from protobuf field <code>int32 time_offset = 2;</code>
     * @return int
     */
    public function getTimeOffset()
    {
        return $this->time_offset;
    }

    /**
     * Time offset allows to fetch score at particular moment in the competition. Time offset is specified as number of
     * seconds since the participant has started the competition. When time offset is 0, the latest score is returned.
     * This value is ignored if mode is not PUNCTUAL.
     *
     * Generated from protobuf field <code>int32 time_offset = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setTimeOffset($var)
    {
        GPBUtil::checkInt32($var);
        $this->time_offset = $var;

        return $this;
    }

    /**
     * Only return results for a single round
     *
     * Generated from protobuf field <code>string round_id = 4;</code>
     * @return string
     */
    public function getRoundId()
    {
        return $this->round_id;
    }

    /**
     * Only return results for a single round
     *
     * Generated from protobuf field <code>string round_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setRoundId($var)
    {
        GPBUtil::checkString($var, True);
        $this->round_id = $var;

        return $this;
    }

    /**
     * Number of results per page, (max. 100, default 100)
     *
     * Generated from protobuf field <code>int32 size = 10;</code>
     * @return int
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * Number of results per page, (max. 100, default 100)
     *
     * Generated from protobuf field <code>int32 size = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->size = $var;

        return $this;
    }

    /**
     * Cursor for fetching next page
     *
     * Generated from protobuf field <code>string after = 11;</code>
     * @return string
     */
    public function getAfter()
    {
        return $this->after;
    }

    /**
     * Cursor for fetching next page
     *
     * Generated from protobuf field <code>string after = 11;</code>
     * @param string $var
     * @return $this
     */
    public function setAfter($var)
    {
        GPBUtil::checkString($var, True);
        $this->after = $var;

        return $this;
    }

}

