<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Acl;

class AclClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param GrantPermissionInput $input message
     * @param array $context request parameters
     *
     * @return GrantPermissionOutput output message
     */
    public function GrantPermission(GrantPermissionInput $input, array $context = [])
    {
        $path = "/acl/".rawurlencode($input->getUserId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setUserId("");

        $context['name'] = "eolymp.acl.Acl/GrantPermission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, GrantPermissionOutput::class, $context);
    }

    /**
     * @param RevokePermissionInput $input message
     * @param array $context request parameters
     *
     * @return RevokePermissionOutput output message
     */
    public function RevokePermission(RevokePermissionInput $input, array $context = [])
    {
        $path = "/acl/".rawurlencode($input->getUserId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setUserId("");

        $context['name'] = "eolymp.acl.Acl/RevokePermission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, RevokePermissionOutput::class, $context);
    }

    /**
     * @param DescribePermissionInput $input message
     * @param array $context request parameters
     *
     * @return DescribePermissionOutput output message
     */
    public function DescribePermission(DescribePermissionInput $input, array $context = [])
    {
        $path = "/acl/".rawurlencode($input->getUserId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setUserId("");

        $context['name'] = "eolymp.acl.Acl/DescribePermission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribePermissionOutput::class, $context);
    }

    /**
     * @param ListPermissionInput $input message
     * @param array $context request parameters
     *
     * @return ListPermissionOutput output message
     */
    public function ListPermission(ListPermissionInput $input, array $context = [])
    {
        $path = "/acl";

        $context['name'] = "eolymp.acl.Acl/ListPermission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListPermissionOutput::class, $context);
    }

    /**
     * @param IntrospectPermissionInput $input message
     * @param array $context request parameters
     *
     * @return IntrospectPermissionOutput output message
     */
    public function IntrospectPermission(IntrospectPermissionInput $input, array $context = [])
    {
        $path = "/whoami";

        $context['name'] = "eolymp.acl.Acl/IntrospectPermission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, IntrospectPermissionOutput::class, $context);
    }

}
