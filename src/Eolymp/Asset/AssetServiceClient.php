<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Asset;

class AssetServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * deprecated, use universal UploadAsset API instead
     *
     * @param UploadImageInput $input message
     * @param array $context request parameters
     *
     * @return UploadImageOutput output message
     */
    public function UploadImage(UploadImageInput $input, array $context = [])
    {
        $path = "/assets/images";

        $context['name'] = "eolymp.asset.AssetService/UploadImage";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UploadImageOutput::class, $context);
    }

    /**
     * deprecated, use universal UploadAsset API instead
     *
     * @param UploadFileInput $input message
     * @param array $context request parameters
     *
     * @return UploadFileOutput output message
     */
    public function UploadFile(UploadFileInput $input, array $context = [])
    {
        $path = "/assets/files";

        $context['name'] = "eolymp.asset.AssetService/UploadFile";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UploadFileOutput::class, $context);
    }

    /**
     * UploadAsset allows to upload a file under 5 MB, files over 5MB must be uploaded using multipart upload API
     *
     * @param UploadAssetInput $input message
     * @param array $context request parameters
     *
     * @return UploadAssetOutput output message
     */
    public function UploadAsset(UploadAssetInput $input, array $context = [])
    {
        $path = "/assets";

        $context['name'] = "eolymp.asset.AssetService/UploadAsset";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UploadAssetOutput::class, $context);
    }

    /**
     * LookupAsset allows to lookup asset by the key
     *
     * @param LookupAssetInput $input message
     * @param array $context request parameters
     *
     * @return LookupAssetOutput output message
     */
    public function LookupAsset(LookupAssetInput $input, array $context = [])
    {
        $path = "/assets:lookup";

        $context['name'] = "eolymp.asset.AssetService/LookupAsset";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, LookupAssetOutput::class, $context);
    }

    /**
     * StartMultipartUpload creates an upload_id, which then can be used with UploadPart API to upload file in parts of 5MB
     *
     * @param StartMultipartUploadInput $input message
     * @param array $context request parameters
     *
     * @return StartMultipartUploadOutput output message
     */
    public function StartMultipartUpload(StartMultipartUploadInput $input, array $context = [])
    {
        $path = "/uploads";

        $context['name'] = "eolymp.asset.AssetService/StartMultipartUpload";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, StartMultipartUploadOutput::class, $context);
    }

    /**
     * UploadPart of a file, before calling this method you must start upload process using StartMultipartUpload API, once
     * all parts are uploaded you must call CompleteMultipartUpload to finalize upload process and get asset_url.
     * Every part, except last one, must be 5MB. You can use from 1 to 1000 parts per upload.
     *
     * @param UploadPartInput $input message
     * @param array $context request parameters
     *
     * @return UploadPartOutput output message
     */
    public function UploadPart(UploadPartInput $input, array $context = [])
    {
        $path = "/uploads/".rawurlencode($input->getUploadId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setUploadId("");

        $context['name'] = "eolymp.asset.AssetService/UploadPart";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UploadPartOutput::class, $context);
    }

    /**
     * CompleteMultipartUpload finalizes upload process and generates asset_url.
     *
     * @param CompleteMultipartUploadInput $input message
     * @param array $context request parameters
     *
     * @return CompleteMultipartUploadOutput output message
     */
    public function CompleteMultipartUpload(CompleteMultipartUploadInput $input, array $context = [])
    {
        $path = "/uploads/".rawurlencode($input->getUploadId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setUploadId("");

        $context['name'] = "eolymp.asset.AssetService/CompleteMultipartUpload";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, CompleteMultipartUploadOutput::class, $context);
    }

    /**
     * StartStream creates a data stream, which then can be used with AppendStream API to upload data
     *
     * @param StartStreamInput $input message
     * @param array $context request parameters
     *
     * @return StartStreamOutput output message
     */
    public function StartStream(StartStreamInput $input, array $context = [])
    {
        $path = "/streams";

        $context['name'] = "eolymp.asset.AssetService/StartStream";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, StartStreamOutput::class, $context);
    }

    /**
     * @param AppendStreamInput $input message
     * @param array $context request parameters
     *
     * @return AppendStreamOutput output message
     */
    public function AppendStream(AppendStreamInput $input, array $context = [])
    {
        $path = "/streams/".rawurlencode($input->getStreamId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setStreamId("");

        $context['name'] = "eolymp.asset.AssetService/AppendStream";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, AppendStreamOutput::class, $context);
    }

    /**
     * @param CloseStreamInput $input message
     * @param array $context request parameters
     *
     * @return CloseStreamOutput output message
     */
    public function CloseStream(CloseStreamInput $input, array $context = [])
    {
        $path = "/streams/".rawurlencode($input->getStreamId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setStreamId("");

        $context['name'] = "eolymp.asset.AssetService/CloseStream";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, CloseStreamOutput::class, $context);
    }

}
