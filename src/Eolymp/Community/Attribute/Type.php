<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/community/attribute.proto

namespace Eolymp\Community\Attribute;

use UnexpectedValueException;

/**
 * Field type defines looks and type of the data for the field.
 *
 * Protobuf type <code>eolymp.community.Attribute.Type</code>
 */
class Type
{
    /**
     * Generated from protobuf enum <code>UNKNOWN = 0;</code>
     */
    const UNKNOWN = 0;
    /**
     * Single line of text.
     * Validation:
     *  - required - string must be non-empty
     *  - min - minimal string length
     *  - max - maximal string length
     *  - regexp - regular expression (RE2) which string must match completely (add .* to configure partial match)
     *
     * Generated from protobuf enum <code>STRING = 1;</code>
     */
    const STRING = 1;
    /**
     * Multiline text.
     * Validation:
     *  - required - text must be non-empty
     *  - min - minimal text length
     *  - max - maximal text length
     *  - regexp - regular expression (RE2)
     *
     * Generated from protobuf enum <code>TEXT = 2;</code>
     */
    const TEXT = 2;
    /**
     * An integer number.
     * Validation:
     *  - required - field must be non-empty (0 is considered non-empty value)
     *  - min - minimal value
     *  - max - maximal value
     *
     * Generated from protobuf enum <code>NUMBER = 3;</code>
     */
    const NUMBER = 3;
    /**
     * Choice, a dropdown with options.
     * Validation:
     *  - required - field must be non-empty
     *  - choices - available values
     *
     * Generated from protobuf enum <code>CHOICE = 4;</code>
     */
    const CHOICE = 4;
    /**
     * Date picker.
     * Validation:
     *  - required - field must be non-empty
     *
     * Generated from protobuf enum <code>DATE = 5;</code>
     */
    const DATE = 5;
    /**
     * Email.
     * Validation:
     *  - required - field must be non-empty
     *
     * Generated from protobuf enum <code>EMAIL = 6;</code>
     */
    const EMAIL = 6;
    /**
     * Checkbox gives simple yes/no value.
     * Validation:
     *  - required - field must be checked
     *
     * Generated from protobuf enum <code>CHECKBOX = 7;</code>
     */
    const CHECKBOX = 7;
    /**
     * Country value.
     * Validation:
     *  - required - field must be non-empty
     *
     * Generated from protobuf enum <code>COUNTRY = 8;</code>
     */
    const COUNTRY = 8;
    /**
     * Country and Region value.
     * Validation:
     *  - required  - field must be non-empty
     *  - countries - region must belong to a specific country
     *
     * Generated from protobuf enum <code>REGION = 9;</code>
     */
    const REGION = 9;
    /**
     * Country and Region value.
     * Validation:
     *  - required  - field must be non-empty
     * Constraints:
     *  - governance:public
     *  - governance:private
     *  - governance:charter
     *  - level:preschool
     *  - level:primary
     *  - level:secondary
     *  - level:tertiary
     *  - country:[two-letter]
     *
     * Generated from protobuf enum <code>INSTITUTION = 10;</code>
     */
    const INSTITUTION = 10;
    /**
     * An image as a URL to eolympusercontent.com.
     * Validation:
     *  - required - field must be non-empty
     *  - max      - maximal file size in bytes
     *  - min      - minimal file size in bytes
     * Constraints:
     *  - type:[mime-type]]
     *
     * Generated from protobuf enum <code>IMAGE = 11;</code>
     */
    const IMAGE = 11;
    /**
     * A file value as a URL to eolympusercontent.com.
     * Validation:
     *  - required - field must be non-empty
     *  - max      - maximal file size in bytes
     *  - min      - minimal file size in bytes
     * Constraints:
     *  - type:[mime-type]]
     *
     * Generated from protobuf enum <code>FILE = 12;</code>
     */
    const FILE = 12;

    private static $valueToName = [
        self::UNKNOWN => 'UNKNOWN',
        self::STRING => 'STRING',
        self::TEXT => 'TEXT',
        self::NUMBER => 'NUMBER',
        self::CHOICE => 'CHOICE',
        self::DATE => 'DATE',
        self::EMAIL => 'EMAIL',
        self::CHECKBOX => 'CHECKBOX',
        self::COUNTRY => 'COUNTRY',
        self::REGION => 'REGION',
        self::INSTITUTION => 'INSTITUTION',
        self::IMAGE => 'IMAGE',
        self::FILE => 'FILE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Type::class, \Eolymp\Community\Attribute_Type::class);

