<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Community;

class RankingServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateRankingEventInput $input message
     * @param array $context request parameters
     *
     * @return CreateRankingEventOutput output message
     */
    public function CreateRankingEvent(CreateRankingEventInput $input, array $context = [])
    {
        $path = "/ranking-events";

        $context['name'] = "eolymp.community.RankingService/CreateRankingEvent";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateRankingEventOutput::class, $context);
    }

    /**
     * @param UpdateRankingEventInput $input message
     * @param array $context request parameters
     *
     * @return UpdateRankingEventOutput output message
     */
    public function UpdateRankingEvent(UpdateRankingEventInput $input, array $context = [])
    {
        $path = "/ranking-events/".rawurlencode($input->getEventId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEventId("");

        $context['name'] = "eolymp.community.RankingService/UpdateRankingEvent";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateRankingEventOutput::class, $context);
    }

    /**
     * @param DeleteRankingEventInput $input message
     * @param array $context request parameters
     *
     * @return DeleteRankingEventOutput output message
     */
    public function DeleteRankingEvent(DeleteRankingEventInput $input, array $context = [])
    {
        $path = "/ranking-events/".rawurlencode($input->getEventId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEventId("");

        $context['name'] = "eolymp.community.RankingService/DeleteRankingEvent";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteRankingEventOutput::class, $context);
    }

    /**
     * @param DescribeRankingEventInput $input message
     * @param array $context request parameters
     *
     * @return DescribeRankingEventOutput output message
     */
    public function DescribeRankingEvent(DescribeRankingEventInput $input, array $context = [])
    {
        $path = "/ranking-events/".rawurlencode($input->getEventId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEventId("");

        $context['name'] = "eolymp.community.RankingService/DescribeRankingEvent";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeRankingEventOutput::class, $context);
    }

    /**
     * @param ListRankingEventsInput $input message
     * @param array $context request parameters
     *
     * @return ListRankingEventsOutput output message
     */
    public function ListRankingEvents(ListRankingEventsInput $input, array $context = [])
    {
        $path = "/ranking-events";

        $context['name'] = "eolymp.community.RankingService/ListRankingEvents";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListRankingEventsOutput::class, $context);
    }

    /**
     * @param UpdateRankingPointInput $input message
     * @param array $context request parameters
     *
     * @return UpdateRankingPointOutput output message
     */
    public function UpdateRankingPoint(UpdateRankingPointInput $input, array $context = [])
    {
        $path = "/ranking-series/".rawurlencode($input->getMemberId())."/points/".rawurlencode($input->getEventId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");
        $input->setEventId("");

        $context['name'] = "eolymp.community.RankingService/UpdateRankingPoint";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateRankingPointOutput::class, $context);
    }

    /**
     * @param DeleteRankingPointInput $input message
     * @param array $context request parameters
     *
     * @return DeleteRankingPointOutput output message
     */
    public function DeleteRankingPoint(DeleteRankingPointInput $input, array $context = [])
    {
        $path = "/ranking-series/".rawurlencode($input->getMemberId())."/points/".rawurlencode($input->getEventId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");
        $input->setEventId("");

        $context['name'] = "eolymp.community.RankingService/DeleteRankingPoint";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteRankingPointOutput::class, $context);
    }

    /**
     * @param DescribeRankingPointInput $input message
     * @param array $context request parameters
     *
     * @return DescribeRankingPointOutput output message
     */
    public function DescribeRankingPoint(DescribeRankingPointInput $input, array $context = [])
    {
        $path = "/ranking-series/".rawurlencode($input->getMemberId())."/points/".rawurlencode($input->getEventId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");
        $input->setEventId("");

        $context['name'] = "eolymp.community.RankingService/DescribeRankingPoint";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeRankingPointOutput::class, $context);
    }

    /**
     * @param ListRankingPointsInput $input message
     * @param array $context request parameters
     *
     * @return ListRankingPointsOutput output message
     */
    public function ListRankingPoints(ListRankingPointsInput $input, array $context = [])
    {
        $path = "/ranking-series/".rawurlencode($input->getMemberId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");

        $context['name'] = "eolymp.community.RankingService/ListRankingPoints";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListRankingPointsOutput::class, $context);
    }

}
