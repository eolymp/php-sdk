<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Community;

class CommunityClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * Add yourself to the space
     *
     * @param JoinSpaceInput $input message
     * @param array $context request parameters
     *
     * @return JoinSpaceOutput output message
     */
    public function JoinSpace(JoinSpaceInput $input, array $context = [])
    {
        $path = "/members/_self";

        $context['name'] = "eolymp.community.Community/JoinSpace";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, JoinSpaceOutput::class, $context);
    }

    /**
     * Remove yourself from the space
     *
     * @param LeaveSpaceInput $input message
     * @param array $context request parameters
     *
     * @return LeaveSpaceOutput output message
     */
    public function LeaveSpace(LeaveSpaceInput $input, array $context = [])
    {
        $path = "/members/_self";

        $context['name'] = "eolymp.community.Community/LeaveSpace";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, LeaveSpaceOutput::class, $context);
    }

    /**
     * Update registration data (attribute values) about yourself
     *
     * @param RegisterMemberInput $input message
     * @param array $context request parameters
     *
     * @return RegisterMemberOutput output message
     */
    public function RegisterMember(RegisterMemberInput $input, array $context = [])
    {
        $path = "/members/_self/attributes";

        $context['name'] = "eolymp.community.Community/RegisterMember";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, RegisterMemberOutput::class, $context);
    }

    /**
     * Introspect member data
     *
     * @param IntrospectMemberInput $input message
     * @param array $context request parameters
     *
     * @return IntrospectMemberOutput output message
     */
    public function IntrospectMember(IntrospectMemberInput $input, array $context = [])
    {
        $path = "/members/_self";

        $context['name'] = "eolymp.community.Community/IntrospectMember";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, IntrospectMemberOutput::class, $context);
    }

    /**
     * @param AddMemberInput $input message
     * @param array $context request parameters
     *
     * @return AddMemberOutput output message
     */
    public function AddMember(AddMemberInput $input, array $context = [])
    {
        $path = "/members";

        $context['name'] = "eolymp.community.Community/AddMember";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, AddMemberOutput::class, $context);
    }

    /**
     * @param UpdateMemberInput $input message
     * @param array $context request parameters
     *
     * @return UpdateMemberOutput output message
     */
    public function UpdateMember(UpdateMemberInput $input, array $context = [])
    {
        $path = "/members/".rawurlencode($input->getMemberId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");

        $context['name'] = "eolymp.community.Community/UpdateMember";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateMemberOutput::class, $context);
    }

    /**
     * @param RemoveMemberInput $input message
     * @param array $context request parameters
     *
     * @return RemoveMemberOutput output message
     */
    public function RemoveMember(RemoveMemberInput $input, array $context = [])
    {
        $path = "/members/".rawurlencode($input->getMemberId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");

        $context['name'] = "eolymp.community.Community/RemoveMember";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, RemoveMemberOutput::class, $context);
    }

    /**
     * @param DescribeMemberInput $input message
     * @param array $context request parameters
     *
     * @return DescribeMemberOutput output message
     */
    public function DescribeMember(DescribeMemberInput $input, array $context = [])
    {
        $path = "/members/".rawurlencode($input->getMemberId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");

        $context['name'] = "eolymp.community.Community/DescribeMember";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeMemberOutput::class, $context);
    }

    /**
     * @param ListMembersInput $input message
     * @param array $context request parameters
     *
     * @return ListMembersOutput output message
     */
    public function ListMembers(ListMembersInput $input, array $context = [])
    {
        $path = "/members";

        $context['name'] = "eolymp.community.Community/ListMembers";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListMembersOutput::class, $context);
    }

    /**
     * @param AddMemberIdentityInput $input message
     * @param array $context request parameters
     *
     * @return AddMemberIdentityOutput output message
     */
    public function AddMemberIdentity(AddMemberIdentityInput $input, array $context = [])
    {
        $path = "/members/".rawurlencode($input->getMemberId())."/identities";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");

        $context['name'] = "eolymp.community.Community/AddMemberIdentity";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, AddMemberIdentityOutput::class, $context);
    }

    /**
     * @param UpdateMemberIdentityInput $input message
     * @param array $context request parameters
     *
     * @return UpdateMemberIdentityOutput output message
     */
    public function UpdateMemberIdentity(UpdateMemberIdentityInput $input, array $context = [])
    {
        $path = "/members/".rawurlencode($input->getMemberId())."/identities/".rawurlencode($input->getIdentityId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");
        $input->setIdentityId("");

        $context['name'] = "eolymp.community.Community/UpdateMemberIdentity";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateMemberIdentityOutput::class, $context);
    }

    /**
     * @param RemoveMemberIdentityInput $input message
     * @param array $context request parameters
     *
     * @return RemoveMemberIdentityOutput output message
     */
    public function RemoveMemberIdentity(RemoveMemberIdentityInput $input, array $context = [])
    {
        $path = "/members/".rawurlencode($input->getMemberId())."/identities/".rawurlencode($input->getIdentityId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");
        $input->setIdentityId("");

        $context['name'] = "eolymp.community.Community/RemoveMemberIdentity";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, RemoveMemberIdentityOutput::class, $context);
    }

    /**
     * @param AddAttributeInput $input message
     * @param array $context request parameters
     *
     * @return AddAttributeOutput output message
     */
    public function AddAttribute(AddAttributeInput $input, array $context = [])
    {
        $path = "/attributes";

        $context['name'] = "eolymp.community.Community/AddAttribute";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, AddAttributeOutput::class, $context);
    }

    /**
     * @param UpdateAttributeInput $input message
     * @param array $context request parameters
     *
     * @return UpdateAttributeOutput output message
     */
    public function UpdateAttribute(UpdateAttributeInput $input, array $context = [])
    {
        $path = "/attributes/".rawurlencode($input->getAttributeKey());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAttributeKey("");

        $context['name'] = "eolymp.community.Community/UpdateAttribute";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateAttributeOutput::class, $context);
    }

    /**
     * @param RemoveAttributeInput $input message
     * @param array $context request parameters
     *
     * @return RemoveAttributeOutput output message
     */
    public function RemoveAttribute(RemoveAttributeInput $input, array $context = [])
    {
        $path = "/attributes/".rawurlencode($input->getAttributeKey());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAttributeKey("");

        $context['name'] = "eolymp.community.Community/RemoveAttribute";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, RemoveAttributeOutput::class, $context);
    }

    /**
     * @param DescribeAttributeInput $input message
     * @param array $context request parameters
     *
     * @return DescribeAttributeOutput output message
     */
    public function DescribeAttribute(DescribeAttributeInput $input, array $context = [])
    {
        $path = "/attributes/".rawurlencode($input->getAttributeKey());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAttributeKey("");

        $context['name'] = "eolymp.community.Community/DescribeAttribute";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeAttributeOutput::class, $context);
    }

    /**
     * @param ListAttributesInput $input message
     * @param array $context request parameters
     *
     * @return ListAttributesOutput output message
     */
    public function ListAttributes(ListAttributesInput $input, array $context = [])
    {
        $path = "/attributes";

        $context['name'] = "eolymp.community.Community/ListAttributes";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListAttributesOutput::class, $context);
    }

    /**
     * Describe identity provider configuration
     *
     * @param DescribeIdentityProviderInput $input message
     * @param array $context request parameters
     *
     * @return DescribeIdentityProviderOutput output message
     */
    public function DescribeIdentityProvider(DescribeIdentityProviderInput $input, array $context = [])
    {
        $path = "/idp";

        $context['name'] = "eolymp.community.Community/DescribeIdentityProvider";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeIdentityProviderOutput::class, $context);
    }

    /**
     * Update identity provider configuration
     *
     * @param ConfigureIdentityProviderInput $input message
     * @param array $context request parameters
     *
     * @return ConfigureIdentityProviderOutput output message
     */
    public function ConfigureIdentityProvider(ConfigureIdentityProviderInput $input, array $context = [])
    {
        $path = "/idp";

        $context['name'] = "eolymp.community.Community/ConfigureIdentityProvider";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, ConfigureIdentityProviderOutput::class, $context);
    }

}
