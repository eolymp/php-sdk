<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Community;

    /**
     * CreditService provides methods to manage members "credits", a point based system of rewards.
     * Members can be rewarded credits for various actions, and these credits can be redeemed for rewards.
     */
class CreditServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * CreateCredit adds a new credit record for a member.
     *
     * @param CreateCreditInput $input message
     * @param array $context request parameters
     *
     * @return CreateCreditOutput output message
     */
    public function CreateCredit(CreateCreditInput $input, array $context = [])
    {
        $path = "/credits";

        $context['name'] = "eolymp.community.CreditService/CreateCredit";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateCreditOutput::class, $context);
    }

    /**
     * DeleteCredit allows to "erase" credit record.
     * This method should be used in rare cases, when it's necessary to leave no trace of a credit record.
     * Generally and changes in user balance should be done by creating new credit records.
     *
     * @param DeleteCreditInput $input message
     * @param array $context request parameters
     *
     * @return DeleteCreditOutput output message
     */
    public function DeleteCredit(DeleteCreditInput $input, array $context = [])
    {
        $path = "/credits/".rawurlencode($input->getCreditId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setCreditId("");

        $context['name'] = "eolymp.community.CreditService/DeleteCredit";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteCreditOutput::class, $context);
    }

    /**
     * ListCredits returns a list of credit records for a member.
     *
     * @param ListCreditsInput $input message
     * @param array $context request parameters
     *
     * @return ListCreditsOutput output message
     */
    public function ListCredits(ListCreditsInput $input, array $context = [])
    {
        $path = "/credits";

        $context['name'] = "eolymp.community.CreditService/ListCredits";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListCreditsOutput::class, $context);
    }

    /**
     * RedeemCredit adds a new credit redeem for a member.
     * This can be used to reward a member with credits for specific actions (amount > 0) or redeem credits (amount < 0).
     *
     * @param RedeemCreditInput $input message
     * @param array $context request parameters
     *
     * @return RedeemCreditOutput output message
     */
    public function RedeemCredit(RedeemCreditInput $input, array $context = [])
    {
        $path = "/credits:redeem";

        $context['name'] = "eolymp.community.CreditService/RedeemCredit";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, RedeemCreditOutput::class, $context);
    }

    /**
     * DescribeBalance returns the current balance of credits for a member.
     *
     * @param DescribeCreditBalanceInput $input message
     * @param array $context request parameters
     *
     * @return DescribeCreditBalanceOutput output message
     */
    public function DescribeBalance(DescribeCreditBalanceInput $input, array $context = [])
    {
        $path = "/credits:balance";

        $context['name'] = "eolymp.community.CreditService/DescribeBalance";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeCreditBalanceOutput::class, $context);
    }

}
