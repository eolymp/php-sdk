<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Community;

class AttributeServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateAttributeInput $input message
     * @param array $context request parameters
     *
     * @return CreateAttributeOutput output message
     */
    public function CreateAttribute(CreateAttributeInput $input, array $context = [])
    {
        $path = "/attributes";

        $context['name'] = "eolymp.community.AttributeService/CreateAttribute";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateAttributeOutput::class, $context);
    }

    /**
     * @param UpdateAttributeInput $input message
     * @param array $context request parameters
     *
     * @return UpdateAttributeOutput output message
     */
    public function UpdateAttribute(UpdateAttributeInput $input, array $context = [])
    {
        $path = "/attributes/".rawurlencode($input->getAttributeKey());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAttributeKey("");

        $context['name'] = "eolymp.community.AttributeService/UpdateAttribute";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateAttributeOutput::class, $context);
    }

    /**
     * @param RemoveAttributeInput $input message
     * @param array $context request parameters
     *
     * @return RemoveAttributeOutput output message
     */
    public function RemoveAttribute(RemoveAttributeInput $input, array $context = [])
    {
        $path = "/attributes/".rawurlencode($input->getAttributeKey());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAttributeKey("");

        $context['name'] = "eolymp.community.AttributeService/RemoveAttribute";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, RemoveAttributeOutput::class, $context);
    }

    /**
     * @param DescribeAttributeInput $input message
     * @param array $context request parameters
     *
     * @return DescribeAttributeOutput output message
     */
    public function DescribeAttribute(DescribeAttributeInput $input, array $context = [])
    {
        $path = "/attributes/".rawurlencode($input->getAttributeKey());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAttributeKey("");

        $context['name'] = "eolymp.community.AttributeService/DescribeAttribute";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeAttributeOutput::class, $context);
    }

    /**
     * @param ListAttributesInput $input message
     * @param array $context request parameters
     *
     * @return ListAttributesOutput output message
     */
    public function ListAttributes(ListAttributesInput $input, array $context = [])
    {
        $path = "/attributes";

        $context['name'] = "eolymp.community.AttributeService/ListAttributes";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListAttributesOutput::class, $context);
    }

}
