<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/worker/worker_job.proto

namespace Eolymp\Worker\Job;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.worker.Job.Patch</code>
 */
class Patch
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_PATCH = 0;</code>
     */
    const UNKNOWN_PATCH = 0;
    /**
     * Generated from protobuf enum <code>PATCH_ALL = 1;</code>
     */
    const PATCH_ALL = 1;
    /**
     * Generated from protobuf enum <code>PATCH_PROGRESS = 2;</code>
     */
    const PATCH_PROGRESS = 2;
    /**
     * Generated from protobuf enum <code>PATCH_OUTPUTS = 3;</code>
     */
    const PATCH_OUTPUTS = 3;
    /**
     * Generated from protobuf enum <code>PATCH_LOGS_URL = 4;</code>
     */
    const PATCH_LOGS_URL = 4;
    /**
     * Generated from protobuf enum <code>PATCH_STATUS = 5;</code>
     */
    const PATCH_STATUS = 5;

    private static $valueToName = [
        self::UNKNOWN_PATCH => 'UNKNOWN_PATCH',
        self::PATCH_ALL => 'PATCH_ALL',
        self::PATCH_PROGRESS => 'PATCH_PROGRESS',
        self::PATCH_OUTPUTS => 'PATCH_OUTPUTS',
        self::PATCH_LOGS_URL => 'PATCH_LOGS_URL',
        self::PATCH_STATUS => 'PATCH_STATUS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Patch::class, \Eolymp\Worker\Job_Patch::class);

