<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/playground/run.proto

namespace Eolymp\Playground\Run;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.playground.Run.Status</code>
 */
class Status
{
    /**
     * Reserved, should not be used.
     *
     * Generated from protobuf enum <code>NONE = 0;</code>
     */
    const NONE = 0;
    /**
     * Program pending execution.
     *
     * Generated from protobuf enum <code>PENDING = 1;</code>
     */
    const PENDING = 1;
    /**
     * Program is being executed.
     *
     * Generated from protobuf enum <code>EXECUTING = 2;</code>
     */
    const EXECUTING = 2;
    /**
     * Program has terminated.
     *
     * Generated from protobuf enum <code>EXECUTED = 3;</code>
     */
    const EXECUTED = 3;
    /**
     * Program was terminated due to timeout.
     *
     * Generated from protobuf enum <code>TIMEOUT = 4;</code>
     */
    const TIMEOUT = 4;
    /**
     * Program was terminated due to exceeding CPU time limit.
     *
     * Generated from protobuf enum <code>CPU_EXHAUSTED = 5;</code>
     */
    const CPU_EXHAUSTED = 5;
    /**
     * Program was terminated due to memory overflow.
     *
     * Generated from protobuf enum <code>MEMORY_OVERFLOW = 6;</code>
     */
    const MEMORY_OVERFLOW = 6;
    /**
     * Program executed with an error (see error field for details). Typically this status means compiler or linter has returned an error.
     *
     * Generated from protobuf enum <code>ERROR = 7;</code>
     */
    const ERROR = 7;
    /**
     * Worker has failed to execute program due to an internal error, try again in this case.
     *
     * Generated from protobuf enum <code>FAILURE = 8;</code>
     */
    const FAILURE = 8;

    private static $valueToName = [
        self::NONE => 'NONE',
        self::PENDING => 'PENDING',
        self::EXECUTING => 'EXECUTING',
        self::EXECUTED => 'EXECUTED',
        self::TIMEOUT => 'TIMEOUT',
        self::CPU_EXHAUSTED => 'CPU_EXHAUSTED',
        self::MEMORY_OVERFLOW => 'MEMORY_OVERFLOW',
        self::ERROR => 'ERROR',
        self::FAILURE => 'FAILURE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Status::class, \Eolymp\Playground\Run_Status::class);

