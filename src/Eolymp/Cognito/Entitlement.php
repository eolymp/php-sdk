<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/cognito/entitlement.proto

namespace Eolymp\Cognito;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.cognito.Entitlement</code>
 */
class Entitlement
{
    /**
     * View public information about active user.
     *
     * Generated from protobuf enum <code>VIEW_PUBLIC_PROFILE = 0;</code>
     */
    const VIEW_PUBLIC_PROFILE = 0;
    /**
     * View public information about blocked users.
     *
     * Generated from protobuf enum <code>VIEW_BLOCKED_PROFILE = 1;</code>
     */
    const VIEW_BLOCKED_PROFILE = 1;
    /**
     * View private information about user: email, birthday etc.
     *
     * Generated from protobuf enum <code>VIEW_PRIVATE_DATA = 2;</code>
     */
    const VIEW_PRIVATE_DATA = 2;
    /**
     * Update user's roles.
     *
     * Generated from protobuf enum <code>MANAGE_ROLES = 3;</code>
     */
    const MANAGE_ROLES = 3;
    /**
     * Activate and de-activate user profiles.
     *
     * Generated from protobuf enum <code>BLOCK_USERS = 4;</code>
     */
    const BLOCK_USERS = 4;

    private static $valueToName = [
        self::VIEW_PUBLIC_PROFILE => 'VIEW_PUBLIC_PROFILE',
        self::VIEW_BLOCKED_PROFILE => 'VIEW_BLOCKED_PROFILE',
        self::VIEW_PRIVATE_DATA => 'VIEW_PRIVATE_DATA',
        self::MANAGE_ROLES => 'MANAGE_ROLES',
        self::BLOCK_USERS => 'BLOCK_USERS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

