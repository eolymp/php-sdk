<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Reward;

class AchievementServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateAchievementInput $input message
     * @param array $context request parameters
     *
     * @return CreateAchievementOutput output message
     */
    public function CreateAchievement(CreateAchievementInput $input, array $context = [])
    {
        $path = "/achievements";

        $context['name'] = "eolymp.reward.AchievementService/CreateAchievement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateAchievementOutput::class, $context);
    }

    /**
     * @param UpdateAchievementInput $input message
     * @param array $context request parameters
     *
     * @return UpdateAchievementOutput output message
     */
    public function UpdateAchievement(UpdateAchievementInput $input, array $context = [])
    {
        $path = "/achievements/".rawurlencode($input->getAchievementId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAchievementId("");

        $context['name'] = "eolymp.reward.AchievementService/UpdateAchievement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdateAchievementOutput::class, $context);
    }

    /**
     * @param DeleteAchievementInput $input message
     * @param array $context request parameters
     *
     * @return DeleteAchievementOutput output message
     */
    public function DeleteAchievement(DeleteAchievementInput $input, array $context = [])
    {
        $path = "/achievements/".rawurlencode($input->getAchievementId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAchievementId("");

        $context['name'] = "eolymp.reward.AchievementService/DeleteAchievement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteAchievementOutput::class, $context);
    }

    /**
     * @param DescribeAchievementInput $input message
     * @param array $context request parameters
     *
     * @return DescribeAchievementOutput output message
     */
    public function DescribeAchievement(DescribeAchievementInput $input, array $context = [])
    {
        $path = "/achievements/".rawurlencode($input->getAchievementId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAchievementId("");

        $context['name'] = "eolymp.reward.AchievementService/DescribeAchievement";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeAchievementOutput::class, $context);
    }

    /**
     * @param ListAchievementsInput $input message
     * @param array $context request parameters
     *
     * @return ListAchievementsOutput output message
     */
    public function ListAchievements(ListAchievementsInput $input, array $context = [])
    {
        $path = "/achievements";

        $context['name'] = "eolymp.reward.AchievementService/ListAchievements";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListAchievementsOutput::class, $context);
    }

    /**
     * @param DescribeAchievementTranslationInput $input message
     * @param array $context request parameters
     *
     * @return DescribeAchievementTranslationOutput output message
     */
    public function DescribeAchievementTranslation(DescribeAchievementTranslationInput $input, array $context = [])
    {
        $path = "/achievements/".rawurlencode($input->getAchievementId())."/translations/".rawurlencode($input->getTranslationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAchievementId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.reward.AchievementService/DescribeAchievementTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeAchievementTranslationOutput::class, $context);
    }

    /**
     * @param ListAchievementTranslationsInput $input message
     * @param array $context request parameters
     *
     * @return ListAchievementTranslationsOutput output message
     */
    public function ListAchievementTranslations(ListAchievementTranslationsInput $input, array $context = [])
    {
        $path = "/achievements/".rawurlencode($input->getAchievementId())."/translations";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAchievementId("");

        $context['name'] = "eolymp.reward.AchievementService/ListAchievementTranslations";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListAchievementTranslationsOutput::class, $context);
    }

    /**
     * @param CreateAchievementTranslationInput $input message
     * @param array $context request parameters
     *
     * @return CreateAchievementTranslationOutput output message
     */
    public function CreateAchievementTranslation(CreateAchievementTranslationInput $input, array $context = [])
    {
        $path = "/achievements/".rawurlencode($input->getAchievementId())."/translations";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAchievementId("");

        $context['name'] = "eolymp.reward.AchievementService/CreateAchievementTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateAchievementTranslationOutput::class, $context);
    }

    /**
     * @param UpdateAchievementTranslationInput $input message
     * @param array $context request parameters
     *
     * @return UpdateAchievementTranslationOutput output message
     */
    public function UpdateAchievementTranslation(UpdateAchievementTranslationInput $input, array $context = [])
    {
        $path = "/achievements/".rawurlencode($input->getAchievementId())."/translations/".rawurlencode($input->getTranslationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAchievementId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.reward.AchievementService/UpdateAchievementTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateAchievementTranslationOutput::class, $context);
    }

    /**
     * @param DeleteAchievementTranslationInput $input message
     * @param array $context request parameters
     *
     * @return DeleteAchievementTranslationOutput output message
     */
    public function DeleteAchievementTranslation(DeleteAchievementTranslationInput $input, array $context = [])
    {
        $path = "/achievements/".rawurlencode($input->getAchievementId())."/translations/".rawurlencode($input->getTranslationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAchievementId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.reward.AchievementService/DeleteAchievementTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteAchievementTranslationOutput::class, $context);
    }

}
