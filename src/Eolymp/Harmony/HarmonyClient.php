<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Harmony;

class HarmonyClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param ListAgreementsInput $input message
     * @param array $context request parameters
     *
     * @return ListAgreementsOutput output message
     */
    public function ListAgreements(ListAgreementsInput $input, array $context = [])
    {
        $path = "/harmony/agreements";

        $context['name'] = "eolymp.harmony.Harmony/ListAgreements";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListAgreementsOutput::class, $context);
    }

    /**
     * @param GetConsentInput $input message
     * @param array $context request parameters
     *
     * @return GetConsentOutput output message
     */
    public function GetConsent(GetConsentInput $input, array $context = [])
    {
        $path = "/harmony/agreements/".rawurlencode($input->getAgreementId())."/consent";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAgreementId("");

        $context['name'] = "eolymp.harmony.Harmony/GetConsent";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, GetConsentOutput::class, $context);
    }

    /**
     * @param SetConsentInput $input message
     * @param array $context request parameters
     *
     * @return SetConsentOutput output message
     */
    public function SetConsent(SetConsentInput $input, array $context = [])
    {
        $path = "/harmony/agreements/".rawurlencode($input->getAgreementId())."/consent";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setAgreementId("");

        $context['name'] = "eolymp.harmony.Harmony/SetConsent";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, SetConsentOutput::class, $context);
    }

    /**
     * @param FollowShortcutInput $input message
     * @param array $context request parameters
     *
     * @return FollowShortcutOutput output message
     */
    public function FollowShortcut(FollowShortcutInput $input, array $context = [])
    {
        $path = "/harmony/shortcuts/".rawurlencode($input->getShortcutId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setShortcutId("");

        $context['name'] = "eolymp.harmony.Harmony/FollowShortcut";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, FollowShortcutOutput::class, $context);
    }

}
