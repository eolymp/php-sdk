<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Content;

class ContentServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param DescribeFragmentInput $input message
     * @param array $context request parameters
     *
     * @return DescribeFragmentOutput output message
     */
    public function DescribeFragment(DescribeFragmentInput $input, array $context = [])
    {
        $path = "/content/fragments/".rawurlencode($input->getFragmentId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setFragmentId("");

        $context['name'] = "eolymp.content.ContentService/DescribeFragment";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeFragmentOutput::class, $context);
    }

    /**
     * @param ListFragmentsInput $input message
     * @param array $context request parameters
     *
     * @return ListFragmentsOutput output message
     */
    public function ListFragments(ListFragmentsInput $input, array $context = [])
    {
        $path = "/content/fragments";

        $context['name'] = "eolymp.content.ContentService/ListFragments";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListFragmentsOutput::class, $context);
    }

    /**
     * @param CreateFragmentInput $input message
     * @param array $context request parameters
     *
     * @return CreateFragmentOutput output message
     */
    public function CreateFragment(CreateFragmentInput $input, array $context = [])
    {
        $path = "/content/fragments";

        $context['name'] = "eolymp.content.ContentService/CreateFragment";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateFragmentOutput::class, $context);
    }

    /**
     * @param UpdateFragmentInput $input message
     * @param array $context request parameters
     *
     * @return UpdateFragmentOutput output message
     */
    public function UpdateFragment(UpdateFragmentInput $input, array $context = [])
    {
        $path = "/content/fragments/".rawurlencode($input->getFragmentId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setFragmentId("");

        $context['name'] = "eolymp.content.ContentService/UpdateFragment";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateFragmentOutput::class, $context);
    }

    /**
     * @param DeleteFragmentInput $input message
     * @param array $context request parameters
     *
     * @return DeleteFragmentOutput output message
     */
    public function DeleteFragment(DeleteFragmentInput $input, array $context = [])
    {
        $path = "/content/fragments/".rawurlencode($input->getFragmentId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setFragmentId("");

        $context['name'] = "eolymp.content.ContentService/DeleteFragment";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteFragmentOutput::class, $context);
    }

    /**
     * @param TranslateFragmentInput $input message
     * @param array $context request parameters
     *
     * @return TranslateFragmentOutput output message
     */
    public function TranslateFragment(TranslateFragmentInput $input, array $context = [])
    {
        $path = "/content/fragments/".rawurlencode($input->getFragmentId())."/translate";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setFragmentId("");

        $context['name'] = "eolymp.content.ContentService/TranslateFragment";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, TranslateFragmentOutput::class, $context);
    }

    /**
     * @param DescribeFragmentTranslationInput $input message
     * @param array $context request parameters
     *
     * @return DescribeFragmentTranslationOutput output message
     */
    public function DescribeFragmentTranslation(DescribeFragmentTranslationInput $input, array $context = [])
    {
        $path = "/content/fragments/".rawurlencode($input->getFragmentId())."/translations/".rawurlencode($input->getTranslationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setFragmentId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.content.ContentService/DescribeFragmentTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeFragmentTranslationOutput::class, $context);
    }

    /**
     * @param ListFragmentTranslationsInput $input message
     * @param array $context request parameters
     *
     * @return ListFragmentTranslationsOutput output message
     */
    public function ListFragmentTranslations(ListFragmentTranslationsInput $input, array $context = [])
    {
        $path = "/content/fragments/".rawurlencode($input->getFragmentId())."/translations";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setFragmentId("");

        $context['name'] = "eolymp.content.ContentService/ListFragmentTranslations";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListFragmentTranslationsOutput::class, $context);
    }

    /**
     * @param CreateFragmentTranslationInput $input message
     * @param array $context request parameters
     *
     * @return CreateFragmentTranslationOutput output message
     */
    public function CreateFragmentTranslation(CreateFragmentTranslationInput $input, array $context = [])
    {
        $path = "/content/fragments/".rawurlencode($input->getFragmentId())."/translations";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setFragmentId("");

        $context['name'] = "eolymp.content.ContentService/CreateFragmentTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateFragmentTranslationOutput::class, $context);
    }

    /**
     * @param UpdateFragmentTranslationInput $input message
     * @param array $context request parameters
     *
     * @return UpdateFragmentTranslationOutput output message
     */
    public function UpdateFragmentTranslation(UpdateFragmentTranslationInput $input, array $context = [])
    {
        $path = "/content/fragments/".rawurlencode($input->getFragmentId())."/translations/".rawurlencode($input->getTranslationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setFragmentId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.content.ContentService/UpdateFragmentTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateFragmentTranslationOutput::class, $context);
    }

    /**
     * @param DeleteFragmentTranslationInput $input message
     * @param array $context request parameters
     *
     * @return DeleteFragmentTranslationOutput output message
     */
    public function DeleteFragmentTranslation(DeleteFragmentTranslationInput $input, array $context = [])
    {
        $path = "/content/fragments/".rawurlencode($input->getFragmentId())."/translations/".rawurlencode($input->getTranslationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setFragmentId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.content.ContentService/DeleteFragmentTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteFragmentTranslationOutput::class, $context);
    }

    /**
     * @param DescribePathInput $input message
     * @param array $context request parameters
     *
     * @return DescribePathOutput output message
     */
    public function DescribePath(DescribePathInput $input, array $context = [])
    {
        $path = "/content/path";

        $context['name'] = "eolymp.content.ContentService/DescribePath";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribePathOutput::class, $context);
    }

    /**
     * @param ListParentsInput $input message
     * @param array $context request parameters
     *
     * @return ListParentsOutput output message
     */
    public function ListParents(ListParentsInput $input, array $context = [])
    {
        $path = "/content/parents";

        $context['name'] = "eolymp.content.ContentService/ListParents";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListParentsOutput::class, $context);
    }

}
