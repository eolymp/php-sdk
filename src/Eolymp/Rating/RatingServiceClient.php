<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Rating;

class RatingServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param SetRatingInput $input message
     * @param array $context request parameters
     *
     * @return SetRatingOutput output message
     */
    public function SetRating(SetRatingInput $input, array $context = [])
    {
        $path = "/rating";

        $context['name'] = "eolymp.rating.RatingService/SetRating";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, SetRatingOutput::class, $context);
    }

    /**
     * @param UpdateRatingInput $input message
     * @param array $context request parameters
     *
     * @return UpdateRatingOutput output message
     */
    public function UpdateRating(UpdateRatingInput $input, array $context = [])
    {
        $path = "/rating/".rawurlencode($input->getRatingId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setRatingId("");

        $context['name'] = "eolymp.rating.RatingService/UpdateRating";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateRatingOutput::class, $context);
    }

    /**
     * @param DeleteRatingInput $input message
     * @param array $context request parameters
     *
     * @return DeleteRatingOutput output message
     */
    public function DeleteRating(DeleteRatingInput $input, array $context = [])
    {
        $path = "/rating/".rawurlencode($input->getRatingId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setRatingId("");

        $context['name'] = "eolymp.rating.RatingService/DeleteRating";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteRatingOutput::class, $context);
    }

    /**
     * @param DescribeRatingInput $input message
     * @param array $context request parameters
     *
     * @return DescribeRatingOutput output message
     */
    public function DescribeRating(DescribeRatingInput $input, array $context = [])
    {
        $path = "/rating/".rawurlencode($input->getRatingId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setRatingId("");

        $context['name'] = "eolymp.rating.RatingService/DescribeRating";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeRatingOutput::class, $context);
    }

    /**
     * @param ListRatingInput $input message
     * @param array $context request parameters
     *
     * @return ListRatingOutput output message
     */
    public function ListRating(ListRatingInput $input, array $context = [])
    {
        $path = "/members/".rawurlencode($input->getMemberId())."/rating";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setMemberId("");

        $context['name'] = "eolymp.rating.RatingService/ListRating";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListRatingOutput::class, $context);
    }

}
