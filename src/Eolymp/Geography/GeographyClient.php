<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Geography;

class GeographyClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param DescribeCountryInput $input message
     * @param array $context request parameters
     *
     * @return DescribeCountryOutput output message
     */
    public function DescribeCountry(DescribeCountryInput $input, array $context = [])
    {
        $path = "/geography/countries/".rawurlencode($input->getCountryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setCountryId("");

        $context['name'] = "eolymp.geography.Geography/DescribeCountry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeCountryOutput::class, $context);
    }

    /**
     * @param ListCountriesInput $input message
     * @param array $context request parameters
     *
     * @return ListCountriesOutput output message
     */
    public function ListCountries(ListCountriesInput $input, array $context = [])
    {
        $path = "/geography/countries";

        $context['name'] = "eolymp.geography.Geography/ListCountries";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListCountriesOutput::class, $context);
    }

    /**
     * @param DescribeRegionInput $input message
     * @param array $context request parameters
     *
     * @return DescribeRegionOutput output message
     */
    public function DescribeRegion(DescribeRegionInput $input, array $context = [])
    {
        $path = "/geography/regions/".rawurlencode($input->getRegionId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setRegionId("");

        $context['name'] = "eolymp.geography.Geography/DescribeRegion";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeRegionOutput::class, $context);
    }

    /**
     * @param ListRegionsInput $input message
     * @param array $context request parameters
     *
     * @return ListRegionsOutput output message
     */
    public function ListRegions(ListRegionsInput $input, array $context = [])
    {
        $path = "/geography/countries/".rawurlencode($input->getCountryId())."/regions";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setCountryId("");

        $context['name'] = "eolymp.geography.Geography/ListRegions";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListRegionsOutput::class, $context);
    }

}
