<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Universe;

class UniverseClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * Lookup space by domain key
     *
     * @param LookupSpaceInput $input message
     * @param array $context request parameters
     *
     * @return LookupSpaceOutput output message
     */
    public function LookupSpace(LookupSpaceInput $input, array $context = [])
    {
        $path = "/spaces/__lookup/".rawurlencode($input->getKey());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setKey("");

        $context['name'] = "eolymp.universe.Universe/LookupSpace";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, LookupSpaceOutput::class, $context);
    }

    /**
     * Create a space
     *
     * @param CreateSpaceInput $input message
     * @param array $context request parameters
     *
     * @return CreateSpaceOutput output message
     */
    public function CreateSpace(CreateSpaceInput $input, array $context = [])
    {
        $path = "/spaces";

        $context['name'] = "eolymp.universe.Universe/CreateSpace";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateSpaceOutput::class, $context);
    }

    /**
     * Update existing space
     *
     * @param UpdateSpaceInput $input message
     * @param array $context request parameters
     *
     * @return UpdateSpaceOutput output message
     */
    public function UpdateSpace(UpdateSpaceInput $input, array $context = [])
    {
        $path = "/spaces/".rawurlencode($input->getSpaceId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSpaceId("");

        $context['name'] = "eolymp.universe.Universe/UpdateSpace";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateSpaceOutput::class, $context);
    }

    /**
     * Delete space
     *
     * @param DeleteSpaceInput $input message
     * @param array $context request parameters
     *
     * @return DeleteSpaceOutput output message
     */
    public function DeleteSpace(DeleteSpaceInput $input, array $context = [])
    {
        $path = "/spaces/".rawurlencode($input->getSpaceId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSpaceId("");

        $context['name'] = "eolymp.universe.Universe/DeleteSpace";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteSpaceOutput::class, $context);
    }

    /**
     * Describe space
     *
     * @param DescribeSpaceInput $input message
     * @param array $context request parameters
     *
     * @return DescribeSpaceOutput output message
     */
    public function DescribeSpace(DescribeSpaceInput $input, array $context = [])
    {
        $path = "/spaces/".rawurlencode($input->getSpaceId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSpaceId("");

        $context['name'] = "eolymp.universe.Universe/DescribeSpace";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeSpaceOutput::class, $context);
    }

    /**
     * Describe quota
     *
     * @param DescribeQuotaInput $input message
     * @param array $context request parameters
     *
     * @return DescribeQuotaOutput output message
     */
    public function DescribeQuota(DescribeQuotaInput $input, array $context = [])
    {
        $path = "/spaces/".rawurlencode($input->getSpaceId())."/quota";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSpaceId("");

        $context['name'] = "eolymp.universe.Universe/DescribeQuota";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeQuotaOutput::class, $context);
    }

    /**
     * List spaces of a contest
     *
     * @param ListSpacesInput $input message
     * @param array $context request parameters
     *
     * @return ListSpacesOutput output message
     */
    public function ListSpaces(ListSpacesInput $input, array $context = [])
    {
        $path = "/spaces";

        $context['name'] = "eolymp.universe.Universe/ListSpaces";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListSpacesOutput::class, $context);
    }

    /**
     * Add space permission
     *
     * @param GrantPermissionInput $input message
     * @param array $context request parameters
     *
     * @return GrantPermissionOutput output message
     */
    public function GrantPermission(GrantPermissionInput $input, array $context = [])
    {
        $path = "/spaces/".rawurlencode($input->getSpaceId())."/permissions/".rawurlencode($input->getUserId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSpaceId("");
        $input->setUserId("");

        $context['name'] = "eolymp.universe.Universe/GrantPermission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, GrantPermissionOutput::class, $context);
    }

    /**
     * Delete space permission
     *
     * @param RevokePermissionInput $input message
     * @param array $context request parameters
     *
     * @return RevokePermissionOutput output message
     */
    public function RevokePermission(RevokePermissionInput $input, array $context = [])
    {
        $path = "/spaces/".rawurlencode($input->getSpaceId())."/permissions/".rawurlencode($input->getUserId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSpaceId("");
        $input->setUserId("");

        $context['name'] = "eolymp.universe.Universe/RevokePermission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, RevokePermissionOutput::class, $context);
    }

    /**
     * Describe space permission
     *
     * @param DescribePermissionInput $input message
     * @param array $context request parameters
     *
     * @return DescribePermissionOutput output message
     */
    public function DescribePermission(DescribePermissionInput $input, array $context = [])
    {
        $path = "/spaces/".rawurlencode($input->getSpaceId())."/permissions/".rawurlencode($input->getUserId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSpaceId("");
        $input->setUserId("");

        $context['name'] = "eolymp.universe.Universe/DescribePermission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribePermissionOutput::class, $context);
    }

    /**
     * Describe space permission
     *
     * @param IntrospectPermissionInput $input message
     * @param array $context request parameters
     *
     * @return IntrospectPermissionOutput output message
     */
    public function IntrospectPermission(IntrospectPermissionInput $input, array $context = [])
    {
        $path = "/spaces/".rawurlencode($input->getSpaceId())."/introspect-permission";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSpaceId("");

        $context['name'] = "eolymp.universe.Universe/IntrospectPermission";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, IntrospectPermissionOutput::class, $context);
    }

    /**
     * List permissions in a space
     *
     * @param ListPermissionsInput $input message
     * @param array $context request parameters
     *
     * @return ListPermissionsOutput output message
     */
    public function ListPermissions(ListPermissionsInput $input, array $context = [])
    {
        $path = "/spaces/".rawurlencode($input->getSpaceId())."/permissions";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSpaceId("");

        $context['name'] = "eolymp.universe.Universe/ListPermissions";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListPermissionsOutput::class, $context);
    }

}
