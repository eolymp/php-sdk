<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Notify;

class NotificationServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param DescribeNotificationInput $input message
     * @param array $context request parameters
     *
     * @return DescribeNotificationOutput output message
     */
    public function DescribeNotification(DescribeNotificationInput $input, array $context = [])
    {
        $path = "/notifications/".rawurlencode($input->getNotificationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNotificationId("");

        $context['name'] = "eolymp.notify.NotificationService/DescribeNotification";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeNotificationOutput::class, $context);
    }

    /**
     * @param ReadNotificationInput $input message
     * @param array $context request parameters
     *
     * @return ReadNotificationOutput output message
     */
    public function ReadNotification(ReadNotificationInput $input, array $context = [])
    {
        $path = "/notifications/".rawurlencode($input->getNotificationId())."/read";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNotificationId("");

        $context['name'] = "eolymp.notify.NotificationService/ReadNotification";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ReadNotificationOutput::class, $context);
    }

    /**
     * @param DeleteNotificationInput $input message
     * @param array $context request parameters
     *
     * @return DeleteNotificationOutput output message
     */
    public function DeleteNotification(DeleteNotificationInput $input, array $context = [])
    {
        $path = "/notifications/".rawurlencode($input->getNotificationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNotificationId("");

        $context['name'] = "eolymp.notify.NotificationService/DeleteNotification";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteNotificationOutput::class, $context);
    }

    /**
     * @param ListNotificationsInput $input message
     * @param array $context request parameters
     *
     * @return ListNotificationsOutput output message
     */
    public function ListNotifications(ListNotificationsInput $input, array $context = [])
    {
        $path = "/notifications";

        $context['name'] = "eolymp.notify.NotificationService/ListNotifications";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListNotificationsOutput::class, $context);
    }

    /**
     * @param DescribePreferencesInput $input message
     * @param array $context request parameters
     *
     * @return DescribePreferencesOutput output message
     */
    public function DescribePreferences(DescribePreferencesInput $input, array $context = [])
    {
        $path = "/spaces/".rawurlencode($input->getSpaceId())."/preferences";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSpaceId("");

        $context['name'] = "eolymp.notify.NotificationService/DescribePreferences";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribePreferencesOutput::class, $context);
    }

    /**
     * @param UpdatePreferencesInput $input message
     * @param array $context request parameters
     *
     * @return UpdatePreferencesOutput output message
     */
    public function UpdatePreferences(UpdatePreferencesInput $input, array $context = [])
    {
        $path = "/spaces/".rawurlencode($input->getSpaceId())."/preferences";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setSpaceId("");

        $context['name'] = "eolymp.notify.NotificationService/UpdatePreferences";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, UpdatePreferencesOutput::class, $context);
    }

}
