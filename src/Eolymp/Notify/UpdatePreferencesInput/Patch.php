<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/notify/notification_service.proto

namespace Eolymp\Notify\UpdatePreferencesInput;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.notify.UpdatePreferencesInput.Patch</code>
 */
class Patch
{
    /**
     * Generated from protobuf enum <code>ALL = 0;</code>
     */
    const ALL = 0;
    /**
     * Generated from protobuf enum <code>SUBSCRIPTIONS = 10;</code>
     */
    const SUBSCRIPTIONS = 10;
    /**
     * Generated from protobuf enum <code>SUBSCRIPTIONS_ADD = 11;</code>
     */
    const SUBSCRIPTIONS_ADD = 11;
    /**
     * Generated from protobuf enum <code>SUBSCRIPTIONS_REMOVE = 12;</code>
     */
    const SUBSCRIPTIONS_REMOVE = 12;

    private static $valueToName = [
        self::ALL => 'ALL',
        self::SUBSCRIPTIONS => 'SUBSCRIPTIONS',
        self::SUBSCRIPTIONS_ADD => 'SUBSCRIPTIONS_ADD',
        self::SUBSCRIPTIONS_REMOVE => 'SUBSCRIPTIONS_REMOVE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Patch::class, \Eolymp\Notify\UpdatePreferencesInput_Patch::class);

