<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/ranker/scoreboard.proto

namespace Eolymp\Ranker\Scoreboard\Column;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.ranker.Scoreboard.Column.Type</code>
 */
class Type
{
    /**
     * Generated from protobuf enum <code>NONE = 0;</code>
     */
    const NONE = 0;
    /**
     * Generated from protobuf enum <code>CONTEST = 1;</code>
     */
    const CONTEST = 1;
    /**
     * Generated from protobuf enum <code>PROBLEM = 2;</code>
     */
    const PROBLEM = 2;
    /**
     * Generated from protobuf enum <code>ATTRIBUTE = 3;</code>
     */
    const ATTRIBUTE = 3;
    /**
     * Generated from protobuf enum <code>NAME = 4;</code>
     */
    const NAME = 4;

    private static $valueToName = [
        self::NONE => 'NONE',
        self::CONTEST => 'CONTEST',
        self::PROBLEM => 'PROBLEM',
        self::ATTRIBUTE => 'ATTRIBUTE',
        self::NAME => 'NAME',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Type::class, \Eolymp\Ranker\Scoreboard_Column_Type::class);

