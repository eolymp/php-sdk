<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/taxonomy/topic.proto

namespace Eolymp\Taxonomy\Topic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>eolymp.taxonomy.Topic.Translation</code>
 */
class Translation extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string locale = 1;</code>
     */
    protected $locale = '';
    /**
     * topic name
     *
     * Generated from protobuf field <code>string name = 2;</code>
     */
    protected $name = '';
    /**
     * topic summary (short description)
     *
     * Generated from protobuf field <code>string summary = 3;</code>
     */
    protected $summary = '';
    /**
     * alternative names and keywords related to the topic (used for search)
     *
     * Generated from protobuf field <code>repeated string keywords = 4;</code>
     */
    private $keywords;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $locale
     *     @type string $name
     *           topic name
     *     @type string $summary
     *           topic summary (short description)
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $keywords
     *           alternative names and keywords related to the topic (used for search)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Taxonomy\Topic::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string locale = 1;</code>
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }

    /**
     * Generated from protobuf field <code>string locale = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setLocale($var)
    {
        GPBUtil::checkString($var, True);
        $this->locale = $var;

        return $this;
    }

    /**
     * topic name
     *
     * Generated from protobuf field <code>string name = 2;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * topic name
     *
     * Generated from protobuf field <code>string name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * topic summary (short description)
     *
     * Generated from protobuf field <code>string summary = 3;</code>
     * @return string
     */
    public function getSummary()
    {
        return $this->summary;
    }

    /**
     * topic summary (short description)
     *
     * Generated from protobuf field <code>string summary = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setSummary($var)
    {
        GPBUtil::checkString($var, True);
        $this->summary = $var;

        return $this;
    }

    /**
     * alternative names and keywords related to the topic (used for search)
     *
     * Generated from protobuf field <code>repeated string keywords = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getKeywords()
    {
        return $this->keywords;
    }

    /**
     * alternative names and keywords related to the topic (used for search)
     *
     * Generated from protobuf field <code>repeated string keywords = 4;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setKeywords($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->keywords = $arr;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Translation::class, \Eolymp\Taxonomy\Topic_Translation::class);

