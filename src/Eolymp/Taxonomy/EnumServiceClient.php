<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Taxonomy;

    /**
     * EnumService allows to manage taxonomy enums and values.
     */
class EnumServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateEnumInput $input message
     * @param array $context request parameters
     *
     * @return CreateEnumOutput output message
     */
    public function CreateEnum(CreateEnumInput $input, array $context = [])
    {
        $path = "/enums";

        $context['name'] = "eolymp.taxonomy.EnumService/CreateEnum";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateEnumOutput::class, $context);
    }

    /**
     * @param DeleteEnumInput $input message
     * @param array $context request parameters
     *
     * @return DeleteEnumOutput output message
     */
    public function DeleteEnum(DeleteEnumInput $input, array $context = [])
    {
        $path = "/enums/".rawurlencode($input->getEnumId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEnumId("");

        $context['name'] = "eolymp.taxonomy.EnumService/DeleteEnum";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteEnumOutput::class, $context);
    }

    /**
     * @param UpdateEnumInput $input message
     * @param array $context request parameters
     *
     * @return UpdateEnumOutput output message
     */
    public function UpdateEnum(UpdateEnumInput $input, array $context = [])
    {
        $path = "/enums/".rawurlencode($input->getEnumId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEnumId("");

        $context['name'] = "eolymp.taxonomy.EnumService/UpdateEnum";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateEnumOutput::class, $context);
    }

    /**
     * @param DescribeEnumInput $input message
     * @param array $context request parameters
     *
     * @return DescribeEnumOutput output message
     */
    public function DescribeEnum(DescribeEnumInput $input, array $context = [])
    {
        $path = "/enums/".rawurlencode($input->getEnumId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEnumId("");

        $context['name'] = "eolymp.taxonomy.EnumService/DescribeEnum";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeEnumOutput::class, $context);
    }

    /**
     * @param ListEnumsInput $input message
     * @param array $context request parameters
     *
     * @return ListEnumsOutput output message
     */
    public function ListEnums(ListEnumsInput $input, array $context = [])
    {
        $path = "/enums";

        $context['name'] = "eolymp.taxonomy.EnumService/ListEnums";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListEnumsOutput::class, $context);
    }

    /**
     * @param CreateValueInput $input message
     * @param array $context request parameters
     *
     * @return CreateValueOutput output message
     */
    public function CreateValue(CreateValueInput $input, array $context = [])
    {
        $path = "/enums/".rawurlencode($input->getEnumId())."/items";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEnumId("");

        $context['name'] = "eolymp.taxonomy.EnumService/CreateValue";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateValueOutput::class, $context);
    }

    /**
     * @param DeleteValueInput $input message
     * @param array $context request parameters
     *
     * @return DeleteValueOutput output message
     */
    public function DeleteValue(DeleteValueInput $input, array $context = [])
    {
        $path = "/enums/".rawurlencode($input->getEnumId())."/values/".rawurlencode($input->getValueId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEnumId("");
        $input->setValueId("");

        $context['name'] = "eolymp.taxonomy.EnumService/DeleteValue";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteValueOutput::class, $context);
    }

    /**
     * @param UpdateValueInput $input message
     * @param array $context request parameters
     *
     * @return UpdateValueOutput output message
     */
    public function UpdateValue(UpdateValueInput $input, array $context = [])
    {
        $path = "/enums/".rawurlencode($input->getEnumId())."/values/".rawurlencode($input->getValueId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEnumId("");
        $input->setValueId("");

        $context['name'] = "eolymp.taxonomy.EnumService/UpdateValue";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateValueOutput::class, $context);
    }

    /**
     * @param DescribeValueInput $input message
     * @param array $context request parameters
     *
     * @return DescribeValueOutput output message
     */
    public function DescribeValue(DescribeValueInput $input, array $context = [])
    {
        $path = "/enums/".rawurlencode($input->getEnumId())."/values/".rawurlencode($input->getValueId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEnumId("");
        $input->setValueId("");

        $context['name'] = "eolymp.taxonomy.EnumService/DescribeValue";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeValueOutput::class, $context);
    }

    /**
     * @param ListValuesInput $input message
     * @param array $context request parameters
     *
     * @return ListValuesOutput output message
     */
    public function ListValues(ListValuesInput $input, array $context = [])
    {
        $path = "/enums/".rawurlencode($input->getEnumId())."/items";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEnumId("");

        $context['name'] = "eolymp.taxonomy.EnumService/ListValues";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListValuesOutput::class, $context);
    }

    /**
     * @param TranslateValueInput $input message
     * @param array $context request parameters
     *
     * @return TranslateValueOutput output message
     */
    public function TranslateValue(TranslateValueInput $input, array $context = [])
    {
        $path = "/enums/".rawurlencode($input->getEnumId())."/values/".rawurlencode($input->getValueId())."/translations/".rawurlencode($input->getLocale());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEnumId("");
        $input->setValueId("");
        $input->setLocale("");

        $context['name'] = "eolymp.taxonomy.EnumService/TranslateValue";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, TranslateValueOutput::class, $context);
    }

    /**
     * @param DeleteTranslationInput $input message
     * @param array $context request parameters
     *
     * @return DeleteTranslationOutput output message
     */
    public function DeleteTranslation(DeleteTranslationInput $input, array $context = [])
    {
        $path = "/enums/".rawurlencode($input->getEnumId())."/values/".rawurlencode($input->getValueId())."/translations/".rawurlencode($input->getLocale());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEnumId("");
        $input->setValueId("");
        $input->setLocale("");

        $context['name'] = "eolymp.taxonomy.EnumService/DeleteTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteTranslationOutput::class, $context);
    }

    /**
     * @param ListTranslationsInput $input message
     * @param array $context request parameters
     *
     * @return ListTranslationsOutput output message
     */
    public function ListTranslations(ListTranslationsInput $input, array $context = [])
    {
        $path = "/enums/".rawurlencode($input->getEnumId())."/values/".rawurlencode($input->getValueId())."/translations";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setEnumId("");
        $input->setValueId("");

        $context['name'] = "eolymp.taxonomy.EnumService/ListTranslations";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, ListTranslationsOutput::class, $context);
    }

}
