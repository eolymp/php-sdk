<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Taxonomy;

    /**
     * Entry service allows to manage taxonomy datasets and entries.
     */
class DatasetServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateDatasetInput $input message
     * @param array $context request parameters
     *
     * @return CreateDatasetOutput output message
     */
    public function CreateDataset(CreateDatasetInput $input, array $context = [])
    {
        $path = "/datasets";

        $context['name'] = "eolymp.taxonomy.DatasetService/CreateDataset";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateDatasetOutput::class, $context);
    }

    /**
     * @param DeleteDatasetInput $input message
     * @param array $context request parameters
     *
     * @return DeleteDatasetOutput output message
     */
    public function DeleteDataset(DeleteDatasetInput $input, array $context = [])
    {
        $path = "/datasets/".rawurlencode($input->getDatasetId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDatasetId("");

        $context['name'] = "eolymp.taxonomy.DatasetService/DeleteDataset";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteDatasetOutput::class, $context);
    }

    /**
     * @param UpdateDatasetInput $input message
     * @param array $context request parameters
     *
     * @return UpdateDatasetOutput output message
     */
    public function UpdateDataset(UpdateDatasetInput $input, array $context = [])
    {
        $path = "/datasets/".rawurlencode($input->getDatasetId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDatasetId("");

        $context['name'] = "eolymp.taxonomy.DatasetService/UpdateDataset";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateDatasetOutput::class, $context);
    }

    /**
     * @param DescribeDatasetInput $input message
     * @param array $context request parameters
     *
     * @return DescribeDatasetOutput output message
     */
    public function DescribeDataset(DescribeDatasetInput $input, array $context = [])
    {
        $path = "/datasets/".rawurlencode($input->getDatasetId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDatasetId("");

        $context['name'] = "eolymp.taxonomy.DatasetService/DescribeDataset";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeDatasetOutput::class, $context);
    }

    /**
     * @param ListDatasetsInput $input message
     * @param array $context request parameters
     *
     * @return ListDatasetsOutput output message
     */
    public function ListDatasets(ListDatasetsInput $input, array $context = [])
    {
        $path = "/datasets";

        $context['name'] = "eolymp.taxonomy.DatasetService/ListDatasets";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListDatasetsOutput::class, $context);
    }

    /**
     * @param CreateEntryInput $input message
     * @param array $context request parameters
     *
     * @return CreateEntryOutput output message
     */
    public function CreateEntry(CreateEntryInput $input, array $context = [])
    {
        $path = "/datasets/".rawurlencode($input->getDatasetId())."/items";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDatasetId("");

        $context['name'] = "eolymp.taxonomy.DatasetService/CreateEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateEntryOutput::class, $context);
    }

    /**
     * @param DeleteEntryInput $input message
     * @param array $context request parameters
     *
     * @return DeleteEntryOutput output message
     */
    public function DeleteEntry(DeleteEntryInput $input, array $context = [])
    {
        $path = "/datasets/".rawurlencode($input->getDatasetId())."/items/".rawurlencode($input->getEntryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDatasetId("");
        $input->setEntryId("");

        $context['name'] = "eolymp.taxonomy.DatasetService/DeleteEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteEntryOutput::class, $context);
    }

    /**
     * @param UpdateEntryInput $input message
     * @param array $context request parameters
     *
     * @return UpdateEntryOutput output message
     */
    public function UpdateEntry(UpdateEntryInput $input, array $context = [])
    {
        $path = "/datasets/".rawurlencode($input->getDatasetId())."/items/".rawurlencode($input->getEntryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDatasetId("");
        $input->setEntryId("");

        $context['name'] = "eolymp.taxonomy.DatasetService/UpdateEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateEntryOutput::class, $context);
    }

    /**
     * @param DescribeEntryInput $input message
     * @param array $context request parameters
     *
     * @return DescribeEntryOutput output message
     */
    public function DescribeEntry(DescribeEntryInput $input, array $context = [])
    {
        $path = "/datasets/".rawurlencode($input->getDatasetId())."/items/".rawurlencode($input->getEntryId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDatasetId("");
        $input->setEntryId("");

        $context['name'] = "eolymp.taxonomy.DatasetService/DescribeEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeEntryOutput::class, $context);
    }

    /**
     * @param ListEntriesInput $input message
     * @param array $context request parameters
     *
     * @return ListEntriesOutput output message
     */
    public function ListEntries(ListEntriesInput $input, array $context = [])
    {
        $path = "/datasets/".rawurlencode($input->getDatasetId())."/items";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDatasetId("");

        $context['name'] = "eolymp.taxonomy.DatasetService/ListEntries";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListEntriesOutput::class, $context);
    }

    /**
     * @param TranslateEntryInput $input message
     * @param array $context request parameters
     *
     * @return TranslateEntryOutput output message
     */
    public function TranslateEntry(TranslateEntryInput $input, array $context = [])
    {
        $path = "/datasets/".rawurlencode($input->getDatasetId())."/items/".rawurlencode($input->getEntryId())."/translations/".rawurlencode($input->getLocale());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDatasetId("");
        $input->setEntryId("");
        $input->setLocale("");

        $context['name'] = "eolymp.taxonomy.DatasetService/TranslateEntry";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, TranslateEntryOutput::class, $context);
    }

    /**
     * @param DeleteTranslationInput $input message
     * @param array $context request parameters
     *
     * @return DeleteTranslationOutput output message
     */
    public function DeleteTranslation(DeleteTranslationInput $input, array $context = [])
    {
        $path = "/datasets/".rawurlencode($input->getDatasetId())."/items/".rawurlencode($input->getEntryId())."/translations/".rawurlencode($input->getLocale());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDatasetId("");
        $input->setEntryId("");
        $input->setLocale("");

        $context['name'] = "eolymp.taxonomy.DatasetService/DeleteTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteTranslationOutput::class, $context);
    }

    /**
     * @param ListTranslationsInput $input message
     * @param array $context request parameters
     *
     * @return ListTranslationsOutput output message
     */
    public function ListTranslations(ListTranslationsInput $input, array $context = [])
    {
        $path = "/datasets/".rawurlencode($input->getDatasetId())."/items/".rawurlencode($input->getEntryId())."/translations";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setDatasetId("");
        $input->setEntryId("");

        $context['name'] = "eolymp.taxonomy.DatasetService/ListTranslations";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, ListTranslationsOutput::class, $context);
    }

}
