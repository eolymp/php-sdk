<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: eolymp/newsletter/recipient.proto

namespace Eolymp\Newsletter\Recipient;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.newsletter.Recipient.Status</code>
 */
class Status
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_STATUS = 0;</code>
     */
    const UNKNOWN_STATUS = 0;
    /**
     * Generated from protobuf enum <code>CREATED = 1;</code>
     */
    const CREATED = 1;
    /**
     * Generated from protobuf enum <code>PENDING = 2;</code>
     */
    const PENDING = 2;
    /**
     * Generated from protobuf enum <code>SENT = 3;</code>
     */
    const SENT = 3;
    /**
     * Generated from protobuf enum <code>DELIVERED = 4;</code>
     */
    const DELIVERED = 4;
    /**
     * Generated from protobuf enum <code>BOUNCED = 5;</code>
     */
    const BOUNCED = 5;
    /**
     * Generated from protobuf enum <code>SKIPPED = 6;</code>
     */
    const SKIPPED = 6;
    /**
     * Generated from protobuf enum <code>ERROR = 7;</code>
     */
    const ERROR = 7;

    private static $valueToName = [
        self::UNKNOWN_STATUS => 'UNKNOWN_STATUS',
        self::CREATED => 'CREATED',
        self::PENDING => 'PENDING',
        self::SENT => 'SENT',
        self::DELIVERED => 'DELIVERED',
        self::BOUNCED => 'BOUNCED',
        self::SKIPPED => 'SKIPPED',
        self::ERROR => 'ERROR',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

