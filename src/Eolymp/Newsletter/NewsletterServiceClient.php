<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Newsletter;

class NewsletterServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param DescribeNewsletterInput $input message
     * @param array $context request parameters
     *
     * @return DescribeNewsletterOutput output message
     */
    public function DescribeNewsletter(DescribeNewsletterInput $input, array $context = [])
    {
        $path = "/newsletter/".rawurlencode($input->getNewsletterId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNewsletterId("");

        $context['name'] = "eolymp.newsletter.NewsletterService/DescribeNewsletter";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeNewsletterOutput::class, $context);
    }

    /**
     * @param ListNewslettersInput $input message
     * @param array $context request parameters
     *
     * @return ListNewslettersOutput output message
     */
    public function ListNewsletters(ListNewslettersInput $input, array $context = [])
    {
        $path = "/newsletter";

        $context['name'] = "eolymp.newsletter.NewsletterService/ListNewsletters";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListNewslettersOutput::class, $context);
    }

    /**
     * @param CreateNewsletterInput $input message
     * @param array $context request parameters
     *
     * @return CreateNewsletterOutput output message
     */
    public function CreateNewsletter(CreateNewsletterInput $input, array $context = [])
    {
        $path = "/newsletter";

        $context['name'] = "eolymp.newsletter.NewsletterService/CreateNewsletter";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateNewsletterOutput::class, $context);
    }

    /**
     * @param UpdateNewsletterInput $input message
     * @param array $context request parameters
     *
     * @return UpdateNewsletterOutput output message
     */
    public function UpdateNewsletter(UpdateNewsletterInput $input, array $context = [])
    {
        $path = "/newsletter/".rawurlencode($input->getNewsletterId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNewsletterId("");

        $context['name'] = "eolymp.newsletter.NewsletterService/UpdateNewsletter";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateNewsletterOutput::class, $context);
    }

    /**
     * @param DeleteNewsletterInput $input message
     * @param array $context request parameters
     *
     * @return DeleteNewsletterOutput output message
     */
    public function DeleteNewsletter(DeleteNewsletterInput $input, array $context = [])
    {
        $path = "/newsletter/".rawurlencode($input->getNewsletterId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNewsletterId("");

        $context['name'] = "eolymp.newsletter.NewsletterService/DeleteNewsletter";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteNewsletterOutput::class, $context);
    }

    /**
     * @param SendNewsletterInput $input message
     * @param array $context request parameters
     *
     * @return SendNewsletterOutput output message
     */
    public function SendNewsletter(SendNewsletterInput $input, array $context = [])
    {
        $path = "/newsletter/".rawurlencode($input->getNewsletterId())."/send";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNewsletterId("");

        $context['name'] = "eolymp.newsletter.NewsletterService/SendNewsletter";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, SendNewsletterOutput::class, $context);
    }

    /**
     * @param TestNewsletterInput $input message
     * @param array $context request parameters
     *
     * @return TestNewsletterOutput output message
     */
    public function TestNewsletter(TestNewsletterInput $input, array $context = [])
    {
        $path = "/newsletter/".rawurlencode($input->getNewsletterId())."/test";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNewsletterId("");

        $context['name'] = "eolymp.newsletter.NewsletterService/TestNewsletter";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, TestNewsletterOutput::class, $context);
    }

    /**
     * @param DescribeNewsletterTranslationInput $input message
     * @param array $context request parameters
     *
     * @return DescribeNewsletterTranslationOutput output message
     */
    public function DescribeNewsletterTranslation(DescribeNewsletterTranslationInput $input, array $context = [])
    {
        $path = "/newsletter/".rawurlencode($input->getNewsletterId())."/translations/".rawurlencode($input->getTranslationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNewsletterId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.newsletter.NewsletterService/DescribeNewsletterTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeNewsletterTranslationOutput::class, $context);
    }

    /**
     * @param ListNewsletterTranslationsInput $input message
     * @param array $context request parameters
     *
     * @return ListNewsletterTranslationsOutput output message
     */
    public function ListNewsletterTranslations(ListNewsletterTranslationsInput $input, array $context = [])
    {
        $path = "/newsletter/".rawurlencode($input->getNewsletterId())."/translations";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNewsletterId("");

        $context['name'] = "eolymp.newsletter.NewsletterService/ListNewsletterTranslations";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListNewsletterTranslationsOutput::class, $context);
    }

    /**
     * @param CreateNewsletterTranslationInput $input message
     * @param array $context request parameters
     *
     * @return CreateNewsletterTranslationOutput output message
     */
    public function CreateNewsletterTranslation(CreateNewsletterTranslationInput $input, array $context = [])
    {
        $path = "/newsletter/".rawurlencode($input->getNewsletterId())."/translations";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNewsletterId("");

        $context['name'] = "eolymp.newsletter.NewsletterService/CreateNewsletterTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateNewsletterTranslationOutput::class, $context);
    }

    /**
     * @param UpdateNewsletterTranslationInput $input message
     * @param array $context request parameters
     *
     * @return UpdateNewsletterTranslationOutput output message
     */
    public function UpdateNewsletterTranslation(UpdateNewsletterTranslationInput $input, array $context = [])
    {
        $path = "/newsletter/".rawurlencode($input->getNewsletterId())."/translations/".rawurlencode($input->getTranslationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNewsletterId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.newsletter.NewsletterService/UpdateNewsletterTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateNewsletterTranslationOutput::class, $context);
    }

    /**
     * @param DeleteNewsletterTranslationInput $input message
     * @param array $context request parameters
     *
     * @return DeleteNewsletterTranslationOutput output message
     */
    public function DeleteNewsletterTranslation(DeleteNewsletterTranslationInput $input, array $context = [])
    {
        $path = "/newsletter/".rawurlencode($input->getNewsletterId())."/translations/".rawurlencode($input->getTranslationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setNewsletterId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.newsletter.NewsletterService/DeleteNewsletterTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteNewsletterTranslationOutput::class, $context);
    }

}
