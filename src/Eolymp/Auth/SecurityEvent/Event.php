<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/auth/security_event_service.proto

namespace Eolymp\Auth\SecurityEvent;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>eolymp.auth.SecurityEvent.Event</code>
 */
class Event extends \Google\Protobuf\Internal\Message
{
    /**
     * a URI of the event type: https://schemas.openid.net/secevent/(risc|caep|oauth)/event-type/[...] or http://schemas.openid.net/event/backchannel-logout
     *
     * Generated from protobuf field <code>string type = 1;</code>
     */
    protected $type = '';
    /**
     * Generated from protobuf field <code>.eolymp.auth.SecurityEvent.Subject subject = 10;</code>
     */
    protected $subject = null;
    /**
     * Generated from protobuf field <code>.eolymp.auth.Claims claims = 11;</code>
     */
    protected $claims = null;
    /**
     * Generated from protobuf field <code>string reason = 20;</code>
     */
    protected $reason = '';
    /**
     * Generated from protobuf field <code>string state = 30;</code>
     */
    protected $state = '';
    /**
     * Generated from protobuf field <code>string token = 100;</code>
     */
    protected $token = '';
    /**
     * Generated from protobuf field <code>string token_type = 102;</code>
     */
    protected $token_type = '';
    /**
     * Generated from protobuf field <code>string token_identifier_alg = 101;</code>
     */
    protected $token_identifier_alg = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $type
     *           a URI of the event type: https://schemas.openid.net/secevent/(risc|caep|oauth)/event-type/[...] or http://schemas.openid.net/event/backchannel-logout
     *     @type \Eolymp\Auth\SecurityEvent\Subject $subject
     *     @type \Eolymp\Auth\Claims $claims
     *     @type string $reason
     *     @type string $state
     *     @type string $token
     *     @type string $token_type
     *     @type string $token_identifier_alg
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Auth\SecurityEventService::initOnce();
        parent::__construct($data);
    }

    /**
     * a URI of the event type: https://schemas.openid.net/secevent/(risc|caep|oauth)/event-type/[...] or http://schemas.openid.net/event/backchannel-logout
     *
     * Generated from protobuf field <code>string type = 1;</code>
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * a URI of the event type: https://schemas.openid.net/secevent/(risc|caep|oauth)/event-type/[...] or http://schemas.openid.net/event/backchannel-logout
     *
     * Generated from protobuf field <code>string type = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, True);
        $this->type = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.eolymp.auth.SecurityEvent.Subject subject = 10;</code>
     * @return \Eolymp\Auth\SecurityEvent\Subject|null
     */
    public function getSubject()
    {
        return $this->subject;
    }

    public function hasSubject()
    {
        return isset($this->subject);
    }

    public function clearSubject()
    {
        unset($this->subject);
    }

    /**
     * Generated from protobuf field <code>.eolymp.auth.SecurityEvent.Subject subject = 10;</code>
     * @param \Eolymp\Auth\SecurityEvent\Subject $var
     * @return $this
     */
    public function setSubject($var)
    {
        GPBUtil::checkMessage($var, \Eolymp\Auth\SecurityEvent\Subject::class);
        $this->subject = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.eolymp.auth.Claims claims = 11;</code>
     * @return \Eolymp\Auth\Claims|null
     */
    public function getClaims()
    {
        return $this->claims;
    }

    public function hasClaims()
    {
        return isset($this->claims);
    }

    public function clearClaims()
    {
        unset($this->claims);
    }

    /**
     * Generated from protobuf field <code>.eolymp.auth.Claims claims = 11;</code>
     * @param \Eolymp\Auth\Claims $var
     * @return $this
     */
    public function setClaims($var)
    {
        GPBUtil::checkMessage($var, \Eolymp\Auth\Claims::class);
        $this->claims = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string reason = 20;</code>
     * @return string
     */
    public function getReason()
    {
        return $this->reason;
    }

    /**
     * Generated from protobuf field <code>string reason = 20;</code>
     * @param string $var
     * @return $this
     */
    public function setReason($var)
    {
        GPBUtil::checkString($var, True);
        $this->reason = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string state = 30;</code>
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Generated from protobuf field <code>string state = 30;</code>
     * @param string $var
     * @return $this
     */
    public function setState($var)
    {
        GPBUtil::checkString($var, True);
        $this->state = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string token = 100;</code>
     * @return string
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * Generated from protobuf field <code>string token = 100;</code>
     * @param string $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->token = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string token_type = 102;</code>
     * @return string
     */
    public function getTokenType()
    {
        return $this->token_type;
    }

    /**
     * Generated from protobuf field <code>string token_type = 102;</code>
     * @param string $var
     * @return $this
     */
    public function setTokenType($var)
    {
        GPBUtil::checkString($var, True);
        $this->token_type = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string token_identifier_alg = 101;</code>
     * @return string
     */
    public function getTokenIdentifierAlg()
    {
        return $this->token_identifier_alg;
    }

    /**
     * Generated from protobuf field <code>string token_identifier_alg = 101;</code>
     * @param string $var
     * @return $this
     */
    public function setTokenIdentifierAlg($var)
    {
        GPBUtil::checkString($var, True);
        $this->token_identifier_alg = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Event::class, \Eolymp\Auth\SecurityEvent_Event::class);

