<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/executor/status_v2.proto

namespace Eolymp\Executor\StatusV2;

use UnexpectedValueException;

/**
 * Type of the status report
 *
 * Protobuf type <code>eolymp.executor.StatusV2.Type</code>
 */
class Type
{
    /**
     * Report without type should be ignored.
     *
     * Generated from protobuf enum <code>UNSPECIFIED = 0;</code>
     */
    const UNSPECIFIED = 0;
    /**
     * Update report contains information about runs, inspect runs to see their status.
     * Update report might be partial in case task was split among multiple agents.
     *
     * Generated from protobuf enum <code>UPDATE = 1;</code>
     */
    const UPDATE = 1;
    /**
     * Error report means agent has encountered an error and couldn't perform runs. This is normally related to
     * configuration or compilation error.
     *
     * Generated from protobuf enum <code>ERROR = 2;</code>
     */
    const ERROR = 2;

    private static $valueToName = [
        self::UNSPECIFIED => 'UNSPECIFIED',
        self::UPDATE => 'UPDATE',
        self::ERROR => 'ERROR',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Type::class, \Eolymp\Executor\StatusV2_Type::class);

