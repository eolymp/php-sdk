<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/executor/status_v2.proto

namespace Eolymp\Executor\StatusV2\Run;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.executor.StatusV2.Run.Status</code>
 */
class Status
{
    /**
     * Should not be used
     *
     * Generated from protobuf enum <code>UNSPECIFIED = 0;</code>
     */
    const UNSPECIFIED = 0;
    /**
     * Finished
     *
     * Generated from protobuf enum <code>COMPLETE = 1;</code>
     */
    const COMPLETE = 1;
    /**
     * Pending execution
     *
     * Generated from protobuf enum <code>PENDING = 2;</code>
     */
    const PENDING = 2;
    /**
     * Executing
     *
     * Generated from protobuf enum <code>EXECUTING = 3;</code>
     */
    const EXECUTING = 3;
    /**
     * One of the steps failed
     *
     * Generated from protobuf enum <code>RUN_ERROR = 4;</code>
     */
    const RUN_ERROR = 4;
    /**
     * Run has been skipped
     *
     * Generated from protobuf enum <code>SKIPPED = 6;</code>
     */
    const SKIPPED = 6;

    private static $valueToName = [
        self::UNSPECIFIED => 'UNSPECIFIED',
        self::COMPLETE => 'COMPLETE',
        self::PENDING => 'PENDING',
        self::EXECUTING => 'EXECUTING',
        self::RUN_ERROR => 'RUN_ERROR',
        self::SKIPPED => 'SKIPPED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Status::class, \Eolymp\Executor\StatusV2_Run_Status::class);

