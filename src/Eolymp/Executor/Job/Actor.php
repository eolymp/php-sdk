<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/executor/job.proto

namespace Eolymp\Executor\Job;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Actor is an executable used in the task
 *
 * Generated from protobuf message <code>eolymp.executor.Job.Actor</code>
 */
class Actor extends \Google\Protobuf\Internal\Message
{
    /**
     * Unique name, used to refer to the actor from other places
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     * Runtime
     *
     * Generated from protobuf field <code>string runtime = 10;</code>
     */
    protected $runtime = '';
    /**
     * Source code ERN
     *
     * Generated from protobuf field <code>string source_ern = 11;</code>
     */
    protected $source_ern = '';
    /**
     * Additional environment variable during init
     *
     * Generated from protobuf field <code>map<string, string> init_env = 40;</code>
     */
    private $init_env;
    /**
     * Additional files mounted before init
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.File init_files = 41;</code>
     */
    private $init_files;
    /**
     * Arguments passed to the program during execution
     *
     * Generated from protobuf field <code>repeated string args = 20;</code>
     */
    private $args;
    /**
     * Environment variables
     *
     * Generated from protobuf field <code>map<string, string> env = 21;</code>
     */
    private $env;
    /**
     * Local path to the stdin source (relative to workdir)
     *
     * Generated from protobuf field <code>string stdin = 30;</code>
     */
    protected $stdin = '';
    /**
     * Local path to the stdout destination (relative to workdir)
     *
     * Generated from protobuf field <code>string stdout = 31;</code>
     */
    protected $stdout = '';
    /**
     * Local path to the stderr destination (relative to workdir), can be same as stdout
     *
     * Generated from protobuf field <code>string stderr = 32;</code>
     */
    protected $stderr = '';
    /**
     * If true, open stdin file after stdout and stderr, this is used when two actors communicate using named pipes and should not interlock each other.
     *
     * Generated from protobuf field <code>bool stdin_last = 33;</code>
     */
    protected $stdin_last = false;
    /**
     * Defines how to treat program exit status and output parameters
     *
     * Generated from protobuf field <code>.eolymp.executor.Job.Actor.OutputFormat output_format = 35;</code>
     */
    protected $output_format = 0;
    /**
     * Allows to mount workdir from another actor locally
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Mount mount = 50;</code>
     */
    private $mount;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Unique name, used to refer to the actor from other places
     *     @type string $runtime
     *           Runtime
     *     @type string $source_ern
     *           Source code ERN
     *     @type array|\Google\Protobuf\Internal\MapField $init_env
     *           Additional environment variable during init
     *     @type \Eolymp\Executor\Job\File[]|\Google\Protobuf\Internal\RepeatedField $init_files
     *           Additional files mounted before init
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $args
     *           Arguments passed to the program during execution
     *     @type array|\Google\Protobuf\Internal\MapField $env
     *           Environment variables
     *     @type string $stdin
     *           Local path to the stdin source (relative to workdir)
     *     @type string $stdout
     *           Local path to the stdout destination (relative to workdir)
     *     @type string $stderr
     *           Local path to the stderr destination (relative to workdir), can be same as stdout
     *     @type bool $stdin_last
     *           If true, open stdin file after stdout and stderr, this is used when two actors communicate using named pipes and should not interlock each other.
     *     @type int $output_format
     *           Defines how to treat program exit status and output parameters
     *     @type \Eolymp\Executor\Job\Mount[]|\Google\Protobuf\Internal\RepeatedField $mount
     *           Allows to mount workdir from another actor locally
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Executor\Job::initOnce();
        parent::__construct($data);
    }

    /**
     * Unique name, used to refer to the actor from other places
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Unique name, used to refer to the actor from other places
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Runtime
     *
     * Generated from protobuf field <code>string runtime = 10;</code>
     * @return string
     */
    public function getRuntime()
    {
        return $this->runtime;
    }

    /**
     * Runtime
     *
     * Generated from protobuf field <code>string runtime = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setRuntime($var)
    {
        GPBUtil::checkString($var, True);
        $this->runtime = $var;

        return $this;
    }

    /**
     * Source code ERN
     *
     * Generated from protobuf field <code>string source_ern = 11;</code>
     * @return string
     */
    public function getSourceErn()
    {
        return $this->source_ern;
    }

    /**
     * Source code ERN
     *
     * Generated from protobuf field <code>string source_ern = 11;</code>
     * @param string $var
     * @return $this
     */
    public function setSourceErn($var)
    {
        GPBUtil::checkString($var, True);
        $this->source_ern = $var;

        return $this;
    }

    /**
     * Additional environment variable during init
     *
     * Generated from protobuf field <code>map<string, string> init_env = 40;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getInitEnv()
    {
        return $this->init_env;
    }

    /**
     * Additional environment variable during init
     *
     * Generated from protobuf field <code>map<string, string> init_env = 40;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setInitEnv($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->init_env = $arr;

        return $this;
    }

    /**
     * Additional files mounted before init
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.File init_files = 41;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getInitFiles()
    {
        return $this->init_files;
    }

    /**
     * Additional files mounted before init
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.File init_files = 41;</code>
     * @param \Eolymp\Executor\Job\File[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setInitFiles($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Executor\Job\File::class);
        $this->init_files = $arr;

        return $this;
    }

    /**
     * Arguments passed to the program during execution
     *
     * Generated from protobuf field <code>repeated string args = 20;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getArgs()
    {
        return $this->args;
    }

    /**
     * Arguments passed to the program during execution
     *
     * Generated from protobuf field <code>repeated string args = 20;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setArgs($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->args = $arr;

        return $this;
    }

    /**
     * Environment variables
     *
     * Generated from protobuf field <code>map<string, string> env = 21;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getEnv()
    {
        return $this->env;
    }

    /**
     * Environment variables
     *
     * Generated from protobuf field <code>map<string, string> env = 21;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setEnv($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->env = $arr;

        return $this;
    }

    /**
     * Local path to the stdin source (relative to workdir)
     *
     * Generated from protobuf field <code>string stdin = 30;</code>
     * @return string
     */
    public function getStdin()
    {
        return $this->stdin;
    }

    /**
     * Local path to the stdin source (relative to workdir)
     *
     * Generated from protobuf field <code>string stdin = 30;</code>
     * @param string $var
     * @return $this
     */
    public function setStdin($var)
    {
        GPBUtil::checkString($var, True);
        $this->stdin = $var;

        return $this;
    }

    /**
     * Local path to the stdout destination (relative to workdir)
     *
     * Generated from protobuf field <code>string stdout = 31;</code>
     * @return string
     */
    public function getStdout()
    {
        return $this->stdout;
    }

    /**
     * Local path to the stdout destination (relative to workdir)
     *
     * Generated from protobuf field <code>string stdout = 31;</code>
     * @param string $var
     * @return $this
     */
    public function setStdout($var)
    {
        GPBUtil::checkString($var, True);
        $this->stdout = $var;

        return $this;
    }

    /**
     * Local path to the stderr destination (relative to workdir), can be same as stdout
     *
     * Generated from protobuf field <code>string stderr = 32;</code>
     * @return string
     */
    public function getStderr()
    {
        return $this->stderr;
    }

    /**
     * Local path to the stderr destination (relative to workdir), can be same as stdout
     *
     * Generated from protobuf field <code>string stderr = 32;</code>
     * @param string $var
     * @return $this
     */
    public function setStderr($var)
    {
        GPBUtil::checkString($var, True);
        $this->stderr = $var;

        return $this;
    }

    /**
     * If true, open stdin file after stdout and stderr, this is used when two actors communicate using named pipes and should not interlock each other.
     *
     * Generated from protobuf field <code>bool stdin_last = 33;</code>
     * @return bool
     */
    public function getStdinLast()
    {
        return $this->stdin_last;
    }

    /**
     * If true, open stdin file after stdout and stderr, this is used when two actors communicate using named pipes and should not interlock each other.
     *
     * Generated from protobuf field <code>bool stdin_last = 33;</code>
     * @param bool $var
     * @return $this
     */
    public function setStdinLast($var)
    {
        GPBUtil::checkBool($var);
        $this->stdin_last = $var;

        return $this;
    }

    /**
     * Defines how to treat program exit status and output parameters
     *
     * Generated from protobuf field <code>.eolymp.executor.Job.Actor.OutputFormat output_format = 35;</code>
     * @return int
     */
    public function getOutputFormat()
    {
        return $this->output_format;
    }

    /**
     * Defines how to treat program exit status and output parameters
     *
     * Generated from protobuf field <code>.eolymp.executor.Job.Actor.OutputFormat output_format = 35;</code>
     * @param int $var
     * @return $this
     */
    public function setOutputFormat($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Executor\Job_Actor_OutputFormat::class);
        $this->output_format = $var;

        return $this;
    }

    /**
     * Allows to mount workdir from another actor locally
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Mount mount = 50;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getMount()
    {
        return $this->mount;
    }

    /**
     * Allows to mount workdir from another actor locally
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Mount mount = 50;</code>
     * @param \Eolymp\Executor\Job\Mount[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setMount($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Executor\Job\Mount::class);
        $this->mount = $arr;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Actor::class, \Eolymp\Executor\Job_Actor::class);

