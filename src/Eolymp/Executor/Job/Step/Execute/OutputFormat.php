<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/executor/job.proto

namespace Eolymp\Executor\Job\Step\Execute;

use UnexpectedValueException;

/**
 * Output format defines how to read program execution status.
 *
 * Protobuf type <code>eolymp.executor.Job.Step.Execute.OutputFormat</code>
 */
class OutputFormat
{
    /**
     * Results of the execution are based on program's exit code, 0 - SUCCESS, non-0 - FAILURE.
     *
     * Generated from protobuf enum <code>EXIT_CODE = 0;</code>
     */
    const EXIT_CODE = 0;
    /**
     * Results of the execution are based on testlib.h (https://github.com/MikeMirzayanov/testlib) convention.
     *
     * Generated from protobuf enum <code>TESTLIB_H = 1;</code>
     */
    const TESTLIB_H = 1;

    private static $valueToName = [
        self::EXIT_CODE => 'EXIT_CODE',
        self::TESTLIB_H => 'TESTLIB_H',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(OutputFormat::class, \Eolymp\Executor\Job_Step_Execute_OutputFormat::class);

