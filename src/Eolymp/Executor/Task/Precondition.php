<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/executor/task.proto

namespace Eolymp\Executor\Task;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Precondition defines criteria for a run to be executed. If this criteria does not meet, the run will be skipped.
 *
 * Generated from protobuf message <code>eolymp.executor.Task.Precondition</code>
 */
class Precondition extends \Google\Protobuf\Internal\Message
{
    /**
     * Precondition will apply to all runs matching this label selector.
     * Run must have all labels defined by selector. Empty selector will match all runs.
     *
     * Generated from protobuf field <code>repeated string selector = 1;</code>
     */
    private $selector;
    /**
     * Defines label selector for runs which must be ACCEPTED before.
     * Dependent runs will match if they have at least one of the labels defined in depends_on.
     * To match dependent runs with by multiple labels, use two different preconditions.
     * Empty depends_on means no dependencies.
     *
     * Generated from protobuf field <code>repeated string depends_on = 10;</code>
     */
    private $depends_on;
    /**
     * Skip the rest of the runs if one fails.
     *
     * Generated from protobuf field <code>bool stop_on_failure = 11;</code>
     */
    protected $stop_on_failure = false;
    /**
     * Defines maximum execution time for all runs matching this precondition.
     * Accepted runs are not counted towards execution time.
     * Once max_execution_time is reached, the rest of the tests are skipped.
     *
     * Generated from protobuf field <code>uint32 max_execution_time = 12;</code>
     */
    protected $max_execution_time = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $selector
     *           Precondition will apply to all runs matching this label selector.
     *           Run must have all labels defined by selector. Empty selector will match all runs.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $depends_on
     *           Defines label selector for runs which must be ACCEPTED before.
     *           Dependent runs will match if they have at least one of the labels defined in depends_on.
     *           To match dependent runs with by multiple labels, use two different preconditions.
     *           Empty depends_on means no dependencies.
     *     @type bool $stop_on_failure
     *           Skip the rest of the runs if one fails.
     *     @type int $max_execution_time
     *           Defines maximum execution time for all runs matching this precondition.
     *           Accepted runs are not counted towards execution time.
     *           Once max_execution_time is reached, the rest of the tests are skipped.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Executor\Task::initOnce();
        parent::__construct($data);
    }

    /**
     * Precondition will apply to all runs matching this label selector.
     * Run must have all labels defined by selector. Empty selector will match all runs.
     *
     * Generated from protobuf field <code>repeated string selector = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getSelector()
    {
        return $this->selector;
    }

    /**
     * Precondition will apply to all runs matching this label selector.
     * Run must have all labels defined by selector. Empty selector will match all runs.
     *
     * Generated from protobuf field <code>repeated string selector = 1;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setSelector($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->selector = $arr;

        return $this;
    }

    /**
     * Defines label selector for runs which must be ACCEPTED before.
     * Dependent runs will match if they have at least one of the labels defined in depends_on.
     * To match dependent runs with by multiple labels, use two different preconditions.
     * Empty depends_on means no dependencies.
     *
     * Generated from protobuf field <code>repeated string depends_on = 10;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getDependsOn()
    {
        return $this->depends_on;
    }

    /**
     * Defines label selector for runs which must be ACCEPTED before.
     * Dependent runs will match if they have at least one of the labels defined in depends_on.
     * To match dependent runs with by multiple labels, use two different preconditions.
     * Empty depends_on means no dependencies.
     *
     * Generated from protobuf field <code>repeated string depends_on = 10;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setDependsOn($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->depends_on = $arr;

        return $this;
    }

    /**
     * Skip the rest of the runs if one fails.
     *
     * Generated from protobuf field <code>bool stop_on_failure = 11;</code>
     * @return bool
     */
    public function getStopOnFailure()
    {
        return $this->stop_on_failure;
    }

    /**
     * Skip the rest of the runs if one fails.
     *
     * Generated from protobuf field <code>bool stop_on_failure = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setStopOnFailure($var)
    {
        GPBUtil::checkBool($var);
        $this->stop_on_failure = $var;

        return $this;
    }

    /**
     * Defines maximum execution time for all runs matching this precondition.
     * Accepted runs are not counted towards execution time.
     * Once max_execution_time is reached, the rest of the tests are skipped.
     *
     * Generated from protobuf field <code>uint32 max_execution_time = 12;</code>
     * @return int
     */
    public function getMaxExecutionTime()
    {
        return $this->max_execution_time;
    }

    /**
     * Defines maximum execution time for all runs matching this precondition.
     * Accepted runs are not counted towards execution time.
     * Once max_execution_time is reached, the rest of the tests are skipped.
     *
     * Generated from protobuf field <code>uint32 max_execution_time = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxExecutionTime($var)
    {
        GPBUtil::checkUint32($var);
        $this->max_execution_time = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Precondition::class, \Eolymp\Executor\Task_Precondition::class);

