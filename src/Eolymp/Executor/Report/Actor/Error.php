<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/executor/report.proto

namespace Eolymp\Executor\Report\Actor;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.executor.Report.Actor.Error</code>
 */
class Error
{
    /**
     * no error, actor was initialized successfully
     *
     * Generated from protobuf enum <code>NONE = 0;</code>
     */
    const NONE = 0;
    /**
     * compilation error, see error_message for compiler output
     *
     * Generated from protobuf enum <code>INIT_ERROR = 1;</code>
     */
    const INIT_ERROR = 1;
    /**
     * internal error, see error_message for details
     *
     * Generated from protobuf enum <code>INTERNAL_ERROR = 3;</code>
     */
    const INTERNAL_ERROR = 3;

    private static $valueToName = [
        self::NONE => 'NONE',
        self::INIT_ERROR => 'INIT_ERROR',
        self::INTERNAL_ERROR => 'INTERNAL_ERROR',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Error::class, \Eolymp\Executor\Report_Actor_Error::class);

