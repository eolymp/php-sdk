<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/executor/report.proto

namespace Eolymp\Executor\Report;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Step represents a status for a single run operation.
 *
 * Generated from protobuf message <code>eolymp.executor.Report.Step</code>
 */
class Step extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     * Generated from protobuf field <code>.eolymp.executor.Report.Step.Outcome outcome = 2;</code>
     */
    protected $outcome = 0;
    protected $output;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *     @type int $outcome
     *     @type \Eolymp\Executor\Report\Step\Execute $execute
     *     @type \Eolymp\Executor\Report\Step\Upload $upload
     *     @type \Eolymp\Executor\Report\Step\Group $group
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Executor\Report::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.eolymp.executor.Report.Step.Outcome outcome = 2;</code>
     * @return int
     */
    public function getOutcome()
    {
        return $this->outcome;
    }

    /**
     * Generated from protobuf field <code>.eolymp.executor.Report.Step.Outcome outcome = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setOutcome($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Executor\Report_Step_Outcome::class);
        $this->outcome = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.eolymp.executor.Report.Step.Execute execute = 12;</code>
     * @return \Eolymp\Executor\Report\Step\Execute
     */
    public function getExecute()
    {
        return $this->readOneof(12);
    }

    /**
     * Generated from protobuf field <code>.eolymp.executor.Report.Step.Execute execute = 12;</code>
     * @param \Eolymp\Executor\Report\Step\Execute $var
     * @return $this
     */
    public function setExecute($var)
    {
        GPBUtil::checkMessage($var, \Eolymp\Executor\Report_Step_Execute::class);
        $this->writeOneof(12, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.eolymp.executor.Report.Step.Upload upload = 13;</code>
     * @return \Eolymp\Executor\Report\Step\Upload
     */
    public function getUpload()
    {
        return $this->readOneof(13);
    }

    /**
     * Generated from protobuf field <code>.eolymp.executor.Report.Step.Upload upload = 13;</code>
     * @param \Eolymp\Executor\Report\Step\Upload $var
     * @return $this
     */
    public function setUpload($var)
    {
        GPBUtil::checkMessage($var, \Eolymp\Executor\Report_Step_Upload::class);
        $this->writeOneof(13, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.eolymp.executor.Report.Step.Group group = 14;</code>
     * @return \Eolymp\Executor\Report\Step\Group
     */
    public function getGroup()
    {
        return $this->readOneof(14);
    }

    /**
     * Generated from protobuf field <code>.eolymp.executor.Report.Step.Group group = 14;</code>
     * @param \Eolymp\Executor\Report\Step\Group $var
     * @return $this
     */
    public function setGroup($var)
    {
        GPBUtil::checkMessage($var, \Eolymp\Executor\Report_Step_Group::class);
        $this->writeOneof(14, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getOutput()
    {
        return $this->whichOneof("output");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Step::class, \Eolymp\Executor\Report_Step::class);

