<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/executor/report.proto

namespace Eolymp\Executor\Report;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.executor.Report.State</code>
 */
class State
{
    /**
     * Generated from protobuf enum <code>UNSPECIFIED = 0;</code>
     */
    const UNSPECIFIED = 0;
    /**
     * Generated from protobuf enum <code>PENDING = 1;</code>
     */
    const PENDING = 1;
    /**
     * Generated from protobuf enum <code>EXECUTING = 2;</code>
     */
    const EXECUTING = 2;
    /**
     * Generated from protobuf enum <code>COMPLETE = 3;</code>
     */
    const COMPLETE = 3;
    /**
     * Generated from protobuf enum <code>FAILED = 4;</code>
     */
    const FAILED = 4;
    /**
     * Generated from protobuf enum <code>BLOCKED = 5;</code>
     */
    const BLOCKED = 5;
    /**
     * Generated from protobuf enum <code>SKIPPED = 6;</code>
     */
    const SKIPPED = 6;

    private static $valueToName = [
        self::UNSPECIFIED => 'UNSPECIFIED',
        self::PENDING => 'PENDING',
        self::EXECUTING => 'EXECUTING',
        self::COMPLETE => 'COMPLETE',
        self::FAILED => 'FAILED',
        self::BLOCKED => 'BLOCKED',
        self::SKIPPED => 'SKIPPED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(State::class, \Eolymp\Executor\Report_State::class);

