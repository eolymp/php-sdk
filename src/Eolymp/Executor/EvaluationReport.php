<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/executor/evaluation_report.proto

namespace Eolymp\Executor;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Status represents results of the executing task.
 *
 * Generated from protobuf message <code>eolymp.executor.EvaluationReport</code>
 */
class EvaluationReport extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string task_id = 1;</code>
     */
    protected $task_id = '';
    /**
     * Generated from protobuf field <code>string reference = 2;</code>
     */
    protected $reference = '';
    /**
     * Generated from protobuf field <code>string origin = 3;</code>
     */
    protected $origin = '';
    /**
     * Generated from protobuf field <code>map<string, string> metadata = 5;</code>
     */
    private $metadata;
    /**
     * Generated from protobuf field <code>string agent = 4;</code>
     */
    protected $agent = '';
    /**
     * Source code signature is a unique fingerprint of the code, calculated by agent for a specific language.
     * It should be used to find identical or similar tasks. Signature can be calculated only for some languages.
     *
     * Generated from protobuf field <code>string signature = 50;</code>
     */
    protected $signature = '';
    /**
     * Always increasing report version.
     * Each time agent emits a report it would increase version, so listener can put reports in the right order: process
     * newer and ignore older.
     * In case runs of a single task are distributed among multiple agents, each agent will report version independently,
     * so listener must track versions per run (eg. run #1 last update is v.15, run #2 last update is v.41, if listener
     * receives run #1 v.20 it's newer and should be processed, but run #2 v.20 should be ignored).
     *
     * Generated from protobuf field <code>uint32 version = 100;</code>
     */
    protected $version = 0;
    /**
     * Report type, see explanation to Type enumeration
     * deprecated: use status instead
     *
     * Generated from protobuf field <code>.eolymp.executor.EvaluationReport.Type type = 10;</code>
     */
    protected $type = 0;
    /**
     * Status of the evaluation
     *
     * Generated from protobuf field <code>.eolymp.executor.EvaluationReport.Status status = 11;</code>
     */
    protected $status = 0;
    /**
     * Error message
     *
     * Generated from protobuf field <code>string error_message = 20;</code>
     */
    protected $error_message = '';
    /**
     * Generated from protobuf field <code>repeated .eolymp.executor.EvaluationReport.Run runs = 40;</code>
     */
    private $runs;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $task_id
     *     @type string $reference
     *     @type string $origin
     *     @type array|\Google\Protobuf\Internal\MapField $metadata
     *     @type string $agent
     *     @type string $signature
     *           Source code signature is a unique fingerprint of the code, calculated by agent for a specific language.
     *           It should be used to find identical or similar tasks. Signature can be calculated only for some languages.
     *     @type int $version
     *           Always increasing report version.
     *           Each time agent emits a report it would increase version, so listener can put reports in the right order: process
     *           newer and ignore older.
     *           In case runs of a single task are distributed among multiple agents, each agent will report version independently,
     *           so listener must track versions per run (eg. run #1 last update is v.15, run #2 last update is v.41, if listener
     *           receives run #1 v.20 it's newer and should be processed, but run #2 v.20 should be ignored).
     *     @type int $type
     *           Report type, see explanation to Type enumeration
     *           deprecated: use status instead
     *     @type int $status
     *           Status of the evaluation
     *     @type string $error_message
     *           Error message
     *     @type array<\Eolymp\Executor\EvaluationReport\Run>|\Google\Protobuf\Internal\RepeatedField $runs
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Executor\EvaluationReport::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string task_id = 1;</code>
     * @return string
     */
    public function getTaskId()
    {
        return $this->task_id;
    }

    /**
     * Generated from protobuf field <code>string task_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setTaskId($var)
    {
        GPBUtil::checkString($var, True);
        $this->task_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string reference = 2;</code>
     * @return string
     */
    public function getReference()
    {
        return $this->reference;
    }

    /**
     * Generated from protobuf field <code>string reference = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setReference($var)
    {
        GPBUtil::checkString($var, True);
        $this->reference = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string origin = 3;</code>
     * @return string
     */
    public function getOrigin()
    {
        return $this->origin;
    }

    /**
     * Generated from protobuf field <code>string origin = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setOrigin($var)
    {
        GPBUtil::checkString($var, True);
        $this->origin = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>map<string, string> metadata = 5;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Generated from protobuf field <code>map<string, string> metadata = 5;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setMetadata($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->metadata = $arr;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string agent = 4;</code>
     * @return string
     */
    public function getAgent()
    {
        return $this->agent;
    }

    /**
     * Generated from protobuf field <code>string agent = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setAgent($var)
    {
        GPBUtil::checkString($var, True);
        $this->agent = $var;

        return $this;
    }

    /**
     * Source code signature is a unique fingerprint of the code, calculated by agent for a specific language.
     * It should be used to find identical or similar tasks. Signature can be calculated only for some languages.
     *
     * Generated from protobuf field <code>string signature = 50;</code>
     * @return string
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * Source code signature is a unique fingerprint of the code, calculated by agent for a specific language.
     * It should be used to find identical or similar tasks. Signature can be calculated only for some languages.
     *
     * Generated from protobuf field <code>string signature = 50;</code>
     * @param string $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkString($var, True);
        $this->signature = $var;

        return $this;
    }

    /**
     * Always increasing report version.
     * Each time agent emits a report it would increase version, so listener can put reports in the right order: process
     * newer and ignore older.
     * In case runs of a single task are distributed among multiple agents, each agent will report version independently,
     * so listener must track versions per run (eg. run #1 last update is v.15, run #2 last update is v.41, if listener
     * receives run #1 v.20 it's newer and should be processed, but run #2 v.20 should be ignored).
     *
     * Generated from protobuf field <code>uint32 version = 100;</code>
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Always increasing report version.
     * Each time agent emits a report it would increase version, so listener can put reports in the right order: process
     * newer and ignore older.
     * In case runs of a single task are distributed among multiple agents, each agent will report version independently,
     * so listener must track versions per run (eg. run #1 last update is v.15, run #2 last update is v.41, if listener
     * receives run #1 v.20 it's newer and should be processed, but run #2 v.20 should be ignored).
     *
     * Generated from protobuf field <code>uint32 version = 100;</code>
     * @param int $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkUint32($var);
        $this->version = $var;

        return $this;
    }

    /**
     * Report type, see explanation to Type enumeration
     * deprecated: use status instead
     *
     * Generated from protobuf field <code>.eolymp.executor.EvaluationReport.Type type = 10;</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Report type, see explanation to Type enumeration
     * deprecated: use status instead
     *
     * Generated from protobuf field <code>.eolymp.executor.EvaluationReport.Type type = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Executor\EvaluationReport\Type::class);
        $this->type = $var;

        return $this;
    }

    /**
     * Status of the evaluation
     *
     * Generated from protobuf field <code>.eolymp.executor.EvaluationReport.Status status = 11;</code>
     * @return int
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Status of the evaluation
     *
     * Generated from protobuf field <code>.eolymp.executor.EvaluationReport.Status status = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkEnum($var, \Eolymp\Executor\EvaluationReport\Status::class);
        $this->status = $var;

        return $this;
    }

    /**
     * Error message
     *
     * Generated from protobuf field <code>string error_message = 20;</code>
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->error_message;
    }

    /**
     * Error message
     *
     * Generated from protobuf field <code>string error_message = 20;</code>
     * @param string $var
     * @return $this
     */
    public function setErrorMessage($var)
    {
        GPBUtil::checkString($var, True);
        $this->error_message = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>repeated .eolymp.executor.EvaluationReport.Run runs = 40;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getRuns()
    {
        return $this->runs;
    }

    /**
     * Generated from protobuf field <code>repeated .eolymp.executor.EvaluationReport.Run runs = 40;</code>
     * @param array<\Eolymp\Executor\EvaluationReport\Run>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setRuns($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Executor\EvaluationReport\Run::class);
        $this->runs = $arr;

        return $this;
    }

}

