<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/executor/deprecated_job.proto

namespace Eolymp\Executor;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Job represents task to be executed by judge agent.
 * deprecated
 *
 * Generated from protobuf message <code>eolymp.executor.Job</code>
 */
class Job extends \Google\Protobuf\Internal\Message
{
    /**
     * Task unique reference so originator can look up task in its database, for example, this field might be set to
     * Submission ID. Unlike ID, reference is set by client and does not have to be unique. Although, it would make
     * sense for reference to be unique within same originator, otherwise originator won't be able to correlated tasks
     * in its database.
     *
     * Generated from protobuf field <code>string reference = 1;</code>
     */
    protected $reference = '';
    /**
     * Task originator (service which has created task). This field will be added to task status reports, so consumers
     * can easily filter status reports they are interested in.
     *
     * Generated from protobuf field <code>string origin = 2;</code>
     */
    protected $origin = '';
    /**
     * Precondition define conditions when each run should be executed, if runs does not satisfy preconditions it will be skipped.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Precondition preconditions = 10;</code>
     */
    private $preconditions;
    /**
     * Actors of the task.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Actor actors = 20;</code>
     */
    private $actors;
    /**
     * Scenario defines template for runs, steps in run are merged with scenario
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Step scenario = 40;</code>
     */
    private $scenario;
    /**
     * Runs of the task.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Run runs = 30;</code>
     */
    private $runs;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $reference
     *           Task unique reference so originator can look up task in its database, for example, this field might be set to
     *           Submission ID. Unlike ID, reference is set by client and does not have to be unique. Although, it would make
     *           sense for reference to be unique within same originator, otherwise originator won't be able to correlated tasks
     *           in its database.
     *     @type string $origin
     *           Task originator (service which has created task). This field will be added to task status reports, so consumers
     *           can easily filter status reports they are interested in.
     *     @type array<\Eolymp\Executor\Task\Precondition>|\Google\Protobuf\Internal\RepeatedField $preconditions
     *           Precondition define conditions when each run should be executed, if runs does not satisfy preconditions it will be skipped.
     *     @type array<\Eolymp\Executor\Job\Actor>|\Google\Protobuf\Internal\RepeatedField $actors
     *           Actors of the task.
     *     @type array<\Eolymp\Executor\Job\Step>|\Google\Protobuf\Internal\RepeatedField $scenario
     *           Scenario defines template for runs, steps in run are merged with scenario
     *     @type array<\Eolymp\Executor\Job\Run>|\Google\Protobuf\Internal\RepeatedField $runs
     *           Runs of the task.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Executor\DeprecatedJob::initOnce();
        parent::__construct($data);
    }

    /**
     * Task unique reference so originator can look up task in its database, for example, this field might be set to
     * Submission ID. Unlike ID, reference is set by client and does not have to be unique. Although, it would make
     * sense for reference to be unique within same originator, otherwise originator won't be able to correlated tasks
     * in its database.
     *
     * Generated from protobuf field <code>string reference = 1;</code>
     * @return string
     */
    public function getReference()
    {
        return $this->reference;
    }

    /**
     * Task unique reference so originator can look up task in its database, for example, this field might be set to
     * Submission ID. Unlike ID, reference is set by client and does not have to be unique. Although, it would make
     * sense for reference to be unique within same originator, otherwise originator won't be able to correlated tasks
     * in its database.
     *
     * Generated from protobuf field <code>string reference = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setReference($var)
    {
        GPBUtil::checkString($var, True);
        $this->reference = $var;

        return $this;
    }

    /**
     * Task originator (service which has created task). This field will be added to task status reports, so consumers
     * can easily filter status reports they are interested in.
     *
     * Generated from protobuf field <code>string origin = 2;</code>
     * @return string
     */
    public function getOrigin()
    {
        return $this->origin;
    }

    /**
     * Task originator (service which has created task). This field will be added to task status reports, so consumers
     * can easily filter status reports they are interested in.
     *
     * Generated from protobuf field <code>string origin = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setOrigin($var)
    {
        GPBUtil::checkString($var, True);
        $this->origin = $var;

        return $this;
    }

    /**
     * Precondition define conditions when each run should be executed, if runs does not satisfy preconditions it will be skipped.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Precondition preconditions = 10;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getPreconditions()
    {
        return $this->preconditions;
    }

    /**
     * Precondition define conditions when each run should be executed, if runs does not satisfy preconditions it will be skipped.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Precondition preconditions = 10;</code>
     * @param array<\Eolymp\Executor\Task\Precondition>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setPreconditions($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Executor\Task\Precondition::class);
        $this->preconditions = $arr;

        return $this;
    }

    /**
     * Actors of the task.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Actor actors = 20;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getActors()
    {
        return $this->actors;
    }

    /**
     * Actors of the task.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Actor actors = 20;</code>
     * @param array<\Eolymp\Executor\Job\Actor>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setActors($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Executor\Job\Actor::class);
        $this->actors = $arr;

        return $this;
    }

    /**
     * Scenario defines template for runs, steps in run are merged with scenario
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Step scenario = 40;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getScenario()
    {
        return $this->scenario;
    }

    /**
     * Scenario defines template for runs, steps in run are merged with scenario
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Step scenario = 40;</code>
     * @param array<\Eolymp\Executor\Job\Step>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setScenario($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Executor\Job\Step::class);
        $this->scenario = $arr;

        return $this;
    }

    /**
     * Runs of the task.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Run runs = 30;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getRuns()
    {
        return $this->runs;
    }

    /**
     * Runs of the task.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Job.Run runs = 30;</code>
     * @param array<\Eolymp\Executor\Job\Run>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setRuns($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Executor\Job\Run::class);
        $this->runs = $arr;

        return $this;
    }

}

