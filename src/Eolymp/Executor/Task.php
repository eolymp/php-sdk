<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/executor/task.proto

namespace Eolymp\Executor;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Task represents task to be executed by judge agent.
 *
 * Generated from protobuf message <code>eolymp.executor.Task</code>
 */
class Task extends \Google\Protobuf\Internal\Message
{
    /**
     * Task unique reference so originator can look up task in its database, for example, this field might be set to
     * Submission ID. Unlike ID, reference is set by client and does not have to be unique. Although, it would make
     * sense for reference to be unique within same originator, otherwise originator won't be able to correlated tasks
     * in its database.
     *
     * Generated from protobuf field <code>string reference = 1;</code>
     */
    protected $reference = '';
    /**
     * Task originator (service which has created task). This field will be added to task status reports, so consumers
     * can easily filter status reports they are interested in.
     *
     * Generated from protobuf field <code>string origin = 2;</code>
     */
    protected $origin = '';
    /**
     * Task priority. Allowed values 1-9. Messages with higher priority are precessed first.
     * Currently not supported.
     *
     * Generated from protobuf field <code>uint32 priority = 3;</code>
     */
    protected $priority = 0;
    /**
     * Programming language.
     * Deprecated: use runtime instead.
     *
     * Generated from protobuf field <code>string lang = 1000;</code>
     */
    protected $lang = '';
    /**
     * Runtime which should be used to execute source code.
     *
     * Generated from protobuf field <code>string runtime = 10;</code>
     */
    protected $runtime = '';
    /**
     * Source code.
     *
     * Generated from protobuf field <code>string source = 11;</code>
     */
    protected $source = '';
    /**
     * Program handles input and output on it's own: if true stdin will be empty and stdout will be ignored.
     * Deprecated: always use `false`. Even if value is false program can read and write to the input.txt and output.txt.
     *
     * Generated from protobuf field <code>bool use_file_io = 12;</code>
     */
    protected $use_file_io = false;
    /**
     * Combine stderr and stdout when capturing output. Checker will use combined output as answer. Status will capture
     * both stderr and stdout in output field while stderr will be empty.
     *
     * Generated from protobuf field <code>bool redirect_stderr_to_stdout = 13;</code>
     */
    protected $redirect_stderr_to_stdout = false;
    /**
     * Create workspace archive for every run and upload it to the storage
     *
     * Generated from protobuf field <code>bool use_workspace_archive = 15;</code>
     */
    protected $use_workspace_archive = false;
    /**
     * Number of times solution will be executed, after each run (except last) output.txt will be renamed to input.txt.
     *
     * Generated from protobuf field <code>uint32 run_count = 16;</code>
     */
    protected $run_count = 0;
    /**
     * Precondition define conditions when each run should be executed, if runs does not satisfy preconditions it will be skipped.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Precondition preconditions = 40;</code>
     */
    private $preconditions;
    /**
     * Execution constraints, define limits imposed on each run.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Constraint constraints = 20;</code>
     */
    private $constraints;
    /**
     * Checker configuration.
     *
     * Generated from protobuf field <code>.eolymp.executor.Checker checker = 24;</code>
     */
    protected $checker = null;
    /**
     * Interactor configuration
     *
     * Generated from protobuf field <code>.eolymp.executor.Interactor interactor = 25;</code>
     */
    protected $interactor = null;
    /**
     * Run configurations.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Run runs = 30;</code>
     */
    private $runs;
    /**
     * Additional files to be placed in the work directory during compilation and runs*
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.File files = 50;</code>
     */
    private $files;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $reference
     *           Task unique reference so originator can look up task in its database, for example, this field might be set to
     *           Submission ID. Unlike ID, reference is set by client and does not have to be unique. Although, it would make
     *           sense for reference to be unique within same originator, otherwise originator won't be able to correlated tasks
     *           in its database.
     *     @type string $origin
     *           Task originator (service which has created task). This field will be added to task status reports, so consumers
     *           can easily filter status reports they are interested in.
     *     @type int $priority
     *           Task priority. Allowed values 1-9. Messages with higher priority are precessed first.
     *           Currently not supported.
     *     @type string $lang
     *           Programming language.
     *           Deprecated: use runtime instead.
     *     @type string $runtime
     *           Runtime which should be used to execute source code.
     *     @type string $source
     *           Source code.
     *     @type bool $use_file_io
     *           Program handles input and output on it's own: if true stdin will be empty and stdout will be ignored.
     *           Deprecated: always use `false`. Even if value is false program can read and write to the input.txt and output.txt.
     *     @type bool $redirect_stderr_to_stdout
     *           Combine stderr and stdout when capturing output. Checker will use combined output as answer. Status will capture
     *           both stderr and stdout in output field while stderr will be empty.
     *     @type bool $use_workspace_archive
     *           Create workspace archive for every run and upload it to the storage
     *     @type int $run_count
     *           Number of times solution will be executed, after each run (except last) output.txt will be renamed to input.txt.
     *     @type \Eolymp\Executor\Task\Precondition[]|\Google\Protobuf\Internal\RepeatedField $preconditions
     *           Precondition define conditions when each run should be executed, if runs does not satisfy preconditions it will be skipped.
     *     @type \Eolymp\Executor\Task\Constraint[]|\Google\Protobuf\Internal\RepeatedField $constraints
     *           Execution constraints, define limits imposed on each run.
     *     @type \Eolymp\Executor\Checker $checker
     *           Checker configuration.
     *     @type \Eolymp\Executor\Interactor $interactor
     *           Interactor configuration
     *     @type \Eolymp\Executor\Task\Run[]|\Google\Protobuf\Internal\RepeatedField $runs
     *           Run configurations.
     *     @type \Eolymp\Executor\Task\File[]|\Google\Protobuf\Internal\RepeatedField $files
     *           Additional files to be placed in the work directory during compilation and runs*
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Executor\Task::initOnce();
        parent::__construct($data);
    }

    /**
     * Task unique reference so originator can look up task in its database, for example, this field might be set to
     * Submission ID. Unlike ID, reference is set by client and does not have to be unique. Although, it would make
     * sense for reference to be unique within same originator, otherwise originator won't be able to correlated tasks
     * in its database.
     *
     * Generated from protobuf field <code>string reference = 1;</code>
     * @return string
     */
    public function getReference()
    {
        return $this->reference;
    }

    /**
     * Task unique reference so originator can look up task in its database, for example, this field might be set to
     * Submission ID. Unlike ID, reference is set by client and does not have to be unique. Although, it would make
     * sense for reference to be unique within same originator, otherwise originator won't be able to correlated tasks
     * in its database.
     *
     * Generated from protobuf field <code>string reference = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setReference($var)
    {
        GPBUtil::checkString($var, True);
        $this->reference = $var;

        return $this;
    }

    /**
     * Task originator (service which has created task). This field will be added to task status reports, so consumers
     * can easily filter status reports they are interested in.
     *
     * Generated from protobuf field <code>string origin = 2;</code>
     * @return string
     */
    public function getOrigin()
    {
        return $this->origin;
    }

    /**
     * Task originator (service which has created task). This field will be added to task status reports, so consumers
     * can easily filter status reports they are interested in.
     *
     * Generated from protobuf field <code>string origin = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setOrigin($var)
    {
        GPBUtil::checkString($var, True);
        $this->origin = $var;

        return $this;
    }

    /**
     * Task priority. Allowed values 1-9. Messages with higher priority are precessed first.
     * Currently not supported.
     *
     * Generated from protobuf field <code>uint32 priority = 3;</code>
     * @return int
     */
    public function getPriority()
    {
        return $this->priority;
    }

    /**
     * Task priority. Allowed values 1-9. Messages with higher priority are precessed first.
     * Currently not supported.
     *
     * Generated from protobuf field <code>uint32 priority = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setPriority($var)
    {
        GPBUtil::checkUint32($var);
        $this->priority = $var;

        return $this;
    }

    /**
     * Programming language.
     * Deprecated: use runtime instead.
     *
     * Generated from protobuf field <code>string lang = 1000;</code>
     * @return string
     */
    public function getLang()
    {
        return $this->lang;
    }

    /**
     * Programming language.
     * Deprecated: use runtime instead.
     *
     * Generated from protobuf field <code>string lang = 1000;</code>
     * @param string $var
     * @return $this
     */
    public function setLang($var)
    {
        GPBUtil::checkString($var, True);
        $this->lang = $var;

        return $this;
    }

    /**
     * Runtime which should be used to execute source code.
     *
     * Generated from protobuf field <code>string runtime = 10;</code>
     * @return string
     */
    public function getRuntime()
    {
        return $this->runtime;
    }

    /**
     * Runtime which should be used to execute source code.
     *
     * Generated from protobuf field <code>string runtime = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setRuntime($var)
    {
        GPBUtil::checkString($var, True);
        $this->runtime = $var;

        return $this;
    }

    /**
     * Source code.
     *
     * Generated from protobuf field <code>string source = 11;</code>
     * @return string
     */
    public function getSource()
    {
        return $this->source;
    }

    /**
     * Source code.
     *
     * Generated from protobuf field <code>string source = 11;</code>
     * @param string $var
     * @return $this
     */
    public function setSource($var)
    {
        GPBUtil::checkString($var, True);
        $this->source = $var;

        return $this;
    }

    /**
     * Program handles input and output on it's own: if true stdin will be empty and stdout will be ignored.
     * Deprecated: always use `false`. Even if value is false program can read and write to the input.txt and output.txt.
     *
     * Generated from protobuf field <code>bool use_file_io = 12;</code>
     * @return bool
     */
    public function getUseFileIo()
    {
        return $this->use_file_io;
    }

    /**
     * Program handles input and output on it's own: if true stdin will be empty and stdout will be ignored.
     * Deprecated: always use `false`. Even if value is false program can read and write to the input.txt and output.txt.
     *
     * Generated from protobuf field <code>bool use_file_io = 12;</code>
     * @param bool $var
     * @return $this
     */
    public function setUseFileIo($var)
    {
        GPBUtil::checkBool($var);
        $this->use_file_io = $var;

        return $this;
    }

    /**
     * Combine stderr and stdout when capturing output. Checker will use combined output as answer. Status will capture
     * both stderr and stdout in output field while stderr will be empty.
     *
     * Generated from protobuf field <code>bool redirect_stderr_to_stdout = 13;</code>
     * @return bool
     */
    public function getRedirectStderrToStdout()
    {
        return $this->redirect_stderr_to_stdout;
    }

    /**
     * Combine stderr and stdout when capturing output. Checker will use combined output as answer. Status will capture
     * both stderr and stdout in output field while stderr will be empty.
     *
     * Generated from protobuf field <code>bool redirect_stderr_to_stdout = 13;</code>
     * @param bool $var
     * @return $this
     */
    public function setRedirectStderrToStdout($var)
    {
        GPBUtil::checkBool($var);
        $this->redirect_stderr_to_stdout = $var;

        return $this;
    }

    /**
     * Create workspace archive for every run and upload it to the storage
     *
     * Generated from protobuf field <code>bool use_workspace_archive = 15;</code>
     * @return bool
     */
    public function getUseWorkspaceArchive()
    {
        return $this->use_workspace_archive;
    }

    /**
     * Create workspace archive for every run and upload it to the storage
     *
     * Generated from protobuf field <code>bool use_workspace_archive = 15;</code>
     * @param bool $var
     * @return $this
     */
    public function setUseWorkspaceArchive($var)
    {
        GPBUtil::checkBool($var);
        $this->use_workspace_archive = $var;

        return $this;
    }

    /**
     * Number of times solution will be executed, after each run (except last) output.txt will be renamed to input.txt.
     *
     * Generated from protobuf field <code>uint32 run_count = 16;</code>
     * @return int
     */
    public function getRunCount()
    {
        return $this->run_count;
    }

    /**
     * Number of times solution will be executed, after each run (except last) output.txt will be renamed to input.txt.
     *
     * Generated from protobuf field <code>uint32 run_count = 16;</code>
     * @param int $var
     * @return $this
     */
    public function setRunCount($var)
    {
        GPBUtil::checkUint32($var);
        $this->run_count = $var;

        return $this;
    }

    /**
     * Precondition define conditions when each run should be executed, if runs does not satisfy preconditions it will be skipped.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Precondition preconditions = 40;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getPreconditions()
    {
        return $this->preconditions;
    }

    /**
     * Precondition define conditions when each run should be executed, if runs does not satisfy preconditions it will be skipped.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Precondition preconditions = 40;</code>
     * @param \Eolymp\Executor\Task\Precondition[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setPreconditions($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Executor\Task\Precondition::class);
        $this->preconditions = $arr;

        return $this;
    }

    /**
     * Execution constraints, define limits imposed on each run.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Constraint constraints = 20;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getConstraints()
    {
        return $this->constraints;
    }

    /**
     * Execution constraints, define limits imposed on each run.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Constraint constraints = 20;</code>
     * @param \Eolymp\Executor\Task\Constraint[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setConstraints($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Executor\Task\Constraint::class);
        $this->constraints = $arr;

        return $this;
    }

    /**
     * Checker configuration.
     *
     * Generated from protobuf field <code>.eolymp.executor.Checker checker = 24;</code>
     * @return \Eolymp\Executor\Checker
     */
    public function getChecker()
    {
        return $this->checker;
    }

    /**
     * Checker configuration.
     *
     * Generated from protobuf field <code>.eolymp.executor.Checker checker = 24;</code>
     * @param \Eolymp\Executor\Checker $var
     * @return $this
     */
    public function setChecker($var)
    {
        GPBUtil::checkMessage($var, \Eolymp\Executor\Checker::class);
        $this->checker = $var;

        return $this;
    }

    /**
     * Interactor configuration
     *
     * Generated from protobuf field <code>.eolymp.executor.Interactor interactor = 25;</code>
     * @return \Eolymp\Executor\Interactor
     */
    public function getInteractor()
    {
        return $this->interactor;
    }

    /**
     * Interactor configuration
     *
     * Generated from protobuf field <code>.eolymp.executor.Interactor interactor = 25;</code>
     * @param \Eolymp\Executor\Interactor $var
     * @return $this
     */
    public function setInteractor($var)
    {
        GPBUtil::checkMessage($var, \Eolymp\Executor\Interactor::class);
        $this->interactor = $var;

        return $this;
    }

    /**
     * Run configurations.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Run runs = 30;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getRuns()
    {
        return $this->runs;
    }

    /**
     * Run configurations.
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.Run runs = 30;</code>
     * @param \Eolymp\Executor\Task\Run[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setRuns($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Executor\Task\Run::class);
        $this->runs = $arr;

        return $this;
    }

    /**
     * Additional files to be placed in the work directory during compilation and runs*
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.File files = 50;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFiles()
    {
        return $this->files;
    }

    /**
     * Additional files to be placed in the work directory during compilation and runs*
     *
     * Generated from protobuf field <code>repeated .eolymp.executor.Task.File files = 50;</code>
     * @param \Eolymp\Executor\Task\File[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFiles($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eolymp\Executor\Task\File::class);
        $this->files = $arr;

        return $this;
    }

}

