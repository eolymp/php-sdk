<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\Helpdesk;

class SupportClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateTicketInput $input message
     * @param array $context request parameters
     *
     * @return CreateTicketOutput output message
     */
    public function CreateTicket(CreateTicketInput $input, array $context = [])
    {
        $path = "/helpdesk/tickets";

        $context['name'] = "eolymp.helpdesk.Support/CreateTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateTicketOutput::class, $context);
    }

    /**
     * @param UpdateTicketInput $input message
     * @param array $context request parameters
     *
     * @return UpdateTicketOutput output message
     */
    public function UpdateTicket(UpdateTicketInput $input, array $context = [])
    {
        $path = "/helpdesk/tickets/".rawurlencode($input->getTicketId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.helpdesk.Support/UpdateTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateTicketOutput::class, $context);
    }

    /**
     * @param DeleteTicketInput $input message
     * @param array $context request parameters
     *
     * @return DeleteTicketOutput output message
     */
    public function DeleteTicket(DeleteTicketInput $input, array $context = [])
    {
        $path = "/helpdesk/tickets/".rawurlencode($input->getTicketId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.helpdesk.Support/DeleteTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteTicketOutput::class, $context);
    }

    /**
     * @param DescribeTicketInput $input message
     * @param array $context request parameters
     *
     * @return DescribeTicketOutput output message
     */
    public function DescribeTicket(DescribeTicketInput $input, array $context = [])
    {
        $path = "/helpdesk/tickets/".rawurlencode($input->getTicketId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.helpdesk.Support/DescribeTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeTicketOutput::class, $context);
    }

    /**
     * @param ListTicketsInput $input message
     * @param array $context request parameters
     *
     * @return ListTicketsOutput output message
     */
    public function ListTickets(ListTicketsInput $input, array $context = [])
    {
        $path = "/helpdesk/tickets";

        $context['name'] = "eolymp.helpdesk.Support/ListTickets";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListTicketsOutput::class, $context);
    }

    /**
     * @param ApproveTicketInput $input message
     * @param array $context request parameters
     *
     * @return ApproveTicketOutput output message
     */
    public function ApproveTicket(ApproveTicketInput $input, array $context = [])
    {
        $path = "/helpdesk/tickets/".rawurlencode($input->getTicketId())."/approve";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.helpdesk.Support/ApproveTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ApproveTicketOutput::class, $context);
    }

    /**
     * @param RejectTicketInput $input message
     * @param array $context request parameters
     *
     * @return RejectTicketOutput output message
     */
    public function RejectTicket(RejectTicketInput $input, array $context = [])
    {
        $path = "/helpdesk/tickets/".rawurlencode($input->getTicketId())."/reject";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.helpdesk.Support/RejectTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, RejectTicketOutput::class, $context);
    }

    /**
     * @param CloseTicketInput $input message
     * @param array $context request parameters
     *
     * @return CloseTicketOutput output message
     */
    public function CloseTicket(CloseTicketInput $input, array $context = [])
    {
        $path = "/helpdesk/tickets/".rawurlencode($input->getTicketId())."/close";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTicketId("");

        $context['name'] = "eolymp.helpdesk.Support/CloseTicket";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CloseTicketOutput::class, $context);
    }

}
