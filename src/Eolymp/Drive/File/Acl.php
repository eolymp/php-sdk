<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/drive/file.proto

namespace Eolymp\Drive\File;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.drive.File.Acl</code>
 */
class Acl
{
    /**
     * reserved, should not be used
     *
     * Generated from protobuf enum <code>NONE = 0;</code>
     */
    const NONE = 0;
    /**
     * file is available without authentication
     *
     * Generated from protobuf enum <code>PUBLIC = 1;</code>
     */
    const PBPUBLIC = 1;
    /**
     * file is only available to members
     *
     * Generated from protobuf enum <code>PROTECTED = 2;</code>
     */
    const PBPROTECTED = 2;
    /**
     * file is only available to administrators
     *
     * Generated from protobuf enum <code>PRIVATE = 3;</code>
     */
    const PBPRIVATE = 3;

    private static $valueToName = [
        self::NONE => 'NONE',
        self::PBPUBLIC => 'PBPUBLIC',
        self::PBPROTECTED => 'PBPROTECTED',
        self::PBPRIVATE => 'PBPRIVATE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Acl::class, \Eolymp\Drive\File_Acl::class);

