<?php
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-php-esdk for more details.

namespace Eolymp\L10N;

class LocalizationServiceClient {

    /** @var string base URL */
    private $url;

    /** @var callable RPC client */
    private $invoker;

    /**
     * @param string   $url     defines base URL for service
     * @param callable $invoker provides transport implementation for calls
     */
    public function __construct($url, $invoker)
    {
        $this->url = $url;
        $this->invoker = $invoker;
    }

    /**
     * @param CreateTermInput $input message
     * @param array $context request parameters
     *
     * @return CreateTermOutput output message
     */
    public function CreateTerm(CreateTermInput $input, array $context = [])
    {
        $path = "/terms";

        $context['name'] = "eolymp.l10n.LocalizationService/CreateTerm";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, CreateTermOutput::class, $context);
    }

    /**
     * @param ListTermsInput $input message
     * @param array $context request parameters
     *
     * @return ListTermsOutput output message
     */
    public function ListTerms(ListTermsInput $input, array $context = [])
    {
        $path = "/terms";

        $context['name'] = "eolymp.l10n.LocalizationService/ListTerms";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListTermsOutput::class, $context);
    }

    /**
     * @param UpdateTermInput $input message
     * @param array $context request parameters
     *
     * @return UpdateTermOutput output message
     */
    public function UpdateTerm(UpdateTermInput $input, array $context = [])
    {
        $path = "/terms/".rawurlencode($input->getTermId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTermId("");

        $context['name'] = "eolymp.l10n.LocalizationService/UpdateTerm";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateTermOutput::class, $context);
    }

    /**
     * @param ApproveTermInput $input message
     * @param array $context request parameters
     *
     * @return ApproveTermOutput output message
     */
    public function ApproveTerm(ApproveTermInput $input, array $context = [])
    {
        $path = "/terms/".rawurlencode($input->getTermId())."/approve";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTermId("");

        $context['name'] = "eolymp.l10n.LocalizationService/ApproveTerm";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ApproveTermOutput::class, $context);
    }

    /**
     * @param DeprecateTermInput $input message
     * @param array $context request parameters
     *
     * @return DeprecateTermOutput output message
     */
    public function DeprecateTerm(DeprecateTermInput $input, array $context = [])
    {
        $path = "/terms/".rawurlencode($input->getTermId())."/deprecate";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTermId("");

        $context['name'] = "eolymp.l10n.LocalizationService/DeprecateTerm";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, DeprecateTermOutput::class, $context);
    }

    /**
     * @param DeleteTermInput $input message
     * @param array $context request parameters
     *
     * @return DeleteTermOutput output message
     */
    public function DeleteTerm(DeleteTermInput $input, array $context = [])
    {
        $path = "/terms/".rawurlencode($input->getTermId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTermId("");

        $context['name'] = "eolymp.l10n.LocalizationService/DeleteTerm";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteTermOutput::class, $context);
    }

    /**
     * @param DescribeTermInput $input message
     * @param array $context request parameters
     *
     * @return DescribeTermOutput output message
     */
    public function DescribeTerm(DescribeTermInput $input, array $context = [])
    {
        $path = "/terms/".rawurlencode($input->getTermId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTermId("");

        $context['name'] = "eolymp.l10n.LocalizationService/DescribeTerm";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, DescribeTermOutput::class, $context);
    }

    /**
     * @param ImportTermsInput $input message
     * @param array $context request parameters
     *
     * @return ImportTermsOutput output message
     */
    public function ImportTerms(ImportTermsInput $input, array $context = [])
    {
        $path = "/terms";

        $context['name'] = "eolymp.l10n.LocalizationService/ImportTerms";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, ImportTermsOutput::class, $context);
    }

    /**
     * @param TranslateTermInput $input message
     * @param array $context request parameters
     *
     * @return TranslateTermOutput output message
     */
    public function TranslateTerm(TranslateTermInput $input, array $context = [])
    {
        $path = "/terms/".rawurlencode($input->getTermId())."/translations";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTermId("");

        $context['name'] = "eolymp.l10n.LocalizationService/TranslateTerm";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, TranslateTermOutput::class, $context);
    }

    /**
     * @param ListTranslationsInput $input message
     * @param array $context request parameters
     *
     * @return ListTranslationsOutput output message
     */
    public function ListTranslations(ListTranslationsInput $input, array $context = [])
    {
        $path = "/terms/".rawurlencode($input->getTermId())."/translations";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTermId("");

        $context['name'] = "eolymp.l10n.LocalizationService/ListTranslations";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ListTranslationsOutput::class, $context);
    }

    /**
     * @param DeleteTranslationInput $input message
     * @param array $context request parameters
     *
     * @return DeleteTranslationOutput output message
     */
    public function DeleteTranslation(DeleteTranslationInput $input, array $context = [])
    {
        $path = "/terms/".rawurlencode($input->getTermId())."/translations/".rawurlencode($input->getTranslationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTermId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.l10n.LocalizationService/DeleteTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "DELETE", $this->url.$path, $input, DeleteTranslationOutput::class, $context);
    }

    /**
     * @param UpdateTranslationInput $input message
     * @param array $context request parameters
     *
     * @return UpdateTranslationOutput output message
     */
    public function UpdateTranslation(UpdateTranslationInput $input, array $context = [])
    {
        $path = "/terms/".rawurlencode($input->getTermId())."/translations/".rawurlencode($input->getTranslationId());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTermId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.l10n.LocalizationService/UpdateTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, UpdateTranslationOutput::class, $context);
    }

    /**
     * @param ApproveTranslationInput $input message
     * @param array $context request parameters
     *
     * @return ApproveTranslationOutput output message
     */
    public function ApproveTranslation(ApproveTranslationInput $input, array $context = [])
    {
        $path = "/terms/".rawurlencode($input->getTermId())."/translations/".rawurlencode($input->getTranslationId())."/approve";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTermId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.l10n.LocalizationService/ApproveTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, ApproveTranslationOutput::class, $context);
    }

    /**
     * @param RejectTranslationInput $input message
     * @param array $context request parameters
     *
     * @return RejectTranslationOutput output message
     */
    public function RejectTranslation(RejectTranslationInput $input, array $context = [])
    {
        $path = "/terms/".rawurlencode($input->getTermId())."/translations/".rawurlencode($input->getTranslationId())."/reject";

        // Cleanup URL parameters to avoid any ambiguity
        $input->setTermId("");
        $input->setTranslationId("");

        $context['name'] = "eolymp.l10n.LocalizationService/RejectTranslation";
        $context['path'] = $path;

        return call_user_func($this->invoker, "POST", $this->url.$path, $input, RejectTranslationOutput::class, $context);
    }

    /**
     * @param ImportTranslationsInput $input message
     * @param array $context request parameters
     *
     * @return ImportTranslationsOutput output message
     */
    public function ImportTranslations(ImportTranslationsInput $input, array $context = [])
    {
        $path = "/translations/".rawurlencode($input->getLocale());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setLocale("");

        $context['name'] = "eolymp.l10n.LocalizationService/ImportTranslations";
        $context['path'] = $path;

        return call_user_func($this->invoker, "PUT", $this->url.$path, $input, ImportTranslationsOutput::class, $context);
    }

    /**
     * @param ExportTranslationsInput $input message
     * @param array $context request parameters
     *
     * @return ExportTranslationsOutput output message
     */
    public function ExportTranslations(ExportTranslationsInput $input, array $context = [])
    {
        $path = "/translations/".rawurlencode($input->getLocale());

        // Cleanup URL parameters to avoid any ambiguity
        $input->setLocale("");

        $context['name'] = "eolymp.l10n.LocalizationService/ExportTranslations";
        $context['path'] = $path;

        return call_user_func($this->invoker, "GET", $this->url.$path, $input, ExportTranslationsOutput::class, $context);
    }

}
