<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/typewriter/block.proto

namespace Eolymp\Typewriter\Block;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>eolymp.typewriter.Block.Image</code>
 */
class Image extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string src = 1;</code>
     */
    protected $src = '';
    /**
     * Generated from protobuf field <code>string alt = 2;</code>
     */
    protected $alt = '';
    /**
     * Generated from protobuf field <code>string title = 3;</code>
     */
    protected $title = '';
    /**
     * Generated from protobuf field <code>uint32 width = 4;</code>
     */
    protected $width = 0;
    /**
     * Generated from protobuf field <code>uint32 height = 5;</code>
     */
    protected $height = 0;
    /**
     * Generated from protobuf field <code>bool zoomable = 6;</code>
     */
    protected $zoomable = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $src
     *     @type string $alt
     *     @type string $title
     *     @type int $width
     *     @type int $height
     *     @type bool $zoomable
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Eolymp\Typewriter\Block::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string src = 1;</code>
     * @return string
     */
    public function getSrc()
    {
        return $this->src;
    }

    /**
     * Generated from protobuf field <code>string src = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setSrc($var)
    {
        GPBUtil::checkString($var, True);
        $this->src = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string alt = 2;</code>
     * @return string
     */
    public function getAlt()
    {
        return $this->alt;
    }

    /**
     * Generated from protobuf field <code>string alt = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setAlt($var)
    {
        GPBUtil::checkString($var, True);
        $this->alt = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string title = 3;</code>
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Generated from protobuf field <code>string title = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setTitle($var)
    {
        GPBUtil::checkString($var, True);
        $this->title = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 width = 4;</code>
     * @return int
     */
    public function getWidth()
    {
        return $this->width;
    }

    /**
     * Generated from protobuf field <code>uint32 width = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setWidth($var)
    {
        GPBUtil::checkUint32($var);
        $this->width = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 height = 5;</code>
     * @return int
     */
    public function getHeight()
    {
        return $this->height;
    }

    /**
     * Generated from protobuf field <code>uint32 height = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setHeight($var)
    {
        GPBUtil::checkUint32($var);
        $this->height = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool zoomable = 6;</code>
     * @return bool
     */
    public function getZoomable()
    {
        return $this->zoomable;
    }

    /**
     * Generated from protobuf field <code>bool zoomable = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setZoomable($var)
    {
        GPBUtil::checkBool($var);
        $this->zoomable = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Image::class, \Eolymp\Typewriter\Block_Image::class);

