<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eolymp/commerce/order.proto

namespace Eolymp\Commerce\Order;

use UnexpectedValueException;

/**
 * Protobuf type <code>eolymp.commerce.Order.Status</code>
 */
class Status
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_STATUS = 0;</code>
     */
    const UNKNOWN_STATUS = 0;
    /**
     * order has not been placed yet
     *
     * Generated from protobuf enum <code>INCOMPLETE = 1;</code>
     */
    const INCOMPLETE = 1;
    /**
     * order is pending payment
     *
     * Generated from protobuf enum <code>PENDING = 2;</code>
     */
    const PENDING = 2;
    /**
     * recurring order is active: last payment was successful
     *
     * Generated from protobuf enum <code>ACTIVE = 3;</code>
     */
    const ACTIVE = 3;
    /**
     * recurring order is inactive: last payment is due or failed
     *
     * Generated from protobuf enum <code>INACTIVE = 4;</code>
     */
    const INACTIVE = 4;
    /**
     * order is complete
     *
     * Generated from protobuf enum <code>COMPLETE = 5;</code>
     */
    const COMPLETE = 5;

    private static $valueToName = [
        self::UNKNOWN_STATUS => 'UNKNOWN_STATUS',
        self::INCOMPLETE => 'INCOMPLETE',
        self::PENDING => 'PENDING',
        self::ACTIVE => 'ACTIVE',
        self::INACTIVE => 'INACTIVE',
        self::COMPLETE => 'COMPLETE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Status::class, \Eolymp\Commerce\Order_Status::class);

